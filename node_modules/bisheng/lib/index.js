'use strict';

var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var nunjucks = require('nunjucks');
var dora = require('dora');
var webpack = require('atool-build/lib/webpack');
var getWebpackCommonConfig = require('atool-build/lib/getWebpackCommonConfig');
var ghPages = require('gh-pages');
var getConfig = require('./utils/get-config');
var markdownData = require('./utils/markdown-data');
var generateFilesPath = require('./utils/generate-files-path');
var updateWebpackConfig = require('./utils/update-webpack-config');

var entryTemplate = fs.readFileSync(path.join(__dirname, 'entry.nunjucks.js')).toString();
mkdirp.sync(path.join(__dirname, '..', 'tmp'));

exports.start = function start(program) {
  var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
  var config = getConfig(configFile);

  mkdirp.sync(config.output);

  var template = fs.readFileSync(config.htmlTemplate).toString();
  var templatePath = path.join(process.cwd(), config.output, 'index.html');
  fs.writeFileSync(templatePath, nunjucks.renderString(template, { root: '/' }));

  var entryTemplatePath = path.join(__dirname, '..', 'tmp', 'entry.' + config.entryName + '.js');
  fs.writeFileSync(entryTemplatePath, nunjucks.renderString(entryTemplate, {
    themePath: path.join(process.cwd(), config.theme),
    root: '/'
  }));

  var doraConfig = Object.assign({}, {
    cwd: path.join(process.cwd(), config.output),
    port: config.port
  }, config.doraConfig);
  var usersDoraPlugin = config.doraConfig.plugins || [];
  doraConfig.plugins = [[require.resolve('dora-plugin-webpack'), {
    disableNpmInstall: true,
    cwd: process.cwd(),
    config: 'bisheng-inexistent.config.js'
  }], [path.join(__dirname, 'dora-plugin-bisheng'), {
    config: configFile
  }], require.resolve('dora-plugin-browser-history')];

  doraConfig.plugins = doraConfig.plugins.concat(usersDoraPlugin);

  if (program.livereload) {
    doraConfig.plugins.push(require.resolve('dora-plugin-livereload'));
  }
  dora(doraConfig);
};

var noop = function noop() {};
exports.build = function build(program, callback) {
  var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
  var config = getConfig(configFile);

  var markdown = markdownData.generate(config.source);
  var entryTemplatePath = path.join(__dirname, '..', 'tmp', 'entry.' + config.entryName + '.js');
  fs.writeFileSync(entryTemplatePath, nunjucks.renderString(entryTemplate, {
    themePath: path.join(process.cwd(), config.theme),
    root: config.root
  }));

  var themeConfig = require(path.join(process.cwd(), config.theme));

  var filesNeedCreated = generateFilesPath(themeConfig.routes, markdown);

  var template = fs.readFileSync(config.htmlTemplate).toString();
  var fileContent = nunjucks.renderString(template, { root: config.root });

  filesNeedCreated.forEach(function (file) {
    var output = path.join(config.output, file);
    mkdirp.sync(path.dirname(output));
    fs.writeFileSync(output, fileContent);
    console.log('Created: ', output);
  });

  var webpackConfig = updateWebpackConfig(getWebpackCommonConfig({ cwd: process.cwd() }), configFile, true);
  webpackConfig.UglifyJsPluginConfig = {
    output: {
      ascii_only: true
    },
    compress: {
      warnings: false
    }
  };
  webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin(webpackConfig.UglifyJsPluginConfig));
  webpackConfig.plugins.push(new webpack.DefinePlugin({
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')
  }));

  webpack(webpackConfig, function (err, stats) {
    if (err !== null) {
      return console.error(err);
    }

    if (stats.hasErrors()) {
      console.log(stats.toString('errors-only'));
    }
  }).run(callback || noop);
};

function pushToGhPages(basePath) {
  var options = {
    depth: 1,
    logger: function logger(message) {
      console.log(message);
    }
  };
  if (process.env.RUN_ENV_USER) {
    options.user = {
      name: process.env.RUN_ENV_USER,
      email: process.env.RUN_ENV_EMAIL
    };
  }
  ghPages.publish(basePath, options, function (err) {
    if (err) {
      throw err;
    }
    console.log('Site has been published!');
  });
}
exports.deploy = function deploy(program) {
  if (program.pushOnly) {
    var output = typeof program.pushOnly === 'string' ? program.pushOnly : './_site';
    var basePath = path.join(process.cwd(), output);
    pushToGhPages(basePath);
  } else {
    (function () {
      var configFile = path.join(process.cwd(), program.config || 'bisheng.config.js');
      var config = getConfig(configFile);
      var basePath = path.join(process.cwd(), config.output);
      exports.build(program, function () {
        return pushToGhPages(basePath);
      });
    })();
  }
};
'use strict';

var path = require('path');
var webpack = require('atool-build/lib/webpack');
var getConfig = require('./get-config');
var resolvePlugins = require('./resolve-plugins');
var bishengLib = path.join(__dirname, '..');
var bishengLibLoaders = path.join(bishengLib, 'loaders');

module.exports = function updateWebpackConfig(webpackConfig, configFile, isBuild) {
  var config = getConfig(configFile);

  /* eslint-disable no-param-reassign */
  webpackConfig.entry = {};
  if (isBuild) {
    webpackConfig.output.path = config.output;
  }
  webpackConfig.output.publicPath = isBuild ? config.root : '/';
  webpackConfig.module.loaders.push({
    test: function test(filename) {
      return filename === path.join(bishengLib, 'utils', 'data.js');
    },

    loader: '' + path.join(bishengLibLoaders, 'bisheng-data-loader') + ('?config=' + configFile + '&isBuild=' + isBuild)
  });

  webpackConfig.module.loaders.push({
    test: /\.md$/,
    exclude: /node_modules/,
    loaders: ['babel', '' + path.join(bishengLibLoaders, 'markdown-loader') + ('?config=' + configFile + '&isBuild=' + isBuild)]
  });
  /* eslint-enable no-param-reassign */

  var pluginsConfig = resolvePlugins(config.plugins, 'config');
  pluginsConfig.forEach(function (pluginConfig) {
    require(pluginConfig[0])(pluginConfig[1]).webpackConfig(webpackConfig, webpack);
  });

  var customizedWebpackConfig = config.webpackConfig(webpackConfig, webpack);

  var entryPath = path.join(bishengLib, '..', 'tmp', 'entry.' + config.entryName + '.js');
  if (customizedWebpackConfig.entry[config.entryName]) {
    throw new Error('Should not set `webpackConfig.entry.' + config.entryName + '`!');
  }
  customizedWebpackConfig.entry[config.entryName] = entryPath;
  return customizedWebpackConfig;
};
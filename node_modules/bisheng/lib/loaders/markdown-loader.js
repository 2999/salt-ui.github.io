'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var path = require('path');
var loaderUtils = require('loader-utils');
var getConfig = require('../utils/get-config');
var resolvePlugins = require('../utils/resolve-plugins');
var markdownData = require('../utils/markdown-data');

function stringify(node) {
  if (Array.isArray(node)) {
    return '[\n  ' + node.map(stringify).join(',\n  ') + '\n]';
  }
  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node !== null && !(node instanceof Date)) {
    if (node.__BISHENG_EMBEDED_CODE) {
      return node.code;
    }
    return '{\n  ' + Object.keys(node).map(function (key) {
      var value = node[key];
      return '  ' + key + ': ' + stringify(value) + ',\n';
    }).join('') + '\n}';
  }
  return JSON.stringify(node, null, 2);
}

module.exports = function markdownLoader(content) {
  if (this.cacheable) {
    this.cacheable();
  }
  var webpackRemainingChain = loaderUtils.getRemainingRequest(this).split('!');
  var fullPath = webpackRemainingChain[webpackRemainingChain.length - 1];
  var filename = path.relative(process.cwd(), fullPath);

  var query = loaderUtils.parseQuery(this.query);
  var plugins = resolvePlugins(getConfig(query.config).plugins, 'node');

  var parsedMarkdown = markdownData.process(filename, content, plugins, query.isBuild);
  return 'module.exports = ' + stringify(parsedMarkdown) + ';';
};
'use strict';

var fs = require('fs');
var path = require('path');
var loaderUtils = require('loader-utils');
var getConfig = require('../utils/get-config');
var markdownData = require('../utils/markdown-data');
var resolvePlugins = require('../utils/resolve-plugins');

module.exports = function bishengDataLoader() /* content */{
  if (this.cacheable) {
    this.cacheable();
  }

  var query = loaderUtils.parseQuery(this.query);
  var config = getConfig(query.config);

  var markdown = markdownData.generate(config.source);
  var browserPlugins = resolvePlugins(config.plugins, 'browser');
  var pluginsString = browserPlugins.map(function (plugin) {
    return 'require(\'' + plugin[0] + '\')(' + JSON.stringify(plugin[1]) + ')';
  }).join(',\n');

  var picked = {};
  if (config.pick) {
    (function () {
      var nodePlugins = resolvePlugins(config.plugins, 'node');
      markdownData.traverse(markdown, function (filename) {
        var fileContent = fs.readFileSync(path.join(process.cwd(), filename)).toString();
        var parsedMarkdown = markdownData.process(filename, fileContent, nodePlugins, query.isBuild);

        Object.keys(config.pick).forEach(function (key) {
          if (!picked[key]) {
            picked[key] = [];
          }

          var picker = config.pick[key];
          var pickedData = picker(parsedMarkdown);
          if (pickedData) {
            picked[key].push(pickedData);
          }
        });
      });
    })();
  }

  return 'var Promise = require(\'bluebird\');\n' + 'module.exports = {' + ('\n  markdown: ' + markdownData.stringify(markdown, config.lazyLoad) + ',') + ('\n  plugins: [\n' + pluginsString + '\n],') + ('\n  picked: ' + JSON.stringify(picked, null, 2) + ',') + '\n};';
};
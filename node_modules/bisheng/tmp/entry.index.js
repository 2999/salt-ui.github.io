'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('babel-polyfill');
/* eslint-disable no-unused-vars */
var React = require('react');
/* eslint-enable no-unused-vars */
var ReactDOM = require('react-dom');
var ReactRouter = require('react-router');
var NProgress = require('nprogress');
require('nprogress/nprogress.css');
var history = require('history');

var chain = require('ramda/src/chain');
var _toReactComponent = require('jsonml-to-react-component');
var exist = require('exist.js');
var NotFound = require('/Users/Poling/Documents/Project/Mine/ali/salt-ui.github.io/site/theme/template/NotFound');
var data = require('../lib/utils/data.js');

var plugins = data.plugins;
var converters = chain(function (plugin) {
  return plugin.converters || [];
}, plugins);
var utils = {
  get: exist.get,
  toReactComponent: function toReactComponent(jsonml) {
    return _toReactComponent(jsonml, converters);
  }
};
plugins.map(function (plugin) {
  return plugin.utils || {};
}).forEach(function (u) {
  return Object.assign(utils, u);
});

function calcPropsPath(dataPath, params) {
  return Object.keys(params).reduce(function (path, param) {
    return path.replace(':' + param, params[param]);
  }, dataPath);
}

function hasParams(dataPath) {
  return dataPath.split('/').some(function (snippet) {
    return snippet.startsWith(':');
  });
}

function defaultCollect(nextProps, callback) {
  callback(null, nextProps);
}
function templateWrapper(template) {
  var dataPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var Template = require('/Users/Poling/Documents/Project/Mine/ali/salt-ui.github.io/site/theme/template' + template.replace(/^\.\/template/, ''));

  return function (nextState, callback) {
    var propsPath = calcPropsPath(dataPath, nextState.params);
    var pageData = exist.get(data.markdown, propsPath.replace(/^\//, '').split('/'));
    var collect = Template.collect || defaultCollect;
    collect(Object.assign({}, nextState, {
      data: data.markdown,
      picked: data.picked,
      pageData: pageData,
      utils: utils
    }), function (err, nextProps) {
      var Comp = (!hasParams(dataPath) || pageData) && err !== 404 ? Template.default || Template : NotFound;
      Comp.dynamicProps = nextProps;
      callback(err === 404 ? null : err, Comp);
    });
  };
}

var theme = require('/Users/Poling/Documents/Project/Mine/ali/salt-ui.github.io/site/theme');
var routes = Array.isArray(theme.routes) ? theme.routes : [theme.routes];

function processRoutes(route) {
  if (Array.isArray(route)) {
    return route.map(processRoutes);
  }

  return Object.assign({}, route, {
    onEnter: function onEnter() {
      return NProgress.start();
    },
    component: undefined,
    getComponent: templateWrapper(route.component, route.dataPath || route.path),
    indexRoute: route.indexRoute && Object.assign({}, route.indexRoute, {
      component: undefined,
      getComponent: templateWrapper(route.indexRoute.component, route.indexRoute.dataPath || route.indexRoute.path)
    }),
    childRoutes: route.childRoutes && route.childRoutes.map(processRoutes)
  });
}

var processedRoutes = processRoutes(routes);
processedRoutes.push({
  path: '*',
  getComponents: templateWrapper('./template/NotFound')
});

function createElement(Component, props) {
  NProgress.done();
  return React.createElement(Component, _extends({}, props, Component.dynamicProps));
}

var router = React.createElement(ReactRouter.Router, {
  history: ReactRouter.useRouterHistory(history.createHistory)({
    basename: '/'
  }),
  routes: processedRoutes,
  createElement: createElement
});
ReactDOM.render(router, document.getElementById('react-content'));
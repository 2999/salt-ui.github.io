{"version":3,"file":null,"sources":["../src/util.js","../src/event.js","../src/ajax.pc.js","../src/jsonp.pc.js","../src/defer.js","../src/plugin.loop.js","../src/plugin.soon.js","../src/natty-fetch.js"],"sourcesContent":["/**\n * src/util.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nexport const hasWindow = 'undefined' !== typeof window;\nexport const doc = hasWindow ? document : null;\nexport const escape = encodeURIComponent;\nexport const NULL = null;\nexport const TRUE = true;\nexport const FALSE = !TRUE;\nexport const UNDEFINED = 'undefined';\nexport const EMPTY = '';\n\nconst toString = Object.prototype.toString;\nconst ARRAY_TYPE = '[object Array]';\nconst OBJECT_TYPE = '[object Object]';\n\n/**\n * 伪造的`promise`对象\n * NOTE 伪造的promise对象要支持链式调用 保证和`new Promise`返回的对象行为一致\n *      dummyPromise.then().catch().finally()\n */\nexport const dummyPromise = {\n    dummy: TRUE\n};\n\ndummyPromise.then = dummyPromise['catch'] = () => {\n    // NOTE 这里用了剪头函数 不能用`return this`\n    return dummyPromise;\n};\n\n/**\n * 判断是否是IE8~11, 不包含Edge\n * @returns {boolean}\n * @note IE11下 window.ActiveXObject的值很怪异, 所以需要追加 'ActiveXObject' in window 来判断\n */\nexport const isIE = hasWindow && (!!window.ActiveXObject || 'ActiveXObject' in window);\n\nexport function noop(v) {\n    return v;\n}\n\n/**\n * 变换两个参数的函数到多个参数\n * @param  {Function} fn 基函数\n * @return {Function} 变换后的函数\n * @demo\n *      function add(x, y) { return x+y; }\n *      add = redo(add);\n *      add(1,2,3) => 6\n */\nexport function redo(fn) {\n    return function () {\n        var args = arguments;\n        var ret = fn(args[0], args[1]);\n        for (var i = 2, l = args.length; i < l; i++) {\n            ret = fn(ret, args[i]);\n        }\n        return ret;\n    }\n};\n\nconst random = Math.random;\nconst floor = Math.floor;\nexport function makeRandom() {\n    return floor(random() * 9e9);\n};\n\nconst absoluteUrlReg = /^(https?:)?\\/\\//;\nexport function isAbsoluteUrl(url) {\n    return !!url.match(absoluteUrlReg);\n};\n\nconst relativeUrlReg = /^[\\.\\/]/;\nexport function isRelativeUrl(url) {\n    return !!url.match(relativeUrlReg);\n};\n\nconst BOOLEAN = 'boolean';\nexport function isBoolean(v) {\n    return typeof v === BOOLEAN;\n};\n\nconst STRING = 'string';\nexport function isString(v) {\n    return typeof v === STRING;\n};\n\nconst FUNCTION = 'function';\nexport function isFunction(v) {\n    return typeof v === FUNCTION;\n};\n\nexport function runAsFn(v) {\n    return isFunction(v) ? v() : v;\n};\n\nconst NUMBER = 'number';\nexport function isNumber(v) {\n    return !isNaN(v) && typeof v === NUMBER;\n};\n\nconst OBJECT = 'object';\nexport function isObject(v) {\n    return typeof v === OBJECT && v !== NULL;\n};\n\nexport function isWindow(v) {\n    return v !== NULL && v === v.window;\n};\n\n// 参考了zepto\nexport function isPlainObject(v) {\n    return v !== NULL && isObject(v) && !isWindow(v) && Object.getPrototypeOf(v) === Object.prototype;\n}\n\nexport function isEmptyObject(v) {\n    let count = 0;\n    for (let i in v) {\n        if (v.hasOwnProperty(i)) {\n            count++;\n        }\n    }\n    return count === 0;\n}\n\nexport function isArray(v) {\n    return toString.call(v) === ARRAY_TYPE;\n}\n\n/**\n * 判断是否跨域\n * @type {Element}\n * @note 需要特别关注IE8~11的行为是不一样的!!!\n */\nlet originA;\nif(doc) {\n    originA = doc.createElement('a');\n    originA.href = location.href;\n}\nexport function isCrossDomain(url) {\n\n    let requestA = doc.createElement('a');\n    requestA.href = url;\n\n    // 如果`url`的值不包含`protocol`和`host`(比如相对路径), 在标准浏览器下, 会自定补全`requestA`对象的`protocal`和`host`属性.\n    // 但在IE8~11下, 不会自动补全. 即`requestA.protocol`和`requestA.host`的值都是空的.\n    // 在IE11的不同小版本下, requestA.protocol的值有的是`:`, 有的是空字符串, 太奇葩啦!\n    if (__FALLBACK__) {\n        if (isIE && (requestA.protocol === ':' || requestA.protocol === '')) {\n            if (requestA.hostname === '') {\n                //alert(0)\n                return false;\n            } else {\n                //alert('1:'+(originA.hostname !== requestA.hostname || originA.port !== requestA.port))\n                return originA.hostname !== requestA.hostname || originA.port !== requestA.port;\n            }\n        }\n    }\n\n    // 标准浏览器\n    return originA.hostname !== requestA.hostname || originA.port !== requestA.port || originA.protocol !== requestA.protocol;\n};\n\n/**\n * 对象扩展\n * @param  {Object} receiver\n * @param  {Object} supplier\n * @return {Object} 扩展后的receiver对象\n * @note 这个extend方法是定制的, 不要拷贝到其他地方用!!!\n * @note 这个extend方法是深拷贝方式的!!!\n */\nfunction _extend(receiver = {}, supplier = {}, deepCopy = FALSE) {\n    for (let key in supplier) {\n        // `supplier`中不是未定义的键 都可以执行扩展\n        if (supplier.hasOwnProperty(key) && supplier[key] !== undefined) {\n            if (deepCopy === TRUE) {\n                if (isArray(supplier[key])) {\n                    receiver[key] = [].concat(supplier[key]);\n                } else if (isPlainObject(supplier[key])) {\n                    receiver[key] = extend({}, supplier[key]);\n                } else {\n                    receiver[key] = supplier[key];\n                }\n            } else {\n                receiver[key] = supplier[key];\n            }\n        }\n    }\n    return receiver;\n};\n\nconst extend = redo(_extend)\nexport {extend}\n\nexport function likeArray(v) {\n    if (!v) {\n        return false;\n    }\n    return typeof v.length === NUMBER;\n};\n\n/**\n *\n * @param v {Array|Object} 遍历目标对象\n * @param fn {Function} 遍历器 会被传入两个参数, 分别是`value`和`key`\n */\nexport function each(v, fn) {\n    let i, l;\n    if (likeArray(v)) {\n        for (i = 0, l = v.length; i < l; i++) {\n            if (fn.call(v[i], v[i], i) === false) return;\n        }\n    } else {\n        for (i in v) {\n            if (fn.call(v[i], v[i], i) === false) return;\n        }\n    }\n};\n\n/**\n * 将对象的`键`排序后 返回一个新对象\n *\n * @param obj {Object} 被操作的对象\n * @returns {Object} 返回的新对象\n * @case 这个函数用于对比两次请求的参数是否一致\n */\nexport function sortPlainObjectKey(obj) {\n    let clone = {};\n    let key;\n    let keyArray = [];\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            keyArray.push(key);\n            if (isPlainObject(obj[key])) {\n                obj[key] = sortPlainObjectKey(obj[key]);\n            }\n        }\n    }\n    keyArray.sort();\n    for (let i=0, l=keyArray.length; i<l; i++) {\n        clone[keyArray[i]] = obj[keyArray[i]];\n    }\n    return clone;\n};\n\nexport function serialize(params, obj, traditional, scope) {\n    let type, array = isArray(obj), hash = isPlainObject(obj);\n    each(obj, function(value, key) {\n        type = toString.call(value);\n        if (scope) {\n            key = traditional ? scope : scope + '[' + (hash || type == OBJECT_TYPE || type == ARRAY_TYPE ? key : '') + ']';\n        }\n\n        // 递归\n        if (!scope && array) {\n            params.add(value.name, value.value);\n        }\n        // recurse into nested objects\n        else if (type == ARRAY_TYPE || (!traditional && type == OBJECT_TYPE)) {\n            serialize(params, value, traditional, key);\n        } else {\n            params.add(key, value);\n        }\n    });\n};\n\n/**\n * 功能和`Zepto.param`一样\n * @param obj {Object}\n * @param traditional {Boolean}\n * @returns {string}\n * $.param({ foo: { one: 1, two: 2 }}) // \"foo[one]=1&foo[two]=2)\"\n * $.param({ ids: [1,2,3] })           // \"ids[]=1&ids[]=2&ids[]=3\"\n * $.param({ ids: [1,2,3] }, true)     // \"ids=1&ids=2&ids=3\"\n * $.param({ foo: 'bar', nested: { will: 'not be ignored' }})    // \"foo=bar&nested[will]=not+be+ignored\"\n * $.param({ foo: 'bar', nested: { will: 'be ignored' }}, true)  // \"foo=bar&nested=[object+Object]\"\n * $.param({ id: function(){ return 1 + 2 } })  // \"id=3\"\n */\nexport function param(obj, traditional) {\n    var params = [];\n    params.add = (key, value) => {\n        if (isFunction(value)) value = value();\n        if (value == NULL) value = '';\n        params.push(escape(key) + '=' + escape(value));\n    };\n    serialize(params, obj, traditional);\n    return params.join('&').replace(/%20/g, '+');\n};\n\nexport function decodeParam(str) {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n};\n\n// 给URL追加查询字符串\nexport function appendQueryString(url, obj, urlStamp, traditional) {\n    // 是否添加时间戳\n    if (urlStamp) {\n        obj[isBoolean(urlStamp) ? '_stamp' : urlStamp] = +new Date()\n    }\n    let queryString = param(obj, traditional);\n\n    if (queryString) {\n        return url + (~url.indexOf('?') ? '&' : '?') + queryString;\n    } else {\n        return url;\n    }\n};","/**\n * src/event.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nconst PREFIX = '_';\nfunction rename (type) { return PREFIX + type; }\n\nexport default {\n    on : function () {\n        var t    = this;\n        var args = arguments;\n        if (typeof args[0] === 'string' && typeof args[1] === 'function') {\n            var type = rename(args[0]);\n            t[type]  = t[type] || [];\n            t[type].push(args[1]);\n        } else if (typeof args[0] === 'object') {\n            var hash = args[0];\n            for (var i in hash) {\n                t.on(i, hash[i]);\n            }\n        }\n    },\n    off : function (type, fn) {\n        var t = this;\n        var type = rename(type);\n        if (!fn) {\n            delete t[type];\n        } else {\n            var fns = t[type];\n            fns.splice(fns.indexOf(fn), 1);\n            if (!t[type].length) delete t[type];\n        }\n    },\n    // @param {array} args\n    fire : function (type, args, context) {\n        var t = this;\n        var fns = t[rename(type)];\n        if (!fns) return 'NO_EVENT';\n        for (var i=0, fn; fn = fns[i]; i++) {\n            fn.apply(context || t, [].concat(args));\n        }\n    },\n    hasEvent : function (type) {\n        return !!this[rename(type)];\n    }\n}","/**\n * src/ajax.pc.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nimport {\n    extend, appendQueryString, noop, isCrossDomain, isBoolean, param, isIE,\n    hasWindow, FALSE, UNDEFINED, NULL\n} from './util';\n\nconst GET = 'GET';\nconst SCRIPT = 'script';\nconst XML = 'xml';\nconst JS0N = 'json'; // NOTE 不能使用`JSON`，这里用数字零`0`代替了字母`O`\n\nconst xhrTester = UNDEFINED !== typeof XMLHttpRequest ? new XMLHttpRequest() : {};\nconst hasXDR = UNDEFINED !== typeof XDomainRequest;\nconst fallback = hasWindow ? (!('withCredentials' in xhrTester) && hasXDR) : null;\nconst supportCORS = hasWindow ? (('withCredentials' in xhrTester) || hasXDR) : null;\n\n// minetype的简写映射\n// TODO 考虑是否优化\nconst acceptToRequestHeader = {\n    // IIS returns `application/x-javascript` 但应该不需要支持\n    '*':    '*/' + '*',\n    script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript',\n    json:   'application/json, text/json',\n    xml:    'application/xml, text/xml',\n    html:   'text/html',\n    text:   'text/plain'\n};\n\n// 设置请求头\n// 没有处理的事情：跨域时使用者传入的多余的Header没有屏蔽 没必要\nconst setHeaders = (xhr, options) => {\n    if (!xhr.setRequestHeader) {\n        return;\n    }\n\n    let header = {\n        Accept: acceptToRequestHeader[options.accept]\n    };\n\n    // 如果没有跨域 则打该标识 业界通用做法\n    // TODO 如果是跨域的 只有有限的requestHeader是可以使用的 待补充注释\n    if (!isCrossDomain(options.url)) {\n        header['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    extend(header, options.header);\n\n    // 如果是`POST`请求，根据options.postDataFormat设置对应的Content-Type\n    // FORM和JSON都强制使用对应的Content-Type，RAW则不改动Content-Type的值，由调用者指定\n    if (options.method === 'POST') {\n        let pdf = options.postDataFormat;\n        let contentType = (pdf === 'FORM')\n            ? 'application/x-www-form-urlencoded; charset=UTF-8'\n            : (pdf === 'JSON')\n                ? 'application/json; charset=UTF-8'\n                : NULL;\n        if (contentType !== NULL)\n            header['Content-Type'] = contentType;\n    }\n\n    for (let key in header) {\n        xhr.setRequestHeader(key, header[key]);\n    }\n};\n\n// 绑定事件\nconst setEvents = (xhr, options, isCrossDomain) => {\n\n    let completeFn = function() {\n        if (xhr._completed) {\n            return;\n        }\n        xhr._completed = true;\n        //options.log && console.info('~loadend');\n        options.complete();\n        xhr._aborted = null;\n        delete xhr._aborted;\n    }\n\n    let onLoadFn = function() {\n\n        if (xhr._completed) {\n            return;\n        }\n\n        let data = xhr.responseText;\n\n        switch (options.accept) {\n            case JS0N:\n                try {\n                    data = JSON.parse(data)\n                } catch (e) {\n                    console.warn('The response can NOT be parsed to JSON object.', data);\n                }\n                break;\n            case SCRIPT:\n                (1, eval)(data);\n                break;\n            case XML:\n                data = xhr.responseXML;\n                break;\n            default:\n                break;\n        }\n\n        options.success(data, xhr);\n        //C.log('complete after load');\n        completeFn();\n    };\n\n    let onErrorFn = function () {\n        if (xhr._completed) {\n            return;\n        }\n        options.error(xhr.status, xhr);\n        //C.log('complete after error');\n        completeFn();\n    }\n\n    let abortFn = function() {\n        if (xhr._completed) {\n            return;\n        }\n        options.abort();\n        completeFn();\n    };\n\n    // 如果是IE8/9 且 如果是跨域请求\n    if (fallback && isCrossDomain) {\n\n        // `XDomainRequest`实例是没有`onreadystatechange`方法的!!!\n        xhr.onload = onLoadFn;\n    } else {\n        // readyState value:\n        //   0: UNSET 未初始化\n        //   1: OPENED\n        //   2: HEADERS_RECEIVED\n        //   3: LOADING\n        //   4: DONE 此时触发load事件\n        xhr.onreadystatechange = () => {\n\n            if (xhr._completed) {\n                return\n            }\n            //console.log('xhr.readyState', xhr.readyState, 'xhr.status', xhr.status, xhr);\n            if (xhr.readyState == 4) {\n\n                // 如果请求被取消(aborted) 则`xhr.status`会是0 所以不会进入`success`回调\n                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n                    onLoadFn();\n                } else {\n                    // 因为取消时会先触发原生的`onreadystatechange`响应，后触发`onAbort`回调，所以\n                    // 如果请求被取消(aborted) 则`xhr.status`会是0 程序走到这里的时候，`xhr._aborted`状态是false，\n                    // 需要排除，不应该触发`error`回调\n                    !xhr._aborted && onErrorFn();\n                }\n            }\n        }\n    }\n\n    xhr.onerror = onErrorFn;\n\n    // 重写`abort`方法\n    let originAbort = xhr.abort;\n    xhr.abort = function() {\n        if (xhr._completed) {\n            return\n        }\n        xhr._aborted = true;\n        // NOTE 直接调用`originAbort()`时 浏览器会报 `Illegal invocation` 错误\n\n        // 非IE浏览器才会真正的调用原生`abort`\n        // https://github.com/jias/natty-fetch/issues/27\n        if (!isIE) {\n            originAbort.call(xhr);\n        }\n\n        // `XDomainRequest`对象实例居然没有`onabort`方法\n        abortFn();\n    };\n\n    // IE9 bug\n    xhr.onprogress = xhr.ontimeout = noop;\n};\n\nconst defaultOptions = {\n    url: '',\n    mark: {},\n    useMark: true,\n    method: GET,\n    accept: '*',\n    data: null,\n    header: {},\n    withCredentials: NULL, // 根据`url`是否跨域决定默认值. 如果显式配置该值(必须是布尔值), 则个使用配置值\n    urlStamp: true,\n    success: noop,\n    error: noop,\n    complete: noop,\n    abort: noop,\n    log: FALSE,\n    traditional: FALSE,\n    postDataFormat: 'FORM'\n};\n\nexport default function ajax(options) {\n\n    options = extend({}, defaultOptions, options);\n\n    // 是否跨域\n    let isCD = isCrossDomain(options.url);\n\n    // H5版本\n    // `IE10+`和标准浏览器的`XMLHttpRequest`都原生支持跨域\n    let xhr = new XMLHttpRequest();\n\n    // `IE8/9`使用`XDomainRequest`来实现跨域, `IE10+`的`XMLHttpRequest`对象直接支持跨域\n    if (fallback && isCD) {\n        // NOTE `XDomainRequest`仅支持`GET`和`POST`两个方法\n        // 支持的事件有: onerror, onload, onprogress, ontimeout, 注意没有`onloadend`\n        // https://developer.mozilla.org/zh-CN/docs/Web/API/XDomainRequest\n        xhr = new XDomainRequest();\n    }\n\n    // 再高级的浏览器都有低级错误! 已经不能在相信了!\n    // MAC OSX Yosemite Safari上的低级错误: 一次`ajax`请求的`loadend`事件完成之后,\n    // 如果执行`xhr.abort()`, 居然还能触发一遍`abort`和`loadend`事件!!!\n    // `_completed`标识一次完整的请求是否结束, 如果已结束, 则不再触发任何事件\n    xhr._completed = FALSE;\n\n    setEvents(xhr, options, isCD);\n\n    xhr.open(options.method, appendQueryString(\n        options.url,\n        extend({}, options.useMark ? options.mark : {}, options.method === GET ? options.data : {}),\n        options.urlStamp,\n        options.traditional\n    ));\n\n    // NOTE 生产环境的Server端, `Access-Control-Allow-Origin`的值一定不要配置成`*`!!! 而且`Access-Control-Allow-Credentials`应该是true!!!\n    // NOTE 如果Server端的`responseHeader`配置了`Access-Control-Allow-Origin`的值是通配符`*` 则前端`withCredentials`是不能使用true值的\n    // NOTE 如果Client端`withCredentials`使用了true值 则后端`responseHeader`中必须配置`Access-Control-Allow-Credentials`是true\n    if (!fallback) {\n        xhr.withCredentials = isBoolean(options.withCredentials) ? options.withCredentials : isCD;\n    }\n    \n    // 设置requestHeader\n    setHeaders(xhr, options);\n\n    // 根据postDataFormat来格式化要发送的数据\n    let pdf = options.postDataFormat;\n    let sendData;\n    if (options.method === GET || options.data === NULL)\n        sendData = NULL;\n    else\n        sendData = (pdf === 'FORM')\n            ? param(options.data, options.traditional)\n            : (pdf === 'JSON')\n                ? JSON.stringify(options.data)\n                : options.data;\n    \n    // 文档建议说 send方法如果不发送请求体数据 则null参数在某些浏览器上是必须的\n    xhr.send(sendData);\n\n    return xhr;\n};\n\najax.fallback = fallback;\najax.supportCORS = supportCORS;\n","/**\n * src/jsonp.pc.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nimport {appendQueryString, noop, extend, makeRandom, hasWindow, NULL, FALSE} from './util';\nconst win = hasWindow ? window : NULL;\nconst doc = hasWindow ? document : NULL;\nconst SCRIPT = 'script';\nconst IE8 = hasWindow ? navigator.userAgent.indexOf('MSIE 8.0') > -1 : FALSE;\n\n// TODO add test spec\nconst removeScript = (script) => {\n    if (IE8 && script.readyState) {\n        script.onreadystatechange = NULL;\n    } else {\n        script.onerror = NULL;\n    }\n    script.parentNode.removeChild(script);\n    script = NULL;\n};\nlet head = NULL;\nconst insertScript = (url, options) => {\n    let script = doc.createElement(SCRIPT);\n    script.type = 'text/javascript';\n    script.src = url;\n    script.async = true;\n\n    // 绑定`error`事件\n    if (IE8 && script.readyState) {\n        script.onreadystatechange = () => {\n            // IE8下script标签不支持`onerror`事件, 通过JSONP的执行顺序来模拟触发:\n            // 1:   script.readyState状态值为`loading`\n            // 2.1: 如果脚本加载成功, 浏览器就会先执行脚本内容, 即调用JSONP函数, 如: `jsonp2327905726()`,\n            //      (该函数执行之后会立即被设置成`null`值, 用于第3步的判断), JSONP函数执行完成后, 会进入第3步.\n            // 2.2: 如果脚本加载不成功, 也会进入第3步.\n            // 3:   无论脚本是否加载成功, `script.readyState`状态值都变化为`loaded`,\n            //      如果加载不成功, 可以通过判断JSONP函数一定是存在, 即可模拟`error`回调了.\n            if (script.readyState === 'loaded' && win[options.callbackName]) {\n                win[options.callbackName] = NULL;\n                options.error();\n                options.complete();\n            }\n        }\n    } else {\n        script.onerror = (e) => {\n            win[options.callbackName] = NULL;\n            options.error(e);\n            options.complete();\n        };\n    }\n\n    head = head || doc.getElementsByTagName('head')[0];\n    head.insertBefore(script, head.firstChild);\n    return script;\n}\n\nconst defaultOptions = {\n    url: '',\n    mark: {},\n    useMark: true,\n    data: {},\n    urlStamp: true,\n    success: noop,\n    error: noop,\n    complete: noop,\n    log: false,\n    flag: 'callback',\n    callbackName: 'jsonp{id}',\n    traditional: FALSE\n};\n\nexport default function jsonp(options) {\n\n    options = extend({}, defaultOptions, options);\n\n    let callbackName = options.callbackName = options.callbackName.replace(/\\{id\\}/, makeRandom());\n\n    let originComplete = options.complete;\n\n    let script;\n\n    // 二次包装的`complete`回调\n    options.complete = () => {\n        // 删除脚本\n        removeScript(script);\n        originComplete();\n    }\n\n    // 成功回调\n    win[callbackName] = (data) => {\n        // JSONP函数需要立即删除 用于`IE8`判断是否触发`onerror`\n        win[callbackName] = NULL;\n        options.success(data);\n        options.complete();\n    };\n\n    // 生成`url`\n    let url = appendQueryString(\n        options.url,\n        extend({[options.flag]: callbackName}, options.useMark ? options.mark : {}, options.data),\n        options.urlStamp,\n        options.traditional\n    );\n\n    // 插入脚本\n    script = insertScript(url, options);\n    \n    return {\n        abort() {\n            // 覆盖成功回调为无数据处理版本\n            win[callbackName] = () => {\n                win[callbackName] = NULL;\n            };\n            removeScript(script);\n        }\n    };\n}\n","/**\n * src/defer.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nexport default class Defer {\n  constructor(Promise) {\n    const t = this\n    t.promise = new Promise(function (resolve, reject) {\n      t._resolve = resolve\n      t._reject = reject\n    })\n  }\n\n  resolve(value) {\n    this._resolve.call(this.promise, value)\n  }\n\n  reject(reason) {\n    this._reject.call(this.promise, reason)\n  }\n}","\n/**\n * src/plugin.loop.js\n * 创建轮询支持\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nimport {isNumber, noop, TRUE, FALSE, NULL} from './util'\n\n/**\n * 创建轮询支持\n * @param api {Function} 需要轮询的函数\n */\nexport default function(apiInstance) {\n    let api = apiInstance.api;\n    api.loop = (options, resolveFn = noop, rejectFn = noop) => {\n        if (!options.duration || !isNumber(options.duration)) {\n            throw new Error('Illegal `duration` value for `startLoop` method.')\n        }\n\n        let loopTimer = NULL\n\n        let stop = () => {\n            clearTimeout(loopTimer)\n            loopTimer = NULL\n            stop.looping = FALSE\n        }\n\n        let sleepAndRequest = () => {\n            stop.looping = TRUE\n            loopTimer = setTimeout(() => {\n                api(options.data).then(resolveFn, rejectFn)\n                sleepAndRequest()\n            }, options.duration)\n        }\n\n        // NOTE 轮询过程中是不响应服务器端错误的 所以第二个参数是`noop`\n        api(options.data).then(resolveFn, rejectFn)\n        sleepAndRequest()\n        \n        return stop\n    }\n}\n","/**\n * src/plugin.soon.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\nimport {noop, isEmptyObject, sortPlainObjectKey, FALSE, TRUE} from './util';\n\nexport default function(apiInstance) {\n    let t = this;\n    let api = apiInstance.api;\n    let {config} = api;\n    api.soon = function(data, successFn = noop, errorFn = noop) {\n\n        // 是否忽略自身的并发请求\n        // NOTE 这个地方和内置的api方法不一致\n        if (config.ignoreSelfConcurrent && config.pending) {\n            return;\n        }\n\n        if (config.overrideSelfConcurrent && config._lastRequester) {\n            config._lastRequester.abort();\n            delete config._lastRequester;\n        }\n\n        // 一次请求的私有相关数据\n        let vars = t.makeVars(data);\n\n        let remoteRequest = function () {\n            t.remoteRequest(vars, config).then(function (content) {\n                successFn({\n                    fromStorage: FALSE,\n                    content\n                });\n            })['catch'](function (e) {\n                errorFn(e);\n            });\n        }\n\n        if (api.storageUseable) {\n\n            // 只有GET和JSONP才会有storage生效\n            vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));\n\n            api.storage.has(vars.queryString).then(function (result) {\n\n                // console.warn('has cached: ', hasValue);\n                if (result.has) {\n                    successFn({\n                        fromStorage: TRUE,\n                        content: result.value\n                    });\n                }\n\n                // 在`storage`可用的情况下, 远程请求返回的数据会同步到`storage`\n                remoteRequest();\n            });\n        } else {\n            remoteRequest();\n        }\n    };\n};","/**\n * src/natty-fetch.js\n *\n * @license MIT License\n * @author jias (https://github.com/jias/natty-fetch)\n */\n\nimport nattyStorage from 'natty-storage';\n\nif (nattyStorage === undefined) {\n    console.warn('Please install the `natty-storage` script which is required by `natty-fetch`, go on with' +\n        ' https://www.npmjs.com/package/natty-storage');\n}\n\nimport * as util from './util';\nconst {\n    extend, runAsFn, isAbsoluteUrl,\n    isRelativeUrl, noop, isBoolean,\n    isArray, isFunction,\n    sortPlainObjectKey, isEmptyObject,\n    isPlainObject, dummyPromise,\n    isString, NULL, TRUE, FALSE, EMPTY, hasWindow\n} = util;\n\nimport Defer from './defer';\nimport event from './event';\n\nimport ajax from './__AJAX__';\nimport jsonp from './__JSONP__';\n\n// 内置插件\nimport pluginLoop from './plugin.loop';\nimport pluginSoon from './plugin.soon';\n\n// 全局默认配置\nconst defaultGlobalConfig = {\n\n    // 默认参数\n    data: {},\n\n    // 请求完成钩子函数\n    didFetch: noop,\n\n    // 预处理回调\n    fit: noop,\n\n    // 自定义header, 只针对非跨域的ajax有效, 跨域时将忽略自定义header\n    header: {},\n\n    // 是否忽律接口自身的并发请求\n    ignoreSelfConcurrent: FALSE,\n\n    // 有两种格式配置`jsonp`的值\n    // {Boolean}\n    // {Array} eg: [TRUE, 'cb', 'j{id}']\n    jsonp: FALSE,\n\n    // 是否开启log信息\n    log: FALSE,\n\n    // 非GET方式对JSONP无效\n    method: 'GET',\n\n    // 是否开启mock模式\n    mock: FALSE,\n\n    mockUrl: EMPTY,\n\n    // 全局`mockUrl`前缀\n    mockUrlPrefix: EMPTY,\n\n    // 全局`mockUrl`后缀\n    mockUrlSuffix: EMPTY,\n\n    // 成功回调\n    process: noop,\n\n    // 私有Promise对象, 如果不想用浏览器原生的Promise对象的话\n    Promise: hasWindow ? window.Promise : NULL,\n\n    // 默认不执行重试\n    retry: 0,\n\n    // 使用已有的request方法\n    customRequest: NULL,\n\n    // 0表示不启动超时处理\n    timeout: 0,\n\n    // http://zeptojs.com/#$.param\n    traditional: FALSE,\n\n    url: EMPTY,\n\n    // 全局`url`前缀\n    urlPrefix: EMPTY,\n\n    // 是否在`url`上添加时间戳, 用于避免浏览器的304缓存\n    urlStamp: TRUE,\n\n    // 全局`url`后缀\n    urlSuffix: EMPTY,\n\n    // TODO 文档中没有暴露\n    withCredentials: NULL,\n\n    // 请求之前调用的钩子函数\n    willFetch: noop,\n\n    // 扩展: storage\n    storage: false,\n\n    // 插件\n    // 目前只支持两种插件\n    // plugins: [\n    //     nattyFetch.plugin.loop\n    //     nattyFetch.plugin.soon\n    // ]\n    plugins: false,\n\n    // POST的data格式，有以下三种，值严格区分大小写：\n    // 1. FORM\n    // 2. JSON\n    // 3. RAW\n    // 4. (其他任何值都将被视为RAW)\n    // 默认为FORM，跟Natty-Fetch原始逻辑兼容\n    postDataFormat: 'FORM'\n};\n\nlet runtimeGlobalConfig = extend({}, defaultGlobalConfig);\n\nclass API {\n    constructor(path, options, contextConfig, contextId) {\n        let t = this;\n        t.contextConfig = contextConfig;\n        t._path = path;\n\n        let config = t.config = t.processAPIOptions(options);\n\n        /**\n         * `api`的实现\n         * @param data {Object|Function}\n         * @returns {Object} Promise Object\n         */\n        t.api = function (data) {\n            data = data || {};\n            // 是否忽略自身的并发请求\n            if (config.ignoreSelfConcurrent && t.api.pending) {\n                return dummyPromise;\n            }\n\n            if (config.overrideSelfConcurrent && t.api._requester) {\n                t.api.abort();\n            }\n\n            let vars = t.makeVars(data);\n\n            if (config.retry === 0) {\n                return t.request(vars, config);\n            } else {\n                return t.tryRequest(vars, config);\n            }\n        };\n\n        t.api.contextId = contextId;\n        t.api._path = path;\n\n        // 标记是否正在等待请求返回\n        t.api.pending = FALSE;\n        t.api._requester = NULL;\n\n        // 取消响应\n        t.api.abort = function () {\n            if (t.api.pending && t.api._requester) {\n                t.api._requester.abort();\n            }\n        };\n\n        t.api.config = config;\n\n        t.initStorage();\n\n        // 启动插件\n        let plugins = isArray(config.plugins) ? config.plugins : [];\n        for (let i = 0, l = plugins.length; i<l; i++) {\n            isFunction(plugins[i]) && plugins[i].call(t, t);\n        }\n    }\n\n    makeVars(data) {\n        let t = this;\n        let config = t.config;\n\n        // 一次请求的私有相关数据\n        let vars = {\n            mark: {\n                _api: t._path\n            }\n        };\n\n        if (config.mock) {\n            vars.mark._mock = TRUE;\n        }\n\n        // if (config.urlStamp) {\n        //     vars.mark._stamp = +new Date();\n        // }\n\n        // `data`必须在请求发生时实时创建\n        // 如果postDataFormat是非FORM/JSON值时，不对data进行处理，因为这种情况下调用者意图直接向服务端传递RAW数据，\n        // 这时传入的data极有可能是字符串\n        // 当config.data是{}的情况下，如果调用者传入的data是字符串，经过extend()处理以后就会变成字符串数组\n        // 字符串数组被后续传递给xhr.send()时会被默认调用toString()，结果就变成'[object object]'这种不合法数据\n        if (config.postDataFormat === 'FORM' || config.postDataFormat === 'JSON')\n            data = extend({}, runAsFn(config.data), runAsFn(data));\n\n        // 将数据参数存在私有标记中, 方便API的`process`方法内部使用\n        vars.data = data;\n\n        return vars;\n    }\n\n    /**\n     * 处理API的配置\n     * @param options {Object}\n     */\n    processAPIOptions(options) {\n\n        let t = this;\n\n        // 插件是不能覆盖的, 应该追加\n        let plugins = [].concat(t.contextConfig.plugins || [], options.plugins || []);\n\n        let config = extend({}, t.contextConfig, options, {\n            plugins\n        });\n\n        if (config.mock) {\n            config.mockUrl = t.getFullUrl(config);\n        }\n\n        config.url = t.getFullUrl(config);\n\n        // 按照[boolean, callbackKeyWord, callbackFunctionName]格式处理\n        if (isArray(options.jsonp)) {\n            config.jsonp = isBoolean(options.jsonp[0]) ? options.jsonp[0] : FALSE;\n            // 这个参数只用于jsonp\n            if (config.jsonp) {\n                config.jsonpFlag = options.jsonp[1];\n                config.jsonpCallbackName = options.jsonp[2];\n            }\n        }\n\n        // 配置自动增强 如果`url`的值有`.jsonp`结尾 则认为是`jsonp`请求\n        // NOTE jsonp是描述正式接口的 不影响mock接口!!!\n        if (!config.mock && !!config.url.match(/\\.jsonp(\\?.*)?$/)) {\n            config.jsonp = TRUE;\n        }\n\n        return config;\n    }\n\n    initStorage() {\n        let t = this;\n        let config = t.config;\n\n        // 开启`storage`的前提条件\n        let storagePrecondition = config.method === 'GET' || config.jsonp;\n\n        // 不满足`storage`使用条件的情况下, 开启`storage`将抛出错误\n        if (!storagePrecondition && config.storage === TRUE) {\n            throw new Error('A `' + config.method + '` request CAN NOT use `storage` which is only for `GET/jsonp`' +\n                ' request! Please check the options for `' + t._path + '`');\n        }\n\n        // 简易开启缓存的写法\n        if (config.storage === TRUE) {\n            config.storage = {\n                type: 'variable'\n            };\n        }\n\n        // 决定什么情况下缓存可以开启\n        t.api.storageUseable = isPlainObject(config.storage)\n            && (config.method === 'GET' || config.jsonp)\n            && nattyStorage.support[config.storage.type];\n        // 创建缓存实例\n        if (t.api.storageUseable) {\n            // 当使用`localStorage`时, 强制指定`key`值。如果没指定, 抛错!\n            // 当使用`variable`或`sessionStorage`时, 如果没指定`key`, 则自动生成内部`key`\n            // !!!为什么在使用`localStorage`时必须指定`key`值???\n            // !!!因为当key发生变化时, `localStorage`很容易产生死数据, 必须强制开发者有意识的去维护`key`值\n            if (config.storage.type === 'localStorage') {\n                if (!config.storage.hasOwnProperty('key') || !config.storage.key) {\n                    throw new Error('`key` is required when `storage.type` is `localStorage`.');\n                }\n            } else {\n                config.storage.key = config.storage.key || [t.api.contextId, t._path].join('_');\n            }\n\n            // `key`和`tag`的选择原则:\n            // `key`只选用相对稳定的值, 减少因为`key`的改变而增加的残留缓存\n            // 经常变化的值用于`tag`, 如一个接口在开发过程中可能使用方式不一样, 会在`jsonp`和`get`之间切换。\n            t.api.storage = nattyStorage(extend({}, config.storage, {\n                async: TRUE,\n                tag: [\n                    config.storage.tag,\n                    config.jsonp ? 'jsonp' : config.method,\n                    config.url\n                ].join('_') // 使用者的`tag`和内部的`tag`, 要同时生效\n            }));\n        }\n    }\n\n    /**\n     * 请求数据(从storage或者从网络)\n     * @param vars {Object} 发送的数据\n     * @param config {Object} 已经处理完善的请求配置\n     * @returns {Object} defer对象\n     */\n    request(vars, config) {\n        let t = this;\n\n        if (t.api.storageUseable) {\n\n            // 只有GET和JSONP才会有storage生效\n            vars.queryString = isEmptyObject(vars.data) ? 'no-query-string' : JSON.stringify(sortPlainObjectKey(vars.data));\n\n            return t.api.storage.has(vars.queryString).then(function (data) {\n                // alert(JSON.stringify(data, null, 4) + JSON.stringify(sessionStorage, null, 4));\n                // console.warn('has cached: ', hasValue);\n                if (data.has) {\n                    return data.value;\n                } else {\n                    return t.remoteRequest(vars, config);\n                }\n            });\n        } else {\n            return t.remoteRequest(vars, config);\n        }\n    }\n\n    /**\n     * 获取正式接口的完整`url`\n     * @param config {Object}\n     */\n    getFullUrl(config) {\n        let url = config.mock ? config.mockUrl : config.url;\n        if (!url) return EMPTY;\n        let prefixKey = config.mock ? 'mockUrlPrefix' : 'urlPrefix';\n        let suffixKey = config.mock ? 'mockUrlSuffix' : 'urlSuffix';\n        let prefix = config[prefixKey] && !isAbsoluteUrl(url) && !isRelativeUrl(url) ? config[prefixKey] : EMPTY;\n        let suffix = config[suffixKey] ? config[suffixKey]: EMPTY;\n        return prefix + url + suffix;\n    }\n\n    /**\n     * 发起网络请求\n     * @param vars\n     * @param config\n     * @returns {Promise}\n     */\n    remoteRequest(vars, config) {\n        let t = this;\n\n        // 调用 willFetch 钩子\n        config.willFetch(vars, config, 'remote');\n\n        // 等待状态在此处开启 在相应的`requester`的`complete`回调中关闭\n        t.api.pending = TRUE;\n\n        let defer = new Defer(config.Promise);\n\n        // 创建请求实例requester\n        if (config.customRequest) {\n            // 使用已有的request方法\n            t.api._requester = config.customRequest(vars, config, defer);\n        } else if (config.jsonp) {\n            t.api._requester = t.sendJSONP(vars, config, defer);\n        } else {\n            t.api._requester = t.sendAjax(vars, config, defer);\n        }\n\n        // 超时处理\n        if (0 !== config.timeout) {\n            setTimeout(() => {\n                if (t.api.pending && t.api._requester) {\n                    // 取消请求\n                    t.api.abort();\n\n                    let error = {\n                        timeout: TRUE,\n                        message: 'Timeout By ' + config.timeout + 'ms.'\n                    };\n\n                    defer.reject(error);\n                    event.fire('g.reject', [error, config]);\n                    event.fire(t.api.contextId + '.reject', [error, config]);\n                }\n            }, config.timeout);\n        }\n\n        return defer.promise;\n    }\n\n    /**\n     * 重试功能的实现\n     * @param vars {Object} 发送的数据\n     * @param config\n     * @returns {Object} defer对象\n     */\n    tryRequest(vars, config) {\n        let t = this;\n\n        return new config.Promise(function (resolve, reject) {\n            let retryTime = 0;\n            let request = () => {\n                // 更新的重试次数\n                vars.mark._retryTime = retryTime;\n                t.request(vars, config).then((content) => {\n                    resolve(content);\n                    event.fire('g.resolve', [content, config], config);\n                    event.fire(t.api.contextId + '.resolve', [content, config], config);\n                }, (error) => {\n                    if (retryTime === config.retry) {\n                        reject(error);\n                    } else {\n                        retryTime++;\n                        request();\n                    }\n                });\n            };\n\n            request();\n        });\n    }\n\n    /**\n     * 处理结构化的响应数据\n     * @param config\n     * @param response\n     * @param defer\n     */\n    processResponse(vars, config, defer, response) {\n        let t = this;\n\n        // 调用 didFetch 钩子函数\n        config.didFetch(vars, config);\n\n        // 非标准格式数据的预处理\n        response = config.fit(response, vars);\n\n\n\n        if (response.success) {\n            // 数据处理\n            let content = config.process(response.content, vars);\n\n            let resolveDefer = function () {\n                defer.resolve(content);\n                event.fire('g.resolve', [content, config], config);\n                event.fire(t.api.contextId + '.resolve', [content, config], config);\n            }\n\n            if (t.api.storageUseable) {\n                t.api.storage.set(vars.queryString, content).then(function () {\n                    resolveDefer();\n                })['catch'](function () {\n                    resolveDefer();\n                });\n            } else {\n                resolveDefer();\n            }\n        } else {\n            let error = extend({\n                message: '`success` is false, ' + t._path\n            }, response.error);\n            // NOTE response是只读的对象!!!\n            defer.reject(error);\n            event.fire('g.reject', [error, config]);\n            event.fire(t.api.contextId + '.reject', [error, config]);\n        }\n    }\n\n    /**\n     * 发起Ajax请求\n     * @param config {Object} 请求配置\n     * @param defer {Object} defer对象\n     * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法\n     *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法\n     * @returns {Object} xhr对象实例\n     */\n    sendAjax(vars, config, defer) {\n        const t = this;\n        const url = config.mock ? config.mockUrl : config.url;\n\n        return ajax({\n            traditional: config.traditional,\n            urlStamp: config.urlStamp,\n            mark: vars.mark,\n            useMark: config.mark,\n            log: config.log,\n            url: url,\n            method: config.method,\n            data: vars.data,\n            header: config.header,\n            withCredentials: config.withCredentials,\n            // 强制约定json\n            accept: 'json',\n            success(response/*, xhr*/) {\n                t.processResponse(vars, config, defer, response);\n            },\n            error(status) {\n                // 如果跨域使用了自定义的header，且服务端没有配置允许对应的header，此处status为0，目前无法处理。\n                const error = {\n                    status,\n                    message: `Error(status ${status}) in request for ${vars.mark._api}(${url})`\n                };\n\n                defer.reject(error);\n                event.fire('g.reject', [error, config]);\n                event.fire(t.api.contextId + '.reject', [error, config]);\n            },\n            complete(/*status, xhr*/) {\n                if (vars.retryTime === undefined || vars.retryTime === config.retry) {\n                    //C.log('ajax complete');\n\n                    t.api.pending = FALSE;\n                    t.api._requester = NULL;\n                }\n                //console.log('__complete: pending:', config.pending, 'retryTime:', retryTime, Math.random());\n            },\n            postDataFormat: config.postDataFormat\n        });\n    }\n\n    /**\n     * 发起jsonp请求\n     * @param vars {Object} 一次请求相关的私有数据\n     * @param config {Object} 请求配置\n     * @param defer {Object} defer对象\n     * @param retryTime {undefined|Number} 如果没有重试 将是undefined值 见`createAPI`方法\n     *                                     如果有重试 将是重试的当前次数 见`tryRequest`方法\n     * @returns {Object} 带有abort方法的对象\n     */\n    sendJSONP(vars, config, defer) {\n        const t = this;\n        const url = config.mock ? config.mockUrl : config.url;\n        return jsonp({\n            traditional: config.traditional,\n            log: config.log,\n            mark: vars.mark,\n            useMark: config.mark,\n            url: url,\n            data: vars.data,\n            urlStamp: config.urlStamp,\n            flag: config.jsonpFlag,\n            callbackName: config.jsonpCallbackName,\n            success(response) {\n                t.processResponse(vars, config, defer, response);\n            },\n            error() {\n                let error = {\n                    message: `Not accessable JSONP in request for ${vars.mark._api}(${url})`\n                };\n\n                defer.reject(error);\n                event.fire('g.reject', [error, config]);\n                event.fire(t.api.contextId + '.reject', [error, config]);\n            },\n            complete() {\n                if (vars.retryTime === undefined || vars.retryTime === config.retry) {\n                    t.api.pending = FALSE;\n                    t.api._requester = NULL;\n                }\n            }\n        });\n    }\n}\n\n/**\n * 关键词\n *     语意化的\n *     优雅的\n *     功能增强的\n *     底层隔离的\n */\nconst context = (function () {\n    let count = 0;\n\n    return function(contextId, options) {\n\n        if (isString(contextId)) {\n            options = options || {};\n        } else {\n            options = contextId || {}\n            contextId = 'c' + count++;\n        }\n\n        let storage = nattyStorage({\n            type: 'variable',\n            key: contextId\n        });\n\n        let ctx = {};\n\n        ctx.api = storage.get();\n\n        ctx._contextId = contextId;\n\n        // 插件是不能覆盖的, 应该追加\n        let plugins = [].concat(runtimeGlobalConfig.plugins || [], options.plugins || []);\n\n        ctx._config = extend({}, runtimeGlobalConfig, options, {\n            plugins\n        });\n\n        /**\n         * 创建api\n         * @param namespace {String} optional\n         * @param APIs {Object} 该`namespace`下的`api`配置\n         */\n        ctx.create = function(namespace, APIs) {\n            let hasNamespace = arguments.length === 2 && isString(namespace);\n\n            if (!hasNamespace) {\n                APIs = namespace;\n            }\n\n            for (let path in APIs) {\n                storage.set(\n                    hasNamespace ? namespace + '.' + path : path,\n                    new API(\n                        hasNamespace ? namespace + '.' + path : path,\n                        runAsFn(APIs[path]),\n                        ctx._config,\n                        contextId\n                    ).api\n                );\n            }\n\n            ctx.api = storage.get();\n        }\n\n        // 绑定上下文事件\n        ctx.on = function(name, fn) {\n            if (!isFunction(fn)) return;\n            event.on(ctx._contextId + '.' + name, fn);\n            return ctx;\n        }\n\n        return ctx;\n    }\n})();\n\n/**\n * 简易接口\n * @param options\n */\nlet nattyFetch = {};\n\nnattyFetch.create = function (options) {\n    return new API('nattyFetch', runAsFn(options), defaultGlobalConfig, 'global').api;\n};\n\nextend(nattyFetch, {\n    onlyForModern: !__FALLBACK__,\n    version: '__VERSION__',\n    _util: util,\n    _event: event,\n    context,\n    ajax,\n    jsonp,\n\n    /**\n     * 执行全局配置\n     * @param options\n     */\n    setGlobal(options) {\n        runtimeGlobalConfig = extend({}, defaultGlobalConfig, options);\n        return this;\n    },\n\n    /**\n     * 获取全局配置\n     * @param property {String} optional\n     * @returns {*}\n     */\n    getGlobal(property) {\n        return property ? runtimeGlobalConfig[property] : runtimeGlobalConfig;\n    },\n\n    // 绑定全局事件\n    on(name, fn) {\n        if (!isFunction(fn)) return;\n        event.on('g.' + name, fn);\n        return this;\n    },\n\n    /**\n     * 插件名称空间\n     */\n    plugin: {\n        loop: pluginLoop,\n        soon: pluginSoon\n    }\n});\n\n// 内部直接将运行时的全局配置初始化到默认值\nnattyFetch.setGlobal(defaultGlobalConfig);\n\nexport default nattyFetch;"],"names":["noop","v","redo","fn","args","arguments","ret","i","l","length","makeRandom","floor","random","isAbsoluteUrl","url","match","absoluteUrlReg","isRelativeUrl","relativeUrlReg","isBoolean","BOOLEAN","isString","STRING","isFunction","FUNCTION","runAsFn","isNumber","isNaN","NUMBER","isObject","OBJECT","NULL","isWindow","window","isPlainObject","Object","getPrototypeOf","prototype","isEmptyObject","let","count","hasOwnProperty","isArray","toString","call","ARRAY_TYPE","isCrossDomain","requestA","doc","createElement","href","isIE","protocol","originA","hostname","port","_extend","receiver","supplier","deepCopy","FALSE","key","undefined","TRUE","concat","extend","likeArray","each","sortPlainObjectKey","obj","clone","keyArray","push","sort","serialize","params","traditional","scope","type","array","hash","value","OBJECT_TYPE","add","name","param","escape","join","replace","decodeParam","str","decodeURIComponent","appendQueryString","urlStamp","Date","queryString","indexOf","rename","PREFIX","ajax","options","defaultOptions","isCD","xhr","XMLHttpRequest","fallback","XDomainRequest","_completed","setEvents","open","method","useMark","mark","GET","data","withCredentials","setHeaders","sendData","pdf","postDataFormat","JSON","stringify","send","jsonp","script","callbackName","originComplete","complete","removeScript","win","success","flag","insertScript","abort","hasWindow","document","encodeURIComponent","UNDEFINED","EMPTY","dummyPromise","dummy","then","ActiveXObject","Math","location","const","Defer","Promise","t","this","promise","resolve","reject","_resolve","_reject","reason","on","off","fns","splice","fire","context","apply","hasEvent","SCRIPT","XML","JS0N","xhrTester","hasXDR","supportCORS","acceptToRequestHeader","*","json","xml","html","text","setRequestHeader","header","Accept","accept","contentType","completeFn","_aborted","onLoadFn","responseText","parse","e","console","warn","eval","responseXML","onErrorFn","error","status","abortFn","onload","onreadystatechange","readyState","onerror","originAbort","onprogress","ontimeout","log","IE8","navigator","userAgent","parentNode","removeChild","head","src","async","getElementsByTagName","insertBefore","firstChild","apiInstance","api","loop","resolveFn","rejectFn","duration","Error","loopTimer","stop","clearTimeout","looping","sleepAndRequest","setTimeout","config","soon","successFn","errorFn","ignoreSelfConcurrent","pending","overrideSelfConcurrent","_lastRequester","vars","makeVars","remoteRequest","content","fromStorage","storageUseable","storage","has","result","nattyStorage","defaultGlobalConfig","didFetch","fit","mock","mockUrl","mockUrlPrefix","mockUrlSuffix","process","retry","customRequest","timeout","urlPrefix","urlSuffix","willFetch","plugins","runtimeGlobalConfig","API","path","contextConfig","contextId","_path","processAPIOptions","_requester","request","tryRequest","initStorage","_api","_mock","getFullUrl","jsonpFlag","jsonpCallbackName","storagePrecondition","support","tag","prefixKey","suffixKey","prefix","suffix","defer","sendJSONP","sendAjax","message","event","retryTime","_retryTime","processResponse","response","resolveDefer","set","ctx","get","_contextId","_config","create","namespace","APIs","hasNamespace","nattyFetch","onlyForModern","version","_util","util","_event","setGlobal","getGlobal","property","plugin","pluginLoop","pluginSoon"],"mappings":"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"}
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _coBusboy = require('co-busboy');

var _coBusboy2 = _interopRequireDefault(_coBusboy);

var _devNull = require('dev-null');

var _devNull2 = _interopRequireDefault(_devNull);

var _spmLog = require('spm-log');

var _spmLog2 = _interopRequireDefault(_spmLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  name: 'upload',
  middleware: function middleware() {
    return _regenerator2.default.mark(function _callee(next) {
      var parts, part;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (this.request.is('multipart/*')) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return next;

            case 3:
              return _context.abrupt('return', _context.sent);

            case 4:
              parts = (0, _coBusboy2.default)(this);
              part = void 0;

              /* eslint-disable */

            case 6:
              _context.next = 8;
              return parts;

            case 8:
              if (!(part = _context.sent)) {
                _context.next = 12;
                break;
              }

              if (part.length) {
                // arrays are busboy fields
                _spmLog2.default.info('dora-plugin-upload', 'key: ' + part[0]);
                _spmLog2.default.info('dora-plugin-upload', 'value: ' + part[1]);
              } else {
                // otherwise, it's a stream
                _spmLog2.default.info('dora-plugin-upload', 'mocking file upload pipe');
                part.pipe((0, _devNull2.default)());
              }
              _context.next = 6;
              break;

            case 12:
              _spmLog2.default.info('dora-plugin-upload', 'done parsing the upload form!');
              this.status = 200;
              this.body = {
                'status': 'success',
                'url': '/example.file'
              };
              return _context.abrupt('return', null);

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    });
  }
};
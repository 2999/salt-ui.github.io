/**
 * SelectField Component for tingle
 * @author caoke.ck
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const Slot = require('@ali/tingle-slot');
const Icon = require('@ali/tingle-icon');
const Field = require('@ali/tingle-field');

class SelectField extends React.Component {

    constructor(props) {
        super(props);
        let t = this;
        let value = props.value;
        t.state = {
            value: [ value ],
            confirmedValue: [ value ]
        };
    }

    // 外部变更选中值
    componentWillReceiveProps(nextProps) {
        let t = this;
        let value = nextProps.value;
        t.setState({
            value: [ value ],
            confirmedValue: [ value ]
        });
    }

    handleClick() {
        let t = this;
        !t.props.readOnly && t.refs.slot.show();
    }

    handleChange(value) {
        this.setState({
            value: value
        });
    }

    handleConfirm(value) {
        this.props.onSelect(value[0]);
    }

    handleCancel() {
        let t = this;
        t.setState({
            value: t.state.confirmedValue
        });
    }

    render() {
        let t = this;
        return (
            <Field {...t.props} icon={{
                    className: Context.prefixClass('select-field-icon'),
                    name: 'angle-right',
                    width: 26,
                    height: 26,
                    onClick: t.handleClick.bind(t)
                }}
                className={classnames(Context.prefixClass('select-field'), {
                    [t.props.className]: !!t.props.className
                })}>
                <div onClick={t.handleClick.bind(t)}>
                    {!t.state.confirmedValue[0] ? <div className={Context.prefixClass('omit select-field-placeholder')}>{t.props.placeholder}</div> : ''}
                    <div className={Context.prefixClass('select-field-value FBH FBAC')}>
                        <span className={classnames(Context.prefixClass('FB1 omit'), {
                            [Context.prefixClass('select-field-readonly')]: !!t.props.readOnly
                        })}>{t.props.formatter(t.state.confirmedValue[0])}</span>
                    </div>
                </div>
                <Slot ref="slot" title={t.props.label} confirmText={t.props.confirmText} cancelText={t.props.cancelText} data={[ t.props.options ]} value={t.state.value} onChange={t.handleChange.bind(t)} onCancel={t.handleCancel.bind(t)} onConfirm={t.handleConfirm.bind(t)}/>
            </Field>
        );
    }
}

SelectField.defaultProps = {
    options: [],
    formatter: (value) => value ? value.text : '',
    onSelect: function() {},
    readOnly: false,
    placeholder: ''
};

// http://facebook.github.io/react/docs/reusable-components.html
SelectField.propTypes = {
    className: React.PropTypes.string,
    label: React.PropTypes.string.isRequired,
    options: React.PropTypes.array.isRequired,
    value: React.PropTypes.object,
    formatter: React.PropTypes.func,
    onSelect: React.PropTypes.func,
    readOnly: React.PropTypes.bool,
    placeholder: React.PropTypes.string
};

SelectField.displayName = "SelectField";

module.exports = SelectField;

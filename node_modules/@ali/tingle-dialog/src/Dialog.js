/**
 * Dialog Component for tingle
 * @author minjie,cm
 *
 * Copyright 2014-2016, Tingle Team, Alinw.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const i18nHelper = require('i18n-helper');
const lang = require('./i18n');
let ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
const { prefixClass } = Context;

const TYPES = ['alert', 'confirm'];

const EMPTY_FUNC = function () {
}

const i18n = (locale = 'zh_CN') => i18nHelper(lang[locale] || lang.zh_CN);

class Dialog extends React.Component {
    constructor(props) {
        super(props);
        let buttons = [{
            content: props.confirmText || i18n(props.locale)('ok'),
            callback: props.onConfirm || EMPTY_FUNC,
            primary: true
        }];

        if (this.props.type === TYPES[1]) {
            buttons = [{
                content: this.props.cancelText || i18n(props.locale)('cancel'),
                callback: this.props.onCancel || EMPTY_FUNC
            }, {
                content: this.props.confirmText || i18n(props.locale)('ok'),
                callback: this.props.onConfirm || EMPTY_FUNC,
                primary: true
            }];
        }

        this.state = {
            title: props.title,
            content: props.content, // 为快捷 API 提供的，Dialog React 方式使用，直接渲染 children
            buttons: buttons,
            show: props.show
        }
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            show: nextProps.show,
            title: nextProps.title
        })
    }

    _show(options) {
        let state = this.state;
        let prop = options ? options : this.props;

        state.show = true;
        state.title = prop.title;
        state.content = prop.content;
        state.buttons = prop.buttons;

        this.setState(state);
    }

    // deprecated
    hide() {
        this.setState({show: false});
    }

    // deprecated
    show() {
        this.setState({show: true});
    }

    handleClick(callback) {
        if (callback() !== false) {
            this.hide();
        }
    }

    render() {
        let t = this;
        let btn = '';
        let {className, children, ...other} = t.props;
        let {title, buttons, content} = t.state;
        let classSet = {
            [prefixClass('dialog')]: true,
            [t.props.className]: !!t.props.className
        };
        let btnsCount = buttons.length;

        btn = buttons && buttons.map(function (item, i) {
                let callback = item.callback || function () {
                        return true
                    };
                return (
                    <div key={'tDialogButtonKey' + i}
                         className={classnames(prefixClass('FB1 dialog-button TE'),
                        {
                            [prefixClass('dialog-primary')]: item.primary,
                            [prefixClass('dialog-secondary')]: !item.primary,
                            [prefixClass('dialog-brbl5')]: i === 0 || btnsCount === 1,
                            [prefixClass('dialog-brbr5')]: i === 1 || i === btnsCount - 1
                        })}
                         onClick={t.handleClick.bind(t, callback)}>
                        {i18n(t.props.locale)(item.content)}
                    </div>
                )
            });

        let displayContent = children;
        if (content) {
            displayContent = content;
        }

        return (
            <ReactCSSTransitionGroup
                transitionName={prefixClass('dialog-fade')}
                transitionEnterTimeout={300} transitionLeaveTimeout={300}
                transitionAppear={true} transitionAppearTimeout={300}>
                {
                    this.state.show ?
                        <div className={prefixClass('dialog-overlay')}>
                            <div className={prefixClass('dialog-overlay-inner')}>
                                <div className={classnames(classSet)}>
                                    {title ? <h1 className={prefixClass('dialog-title')}>{title}</h1> : ''}
                                    <div className={prefixClass('dialog-content')}>
                                        {displayContent}
                                    </div>
                                    <div className={prefixClass('dialog-operation TE FBH')}>{btn}</div>
                                </div>
                            </div>
                        </div>
                        : null
                }
            </ReactCSSTransitionGroup>
        );
    }
}

Dialog.defaultProps = {
    title: '',
    content: '',
    onConfirm: null,
    onCancel: null,
    type: 'alert',
    show: true,
    locale: 'zh_CN',
    buttons: [{
        content: 'ok',
        callback() {
        },
        primary: true
    }]
};

// http://facebook.github.io/react/docs/reusable-components.html
Dialog.propTypes = {
    title: React.PropTypes.string,
    content: React.PropTypes.string,
    onConfirm: React.PropTypes.func,
    onCancel: React.PropTypes.func,
    type: React.PropTypes.string,
    buttons: React.PropTypes.array,
    show: React.PropTypes.bool,
    locale: React.PropTypes.string,
};

var WRAPPER_ID = '__TingleGlobalDialog__';
var doc = document;

Dialog.global = null;

var show = function (options) {
    if (!Dialog.global) {
        var wrapper = doc.getElementById(WRAPPER_ID);
        var {...other} = options;

        if (!wrapper) {
            wrapper = doc.createElement('div');
            wrapper.id = WRAPPER_ID;
            doc.body.appendChild(wrapper);
        }

        Dialog.global = ReactDOM.render(<Dialog {...other}  />, wrapper)
    }
    ;
    Dialog.global._show(options);
}

Dialog.hide = function () {
    Dialog.global && Dialog.global.hide();
}

Dialog.alert = function (options) {
    options.buttons = [{
        content: options.confirmText || i18n(options.locale)('ok'),
        callback: options.onConfirm,
        primary: true
    }];
    show(options);
};

Dialog.confirm = function (options) {
    options.buttons = [{
        content: options.cancelText || i18n(options.locale)('cancel'),
        callback: options.onCancel
    }, {
        content: options.confirmText || i18n(options.locale)('ok'),
        callback: options.onConfirm,
        primary: true
    }];
    show(options);
};

Dialog.displayName = 'Dialog';

module.exports = Dialog;

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dialog Component for tingle
 * @author minjie,cm
 *
 * Copyright 2014-2016, Tingle Team, Alinw.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');
var Context = require('@ali/tingle-context');
var i18nHelper = require('i18n-helper');
var lang = require('./i18n');
var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
var prefixClass = Context.prefixClass;


var TYPES = ['alert', 'confirm'];

var EMPTY_FUNC = function EMPTY_FUNC() {};

var i18n = function i18n() {
    var locale = arguments.length <= 0 || arguments[0] === undefined ? 'zh_CN' : arguments[0];
    return i18nHelper(lang[locale] || lang.zh_CN);
};

var Dialog = function (_React$Component) {
    _inherits(Dialog, _React$Component);

    function Dialog(props) {
        _classCallCheck(this, Dialog);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dialog).call(this, props));

        var buttons = [{
            content: props.confirmText || i18n(props.locale)('ok'),
            callback: props.onConfirm || EMPTY_FUNC,
            primary: true
        }];

        if (_this.props.type === TYPES[1]) {
            buttons = [{
                content: _this.props.cancelText || i18n(props.locale)('cancel'),
                callback: _this.props.onCancel || EMPTY_FUNC
            }, {
                content: _this.props.confirmText || i18n(props.locale)('ok'),
                callback: _this.props.onConfirm || EMPTY_FUNC,
                primary: true
            }];
        }

        _this.state = {
            title: props.title,
            content: props.content, // 为快捷 API 提供的，Dialog React 方式使用，直接渲染 children
            buttons: buttons,
            show: props.show
        };
        return _this;
    }

    _createClass(Dialog, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                show: nextProps.show,
                title: nextProps.title
            });
        }
    }, {
        key: '_show',
        value: function _show(options) {
            var state = this.state;
            var prop = options ? options : this.props;

            state.show = true;
            state.title = prop.title;
            state.content = prop.content;
            state.buttons = prop.buttons;

            this.setState(state);
        }

        // deprecated

    }, {
        key: 'hide',
        value: function hide() {
            this.setState({ show: false });
        }

        // deprecated

    }, {
        key: 'show',
        value: function show() {
            this.setState({ show: true });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(callback) {
            if (callback() !== false) {
                this.hide();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _classSet;

            var t = this;
            var btn = '';
            var _t$props = t.props;
            var className = _t$props.className;
            var children = _t$props.children;

            var other = _objectWithoutProperties(_t$props, ['className', 'children']);

            var _t$state = t.state;
            var title = _t$state.title;
            var buttons = _t$state.buttons;
            var content = _t$state.content;

            var classSet = (_classSet = {}, _defineProperty(_classSet, prefixClass('dialog'), true), _defineProperty(_classSet, t.props.className, !!t.props.className), _classSet);
            var btnsCount = buttons.length;

            btn = buttons && buttons.map(function (item, i) {
                var _classnames;

                var callback = item.callback || function () {
                    return true;
                };
                return React.createElement(
                    'div',
                    { key: 'tDialogButtonKey' + i,
                        className: classnames(prefixClass('FB1 dialog-button TE'), (_classnames = {}, _defineProperty(_classnames, prefixClass('dialog-primary'), item.primary), _defineProperty(_classnames, prefixClass('dialog-secondary'), !item.primary), _defineProperty(_classnames, prefixClass('dialog-brbl5'), i === 0 || btnsCount === 1), _defineProperty(_classnames, prefixClass('dialog-brbr5'), i === 1 || i === btnsCount - 1), _classnames)),
                        onClick: t.handleClick.bind(t, callback) },
                    i18n(t.props.locale)(item.content)
                );
            });

            var displayContent = children;
            if (content) {
                displayContent = content;
            }

            return React.createElement(
                ReactCSSTransitionGroup,
                {
                    transitionName: prefixClass('dialog-fade'),
                    transitionEnterTimeout: 300, transitionLeaveTimeout: 300,
                    transitionAppear: true, transitionAppearTimeout: 300 },
                this.state.show ? React.createElement(
                    'div',
                    { className: prefixClass('dialog-overlay') },
                    React.createElement(
                        'div',
                        { className: prefixClass('dialog-overlay-inner') },
                        React.createElement(
                            'div',
                            { className: classnames(classSet) },
                            title ? React.createElement(
                                'h1',
                                { className: prefixClass('dialog-title') },
                                title
                            ) : '',
                            React.createElement(
                                'div',
                                { className: prefixClass('dialog-content') },
                                displayContent
                            ),
                            React.createElement(
                                'div',
                                { className: prefixClass('dialog-operation TE FBH') },
                                btn
                            )
                        )
                    )
                ) : null
            );
        }
    }]);

    return Dialog;
}(React.Component);

Dialog.defaultProps = {
    title: '',
    content: '',
    onConfirm: null,
    onCancel: null,
    type: 'alert',
    show: true,
    locale: 'zh_CN',
    buttons: [{
        content: 'ok',
        callback: function callback() {},

        primary: true
    }]
};

// http://facebook.github.io/react/docs/reusable-components.html
Dialog.propTypes = {
    title: React.PropTypes.string,
    content: React.PropTypes.string,
    onConfirm: React.PropTypes.func,
    onCancel: React.PropTypes.func,
    type: React.PropTypes.string,
    buttons: React.PropTypes.array,
    show: React.PropTypes.bool,
    locale: React.PropTypes.string
};

var WRAPPER_ID = '__TingleGlobalDialog__';
var doc = document;

Dialog.global = null;

var show = function show(options) {
    if (!Dialog.global) {
        var wrapper = doc.getElementById(WRAPPER_ID);

        var other = _objectWithoutProperties(options, []);

        if (!wrapper) {
            wrapper = doc.createElement('div');
            wrapper.id = WRAPPER_ID;
            doc.body.appendChild(wrapper);
        }

        Dialog.global = ReactDOM.render(React.createElement(Dialog, other), wrapper);
    }
    ;
    Dialog.global._show(options);
};

Dialog.hide = function () {
    Dialog.global && Dialog.global.hide();
};

Dialog.alert = function (options) {
    options.buttons = [{
        content: options.confirmText || i18n(options.locale)('ok'),
        callback: options.onConfirm,
        primary: true
    }];
    show(options);
};

Dialog.confirm = function (options) {
    options.buttons = [{
        content: options.cancelText || i18n(options.locale)('cancel'),
        callback: options.onCancel
    }, {
        content: options.confirmText || i18n(options.locale)('ok'),
        callback: options.onConfirm,
        primary: true
    }];
    show(options);
};

Dialog.displayName = 'Dialog';

module.exports = Dialog;
//# sourceMappingURL=data:application/json;base64,

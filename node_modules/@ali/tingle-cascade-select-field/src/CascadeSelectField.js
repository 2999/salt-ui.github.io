/**
 * CascadeSelectField Component for tingle
 * @author caoke.ck
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');

const Context = require('@ali/tingle-context');
const Slot = require('@ali/tingle-slot');
const Field = require('@ali/tingle-field');

class CascadeSelectField extends React.Component {

    constructor(props) {
        super(props);
        let t = this;

        // 数据格式化
        t.state = parseProps(props);
        t.state.confirmedValue = props.value ? t.state.value : [];
    }

    // 外部变更选中值
    componentWillReceiveProps(nextProps) {
        let t = this;
        t.setState(parseProps(nextProps));
    }

    handleClick() {
        let t = this;
        !t.props.readOnly && t.refs.slot.show();
    }

    handleChange(value) {
        let t = this;
        t.setState(parseState(value, t.props.options));
    }

    handleConfirm(value) {
        let t = this;

        // 确认选中项目
        t.props.onSelect(value);
    }

    handleCancel() {
        let t = this;
        if (t.state.confirmedValue.length) {
            t.setState(parseState(t.state.confirmedValue, t.props.options));
        }
    }

    render() {
        let t = this;
        return (
            <Field {...t.props} icon={t.props.readOnly ? null : {
                    className: Context.prefixClass('cascade-select-field-icon'),
                    name: 'angle-right',
                    width: 26,
                    height: 26,
                    onClick: t.handleClick.bind(t)
                }}
                className={classnames(Context.prefixClass('cascade-select-field'), {
                    [t.props.className]: !!t.props.className
                })}>
                <div onClick={t.handleClick.bind(t)}>
                    {!t.state.confirmedValue.length ? <div className={Context.prefixClass('omit cascade-select-field-placeholder')}>{t.props.placeholder}</div> : ''}
                    <div className={Context.prefixClass('cascade-select-field-value FBH FBAC')}>
                        <span className={classnames(Context.prefixClass('FB1 omit'), {
                            [Context.prefixClass('cascade-select-field-readonly')]: !!t.props.readOnly
                        })}>{t.props.formatter(t.state.confirmedValue)}</span>
                    </div>
                </div>
                <Slot ref="slot" title={t.props.label} confirmText={t.props.confirmText} cancelText={t.props.cancelText} data={t.state.options} value={t.state.value} onChange={t.handleChange.bind(t)} onCancel={t.handleCancel.bind(t)} onConfirm={t.handleConfirm.bind(t)} columns={t.props.columns}/>
            </Field>
        );
    }
}

CascadeSelectField.defaultProps = {
    options: [],
    value: [],
    formatter: (value) => value.map((v) => v.text).join('/'),
    onChange: () => {},
    onSelect: () => {},
    readOnly: false,
    placeholder: '',
    columns: []
}

// http://facebook.github.io/react/docs/reusable-components.html
CascadeSelectField.propTypes = {
    className: React.PropTypes.string,
    label: React.PropTypes.string.isRequired,
    options: React.PropTypes.array,
    value: React.PropTypes.array,
    formatter: React.PropTypes.func,
    onChange: React.PropTypes.func,
    onSelect: React.PropTypes.func,
    readOnly: React.PropTypes.bool,
    placeholder: React.PropTypes.string,
    confirmText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    columns: React.PropTypes.array
}

CascadeSelectField.displayName = 'CascadeSelectField';

module.exports = CascadeSelectField;

function parseProps(props) {
    props = JSON.parse(JSON.stringify(props));
    let { options, value } = props;
    let cursor = options;
    options = [];
    value = value || [];
    let confirmedValue = value.length ? value : [];
    for (let deep = 0; cursor && deep < props.columns.length; deep++) {
        let index = 0;
        options[deep] = cursor.map((o, i) => {
            let option = {
                value: o.value,
                text: o.label
            };
            let val = value[deep];
            if ((typeof val == 'object') && ('value' in value[deep])) {
                val = value[deep].value;
            }
            if (o.value == val) {
                index = i;
                value[deep] = option;
            }
            return option;
        });
        cursor = cursor[index] ? cursor[index].children : null;
    }
    return {
        options,
        value,
        confirmedValue
    };
}

function parseState(value, options) {
    let cursor = options;
    options = [];
    for (let deep = 0; cursor; deep++) {
        let index = 0;
        options[deep] = cursor.map((o, i) => {
            let option = {
                value: o.value,
                text: o.label
            };
            if ((deep in value) && o.value == value[deep].value) {
                index = i;
                value[deep] = option;
            }
            return option;
        });
        cursor = cursor[index] ? cursor[index].children : null;
    }
    return {
        options,
        value
    };
}

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TabBar Component for tingle
 * @author zhouwenjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var classnames = require('classnames');
var assign = require('object-assign');

var Context = require('@ali/tingle-context');

var _require = require('@ali/tingle-box'),
    Box = _require.Box;

var Icon = require('@ali/tingle-icon');

var isUrl = function isUrl(str) {
  return (/\/\/.+/g.test(str)
  );
};
var isArray = function isArray(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

var TabBarItemBadge = function (_React$Component) {
  _inherits(TabBarItemBadge, _React$Component);

  function TabBarItemBadge() {
    _classCallCheck(this, TabBarItemBadge);

    return _possibleConstructorReturn(this, (TabBarItemBadge.__proto__ || Object.getPrototypeOf(TabBarItemBadge)).apply(this, arguments));
  }

  _createClass(TabBarItemBadge, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          badge = _props.badge,
          badgeStyle = _props.badgeStyle;

      var badgeText = void 0;
      if (badge == null) {
        return null;
      }
      if (/^-?\d+(\.\d*)?|\.\d+$/.test(badge)) {
        badgeText = parseInt(badge, 10);
        if (badgeText > 99) {
          badgeText = '99+';
        }
      }
      return React.createElement(
        'span',
        { style: badgeStyle, className: classnames(Context.prefixClass('tab-bar-item-badge'), {
            'point': !badgeText
          }) },
        badgeText
      );
    }
  }]);

  return TabBarItemBadge;
}(React.Component);

TabBarItemBadge.displayName = 'TabBarItemBadge';
TabBarItemBadge.propTypes = {
  badge: React.PropTypes.oneOfType([React.PropTypes.bool, React.PropTypes.number, React.PropTypes.string]),
  badgeStyle: React.PropTypes.object
};

var TabBarItemIcon = function (_React$Component2) {
  _inherits(TabBarItemIcon, _React$Component2);

  function TabBarItemIcon() {
    _classCallCheck(this, TabBarItemIcon);

    return _possibleConstructorReturn(this, (TabBarItemIcon.__proto__ || Object.getPrototypeOf(TabBarItemIcon)).apply(this, arguments));
  }

  _createClass(TabBarItemIcon, [{
    key: 'getIcon',
    value: function getIcon() {
      var icon = this.props.icon;

      return isArray(icon) ? icon[0] : icon;
    }
  }, {
    key: 'getActiveIcon',
    value: function getActiveIcon() {
      var _props2 = this.props,
          icon = _props2.icon,
          activeIcon = _props2.activeIcon;

      if (activeIcon) {
        return activeIcon;
      }
      return isArray(icon) ? icon[1] : icon;
    }
  }, {
    key: 'renderImgIcon',
    value: function renderImgIcon(icon, title, style) {
      var className = Context.prefixClass('tab-bar-item-img-icon');
      return React.createElement('img', { className: className, style: style, src: icon, alt: title });
    }
  }, {
    key: 'renderTingleIcon',
    value: function renderTingleIcon(icon) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var className = Context.prefixClass('tab-bar-item-tingle-icon');
      return React.createElement(Icon, { width: 25, height: 25, className: className, style: style, name: icon });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          active = _props3.active,
          title = _props3.title,
          iconStyle = _props3.iconStyle,
          activeIconStyle = _props3.activeIconStyle,
          badge = _props3.badge,
          badgeStyle = _props3.badgeStyle;

      var currentIconStyle = assign({}, iconStyle, active ? activeIconStyle : {});
      var currentIcon = active ? this.getActiveIcon() : this.getIcon();
      if (!currentIcon) {
        return null;
      }
      var iconElem = void 0;
      if (isUrl(currentIcon)) {
        iconElem = this.renderImgIcon(currentIcon, title, currentIconStyle);
      } else {
        iconElem = this.renderTingleIcon(currentIcon, currentIconStyle);
      }
      return React.createElement(
        'div',
        { className: Context.prefixClass('tab-bar-item-icon') },
        React.createElement(TabBarItemBadge, { badge: badge, badgeStyle: badgeStyle }),
        iconElem
      );
    }
  }]);

  return TabBarItemIcon;
}(React.Component);

TabBarItemIcon.displayName = 'TabBarItemIcon';
TabBarItemIcon.propTypes = {
  active: React.PropTypes.bool,
  icon: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]),
  activeIcon: React.PropTypes.string,
  iconStyle: React.PropTypes.object,
  activeIconStyle: React.PropTypes.object
};

var TabBarItemTitle = function (_React$Component3) {
  _inherits(TabBarItemTitle, _React$Component3);

  function TabBarItemTitle() {
    _classCallCheck(this, TabBarItemTitle);

    return _possibleConstructorReturn(this, (TabBarItemTitle.__proto__ || Object.getPrototypeOf(TabBarItemTitle)).apply(this, arguments));
  }

  _createClass(TabBarItemTitle, [{
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          active = _props4.active,
          title = _props4.title,
          titleStyle = _props4.titleStyle,
          activeTitleStyle = _props4.activeTitleStyle;

      var currentTitleStyle = active ? activeTitleStyle : titleStyle;
      return React.createElement(
        'span',
        {
          className: Context.prefixClass('tab-bar-item-label'),
          style: currentTitleStyle },
        title
      );
    }
  }]);

  return TabBarItemTitle;
}(React.Component);

TabBarItemTitle.displayName = 'TabBarItemTitle';
TabBarItemTitle.propTypes = {
  active: React.PropTypes.bool,
  title: React.PropTypes.string,
  titleStyle: React.PropTypes.object,
  activeTitleStyle: React.PropTypes.object
};

var TabBarItem = function (_React$Component4) {
  _inherits(TabBarItem, _React$Component4);

  function TabBarItem() {
    _classCallCheck(this, TabBarItem);

    return _possibleConstructorReturn(this, (TabBarItem.__proto__ || Object.getPrototypeOf(TabBarItem)).apply(this, arguments));
  }

  _createClass(TabBarItem, [{
    key: 'render',
    value: function render() {
      var t = this;
      var item = t.props.item;
      var active = t.props.active;
      return React.createElement(
        Box,
        { className: classnames(Context.prefixClass('tab-bar-item'), {
            'active': active
          }), onClick: t.props.onClick, flex: 1
        },
        React.createElement(TabBarItemIcon, _extends({}, item.props, { active: active })),
        React.createElement(TabBarItemTitle, _extends({}, item.props, { active: active }))
      );
    }
  }]);

  return TabBarItem;
}(React.Component);

TabBarItem.displayName = 'TabBarItem';
TabBarItem.propTypes = {
  className: React.PropTypes.string,
  item: React.PropTypes.element,
  titleStyle: React.PropTypes.object,
  activeTitleStyle: React.PropTypes.object,
  iconStyle: React.PropTypes.object,
  activeIconStyle: React.PropTypes.object
};


module.exports = TabBarItem;
//# sourceMappingURL=data:application/json;base64,

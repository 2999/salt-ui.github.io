/**
 * TabBar Component for tingle
 * @author zhouwenjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const {HBox} = require('@ali/tingle-box');
const TabBarItem = require('./TabBarItem');

class TabBar extends React.Component {
  static displayName = 'TabBar';
  static propTypes = {
    className: React.PropTypes.string,
    activeIndex: React.PropTypes.number,
    onChange: React.PropTypes.func,
    tabBarStyle: React.PropTypes.object,
  };
  static defaultProps = {
    activeIndex: 0,
    onChange: ()=> {
    },
  };

  constructor(props) {
    super(props);
    this.state = {
      activeIndex: props.activeIndex,
    }
  }

  componentWillReceiveProps(nextProps) {
    let t = this;
    const nextActiveIndex = nextProps.activeIndex;
    if (nextActiveIndex !== t.state.activeIndex) {
      t.setActiveIndex(nextActiveIndex);
    }
  }

  onItemClick(index) {
    if (index !== this.state.activeIndex) {
      this.setActiveIndex(index);
    }
  }

  setActiveIndex(index) {
    const t = this;
    t.setState({
      activeIndex: index
    }, ()=> {
      t.props.onChange(index);
    });
  }

  renderItems() {
    const t = this;
    return (
      <HBox
        className={Context.prefixClass('tab-bar-items')}
        style={t.props.tabBarStyle}
        hAlign="center"
        vAlign="center"
      >
        {React.Children.map(t.props.children, (child, idx) => {
          if (!child) {
            return null;
          }
          return (
            <TabBarItem
              key={idx}
              item={child}
              active={idx===t.state.activeIndex}
              onClick={t.onItemClick.bind(t, idx)}
            />
          );
        })}
      </HBox>
    );
  }

  renderContents() {
    const t = this;
    const contents = React.Children.map(t.props.children, (child, idx) => {
      if (!child || !child.props.children) {
        return null;
      }
      const className = classnames(Context.prefixClass('tab-bar-content'), {
        'active': idx === t.state.activeIndex
      });
      return (
        <div key={idx} className={className}>{child.props && child.props.children}</div>
      );
    });
    const noContents = !contents || contents.every(content => content == null);
    if (noContents) {
      return null;
    }
    return <div className={Context.prefixClass('tab-bar-contents')}>
      {contents}
    </div>
  }

  render() {
    const t = this;
    const className = classnames(Context.prefixClass('tab-bar'), {
      [t.props.className]: !!t.props.className
    });
    return <div ref='root' className={className}>
      {t.renderContents()}
      {t.renderItems()}
    </div>;
  }
}
TabBar.Item = TabBarItem;

module.exports = TabBar;

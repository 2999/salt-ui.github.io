/**
 * TabBar Component for tingle
 * @author zhouwenjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const classnames = require('classnames');
const assign = require('object-assign');

const Context = require('@ali/tingle-context');
const {Box} = require('@ali/tingle-box');
const Icon = require('@ali/tingle-icon');

const isUrl = (str)=> {
  return /((\/\/)|^\.{0,2}\/).+/g.test(str);
};
const isArray = (obj) => {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

class TabBarItemBadge extends React.Component {
  static displayName = 'TabBarItemBadge';
  static propTypes = {
    badge: React.PropTypes.oneOfType([
      React.PropTypes.bool,
      React.PropTypes.number,
      React.PropTypes.string,
    ]),
    badgeStyle: React.PropTypes.object,
  };

  render() {
    const { badge, badgeStyle } = this.props;
    let badgeText;
    if (badge == null) {
      return null;
    }
    if (/^-?\d+(\.\d*)?|\.\d+$/.test(badge)) {
      badgeText = parseInt(badge, 10);
      if (badgeText > 99) {
        badgeText = '99+';
      }
    }
    return <span style={badgeStyle} className={classnames(Context.prefixClass('tab-bar-item-badge'), {
                'point': !badgeText
            })}>{badgeText}</span>
  }
}

class TabBarItemIcon extends React.Component {
  static displayName = 'TabBarItemIcon';
  static propTypes = {
    active: React.PropTypes.bool,
    icon: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.array,
    ]),
    activeIcon: React.PropTypes.string,
    iconStyle: React.PropTypes.object,
    activeIconStyle: React.PropTypes.object,
  };

  getIcon() {
    const { icon } = this.props;
    return isArray(icon) ? icon[0] : icon
  }

  getActiveIcon() {
    const { icon, activeIcon } = this.props;
    if (activeIcon) {
      return activeIcon;
    }
    return isArray(icon) ? icon[1] : icon;
  }

  renderImgIcon(icon, title, style) {
    const className = Context.prefixClass('tab-bar-item-img-icon');
    return <img className={className} style={style} src={icon} alt={title} />;
  }

  renderTingleIcon(icon, style = {}) {
    const className = Context.prefixClass('tab-bar-item-tingle-icon');
    return <Icon width={25} height={25} className={className} style={style} name={icon} />;
  }

  render() {
    const { active, title, iconStyle, activeIconStyle, badge, badgeStyle } = this.props;
    const currentIconStyle = assign({}, iconStyle, active ? activeIconStyle : {});
    const currentIcon = active ? this.getActiveIcon() : this.getIcon();
    if (!currentIcon) {
      return null;
    }
    let iconElem;
    if (isUrl(currentIcon)) {
      iconElem = this.renderImgIcon(currentIcon, title, currentIconStyle);
    } else {
      iconElem = this.renderTingleIcon(currentIcon, currentIconStyle);
    }
    return <div className={Context.prefixClass('tab-bar-item-icon')}>
      <TabBarItemBadge badge={badge} badgeStyle={badgeStyle} />
      {iconElem}
    </div>
  }
}

class TabBarItemTitle extends React.Component {
  static displayName = 'TabBarItemTitle';
  static propTypes = {
    active: React.PropTypes.bool,
    title: React.PropTypes.string,
    titleStyle: React.PropTypes.object,
    activeTitleStyle: React.PropTypes.object,
  };

  render() {
    const { active, title, titleStyle, activeTitleStyle } = this.props;
    const currentTitleStyle = active ? activeTitleStyle : titleStyle;
    return <span
      className={Context.prefixClass('tab-bar-item-label')}
      style={currentTitleStyle}>{title}</span>;
  }
}

class TabBarItem extends React.Component {
  static displayName = 'TabBarItem';
  static propTypes = {
    className: React.PropTypes.string,
    item: React.PropTypes.element,
    titleStyle: React.PropTypes.object,
    activeTitleStyle: React.PropTypes.object,
    iconStyle: React.PropTypes.object,
    activeIconStyle: React.PropTypes.object,
  };

  render() {
    const t = this;
    const item = t.props.item;
    const active = t.props.active;
    return (
      <Box className={classnames(Context.prefixClass('tab-bar-item'), {
                'active': active
            })} onClick={t.props.onClick} flex={1}
      >
        <TabBarItemIcon {...item.props} active={active} />
        <TabBarItemTitle {...item.props} active={active} />
      </Box>
    );
  }
}

module.exports = TabBarItem;

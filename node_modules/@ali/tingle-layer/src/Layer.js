/**
 * Layer Component, all model tips's base backbone
 * (Dialog, loading...) for tinglejs
 * @author gnosaij
 *
 * Copyright 2014-2016, Tingle Team, Alinw.
 * All rights reserved.
 */
/* eslint-disable */
const React = require('react');
const classnames = require('classnames');
let {prefixClass, noop} = require('@ali/tingle-context');
let Mask = require('@ali/tingle-mask');

class Layer extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            visible: props.visible
        };
    }

    componentWillReceiveProps(nextProps) {
        let t = this;
        let visible = nextProps.visible;
        if (visible === false && t.props.onWillHide() === false) {
            return;
        }
        this.setState({
            visible: nextProps.visible
        }, visible ? t.props.onDidShow : t.props.onDidHide);
    }

    getStyle() {
        let t = this;
        let visible = t.state.visible;
        let {fullScreen} = t.props;

        let hasWidth = 'width' in t.props;
        let hasHeight = 'height' in t.props;
        let hasTop = 'top' in t.props;
        let hasBottom = 'bottom' in t.props;
        let hasLeft = 'left' in t.props;
        let hasRight = 'right' in t.props;

        let style = {
            width: fullScreen || !hasWidth ? '100%' : t.props.width,
            height: fullScreen ? '100%' : hasHeight ? t.props.height : 'auto'
        };

        if (fullScreen) {
            style.top = 0;
            style.left = 0;
        } else {
            if (hasTop) {
                style.top = t.props.top;
            } else if (hasBottom) {
                style.bottom = t.props.bottom;
            } else {
                style.top = '50%';
                style['WebkitTransform'] = (style['WebkitTransform'] || '' ) + ' translateY(-50%)';
                style['transform'] = (style['transform'] || '') + ' translateY(-50%)';
            }

            if (hasLeft) {
                style.left = t.props.left;
            } else if (hasRight) {
                style.right = t.props.right;
            } else {
                style.left = '50%';
                style['WebkitTransform'] = (style['WebkitTransform'] || '') + ' translateX(-50%)';
                style['transform'] = (style['transform'] || '') + ' translateX(-50%)';
            }
        }

        style.zIndex =  t.props.zIndex;
        style.display = visible ? 'block' : 'none';

        return style;
    }

    handleMaskClick() {
        let t = this;

        // 如果禁止了点击Mask关闭Layer, 则Mask的onWillHide必须返回false
        if (t.props.maskCloseable === false || t.props.onWillHide() === false) {
            return false;
        }
        t.setState({
            visible: false
        }, function () {
            t.props.onDidHide();
        });
    }

    render() {
        let t = this;
        let {className, style, ...other} = t.props;
        return (
            <div>
                <div {...other} className={classnames(prefixClass('layer'), {
                    [className]: !!className
                })} style={t.getStyle()}>{t.props.children}</div>
                {
                    this.props.hasMask && <Mask zIndex={this.props.zIndex - 1} 
                        onWillHide={(t.props.onMaskClick || t.handleMaskClick).bind(t)}
                        closeable={true} visible={t.state.visible} opacity={0.6}/>
                }
            </div>
        );
    }
}

//zIndex no defalut value, we use auto generate way to handle it
Layer.defaultProps = {
    onDidShow: noop,
    onWillHide: noop,
    onDidHide: noop,
    maskOpacity: 0.6,
    maskCloseable: false,
    hasMask: true,
    visible: false,
    zIndex: 1000,
    fullScreen: false
};

// http://facebook.github.io/react/docs/reusable-components.html
Layer.propTypes = {
    onDidShow: React.PropTypes.func,
    onWillHide: React.PropTypes.func,
    onMaskClick: React.PropTypes.func,
    onDidHide: React.PropTypes.func,
    maskOpacity: React.PropTypes.number,
    maskCloseable: React.PropTypes.bool,
    hasMask: React.PropTypes.bool,
    visible: React.PropTypes.bool,
    zIndex: React.PropTypes.number,
    fullScreen: React.PropTypes.bool
    // more: top, left, bottom, right, width, height
};

Layer.displayName = "Layer";

module.exports = Layer;

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * List Component for tingle
 * @author muxin
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');
var Context = require('@ali/tingle-context');
var Icon = require('@ali/tingle-icon');
var Group = require('@ali/tingle-group');
var Boxs = require('@ali/tingle-box');
var HBox = Boxs.HBox;
var VBox = Boxs.VBox;
var Box = Boxs.Box;

var TOUCH_START = Context.TOUCH_START,
    TOUCH_MOVE = Context.TOUCH_MOVE,
    TOUCH_END = Context.TOUCH_END,
    TOUCH_CANCEL = Context.TOUCH_CANCEL,
    support3D = Context.support3D,
    supportTouch = Context.supportTouch,
    isPC = Context.isPC,
    noop = Context.noop,
    RESIZE = Context.RESIZE;


var doc = document;

// 获取兼容PC和Device的event对象的page属性
var getCursorPage = supportTouch ? function (event, page) {

    return event.targetTouches[0][page] || event.changedTouches[0][page];
} : function (event, page) {

    return event[page];
};

var List = function (_React$Component) {
    _inherits(List, _React$Component);

    function List(props) {
        _classCallCheck(this, List);

        var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

        var t = _this;
        var datas = t.props.data || [];

        if (datas.length) {

            datas.map(function (d, i) {

                d.keyIndex = "index" + i;
                d.listLeft = 0;
            });
        }

        _this.state = {
            data: datas,
            isCanMove: true, //当前能不能进行滑动
            startX: 0, //鼠标开始的X轴位置
            startY: 0, //鼠标开始的Y轴位置
            endX: 0, //鼠标释放的位置
            delateX: 0, //鼠标滑动的水平距离
            listLeft: 0,
            isMove: false
        };
        return _this;
    }

    _createClass(List, [{
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProp) {

            if (nextProp.data && nextProp.data.length) {

                nextProp.data.map(function (d, i) {

                    d.keyIndex = "index" + i;
                    d.listLeft = 0;
                });

                this.setState({
                    data: nextProp.data
                });
            }
        }
    }, {
        key: 'touchstartHandle',
        value: function touchstartHandle(e) {

            var t = this;
            var data = t.state.data;
            var id = e.currentTarget.id;
            var isCanMove = t.state.isCanMove;

            data.map(function (d, i) {

                if (d.keyIndex !== id && Math.abs(d.listLeft) > 0) {

                    isCanMove = false;
                }

                d.listLeft = 0;
            });

            // 只响应单指操作
            if (supportTouch && e.touches.length > 1) {

                return;
            }

            e.currentTarget.style.transitionDuration = '.05s';

            // 获取当前触点的X轴的偏移量
            var touchPageX = getCursorPage(e, 'pageX');
            var touchPageY = getCursorPage(e, 'pageY');

            t.setState({
                data: data,
                startX: touchPageX,
                startY: touchPageY,
                isCanMove: isCanMove
            });
        }
    }, {
        key: 'touchmoveHandle',
        value: function touchmoveHandle(e) {

            var t = this;
            var translateX = void 0;
            var data = t.state.data;
            var id = e.currentTarget.id;
            var isCanMove = t.state.isCanMove;
            var deltaX = void 0;
            var deltaY = void 0;

            // 只响应单指操作
            if (supportTouch && e.touches.length > 1) {

                return;
            }

            e.currentTarget.style.transitionDuration = '.1s';

            var touchPageX = getCursorPage(e, 'pageX');
            var touchPageY = getCursorPage(e, 'pageY');

            deltaX = touchPageX - t.state.startX;
            deltaY = touchPageY - t.state.startY;

            var change = Math.min(Math.max(-82, deltaX), 0);

            // 如果X轴的移动距离先达到5px并且Y轴的移动距离小于5px，则执行list的滑动
            // 如果Y轴的移动距离先达到5px，则执行浏览器默认的页面滚动
            if (Math.abs(deltaX) > 5 && Math.abs(deltaY) < 5) {

                data.map(function (d, i) {

                    if (d.keyIndex === id) {

                        if (isCanMove) {

                            d.listLeft = change;
                        } else {

                            d.listLeft = 0;
                            e.currentTarget.addEventListener('touchmove', function (event) {

                                event.preventDefault();
                            }, false);
                        }
                    }
                });

                e.preventDefault();
                e.stopPropagation();

                t.setState({
                    endX: touchPageX,
                    delateX: change,
                    listLeft: change,
                    data: data,
                    isCanMove: isCanMove
                });
            }
        }
    }, {
        key: 'touchendHandle',
        value: function touchendHandle(e) {

            var t = this;
            var left = void 0;
            var data = t.state.data;
            var isCanMove = t.state.isCanMove;
            var id = e.currentTarget.id;
            var new_left = 0;

            // 只响应单指操作
            if (supportTouch && e.touches.length > 1) {

                return;
            }

            e.currentTarget.style.transitionDuration = '.2s';

            data.map(function (d, i) {

                if (d.keyIndex === id) {

                    left = parseInt(d.listLeft);
                }
            });

            if (left < -5) {

                new_left = -82;
            } else if (left = 0) {

                new_left = 0;
            } else if (left > 5) {

                new_left = 82;
            }

            var arr = [];

            data.map(function (d, i) {

                if (d.keyIndex !== id) {

                    d.listLeft = 0;
                    isCanMove = true;
                } else {

                    d.listLeft = new_left;
                }
            });

            t.setState({
                listLeft: new_left,
                data: data,
                isCanMove: isCanMove
            });

            if (new_left < 0) {

                t.setState({
                    isMove: true
                });
            }
        }
    }, {
        key: 'delete',
        value: function _delete(dataItem, e) {

            var t = this;

            e.preventDefault();
            t.props.onDelete(e, dataItem);

            // let data = t.state.data;
            // let id = event.currentTarget.id;

            // data.map((d,i) => {

            //     if(d.keyIndex === id) {

            //         data.splice(i,1);
            //     }
            // })

            // t.setState({
            //     data : data
            // })
        }
    }, {
        key: 'prevent_default',
        value: function prevent_default(e) {

            e.preventDefault();
        }
    }, {
        key: 'clickHandle',
        value: function clickHandle(dataItem, e) {

            var t = this;

            if (t.state.isMove) {

                t.setState({
                    isMove: false
                });
            } else {

                t.props.onClick(e, dataItem);
            }
        }
    }, {
        key: 'clickPhotoHandle',
        value: function clickPhotoHandle(imgUrl, e) {

            var t = this;

            e.stopPropagation();
            t.props.clickPhoto(e, imgUrl);
        }
    }, {
        key: 'render',
        value: function render() {

            var t = this;
            var _t$props = t.props,
                className = _t$props.className,
                layout = _t$props.layout,
                isDelete = _t$props.isDelete,
                hasRightIcon = _t$props.hasRightIcon,
                iconName = _t$props.iconName,
                iconWidth = _t$props.iconWidth,
                demoTitle = _t$props.demoTitle;

            var data = t.state.data;
            var isCanMove = t.state.isCanMove;
            var list = null;
            var Events = {};

            if (isDelete) {

                Events = {
                    onTouchStart: t.touchstartHandle.bind(t),
                    onTouchMove: t.touchmoveHandle.bind(t),
                    onTouchEnd: t.touchendHandle.bind(t)
                };
            }

            if (data.length) {

                list = data.map(function (dataItem, index) {
                    return React.createElement(
                        'div',
                        { key: index },
                        React.createElement(
                            'div',
                            _extends({ className: Context.prefixClass('list-wrap')
                            }, Events, {
                                style: { left: dataItem.listLeft + 'px' },
                                id: dataItem.keyIndex,
                                onClick: t.clickHandle.bind(t, dataItem),
                                ref: 'listItemBox' }),
                            React.createElement(
                                HBox,
                                { vAlign: 'center' },
                                React.createElement(
                                    HBox,
                                    { flex: 1, className: classnames(_defineProperty({}, Context.prefixClass('list-img-right'), layout === 'right')) },
                                    dataItem.imgUrl && React.createElement(
                                        VBox,
                                        { vAlign: 'center', onClick: t.clickPhotoHandle.bind(t, dataItem.imgUrl) },
                                        React.createElement('img', { src: dataItem.imgUrl, className: Context.prefixClass('list-img') })
                                    ),
                                    React.createElement(
                                        Box,
                                        { className: Context.prefixClass('list-text-content'), flex: 1 },
                                        React.createElement(
                                            'p',
                                            { className: Context.prefixClass('list-title omit') },
                                            dataItem.title,
                                            dataItem.date && React.createElement(
                                                'span',
                                                { className: Context.prefixClass('list-title-date') },
                                                dataItem.date
                                            )
                                        ),
                                        dataItem.text && React.createElement(
                                            'p',
                                            { className: Context.prefixClass('list-text omit') },
                                            dataItem.text
                                        )
                                    )
                                ),
                                hasRightIcon && React.createElement(
                                    Box,
                                    null,
                                    React.createElement(Icon, { name: iconName, width: iconWidth, fill: '#ccc', className: Context.prefixClass('list-arrow') })
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: Context.prefixClass('list-behind') },
                            React.createElement(
                                'a',
                                { href: '#', className: Context.prefixClass('list-delete-btn'), id: dataItem.keyIndex, onClick: t.delete.bind(t, dataItem) },
                                React.createElement(
                                    'span',
                                    { className: Context.prefixClass('list-delete-btn-text') },
                                    '\u5220\u9664'
                                )
                            )
                        )
                    );
                });

                return React.createElement(
                    Group,
                    { className: classnames(Context.prefixClass('list'), _defineProperty({}, className, !!className)) },
                    React.createElement(
                        Group.Head,
                        { className: 't-demo-title' },
                        demoTitle
                    ),
                    React.createElement(
                        Group.List,
                        { lineIndent: 10 },
                        list
                    )
                );
            } else {
                return null;
            }
        }
    }]);

    return List;
}(React.Component);

List.defaultProps = {
    className: '',
    layout: 'left',
    hasRightIcon: true,
    iconName: 'angle-right',
    iconWidth: 20,
    data: [],
    isDelete: false,
    demoTitle: '',
    onClick: function onClick() {},
    clickPhoto: function clickPhoto() {},
    onDelete: function onDelete() {}
};

// http://facebook.github.io/react/docs/reusable-components.html
List.propTypes = {
    className: React.PropTypes.string,
    layout: React.PropTypes.string,
    iconName: React.PropTypes.string,
    iconWidth: React.PropTypes.number,
    data: React.PropTypes.array,
    hasRightIcon: React.PropTypes.bool,
    onClick: React.PropTypes.func,
    clickPhoto: React.PropTypes.func,
    onDelete: React.PropTypes.func
};

List.displayName = 'List';

module.exports = List;
//# sourceMappingURL=data:application/json;base64,

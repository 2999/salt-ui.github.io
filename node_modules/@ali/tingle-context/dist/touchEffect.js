"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Tingle Context
 * The environment for tingle's initialization
 * @author yize
 *
 * Copyright 2014-2015, Tingle Team, Alinw.
 * All rights reserved.
 */

var env = require('./env');
var TOUCH_START = env.TOUCH_START;
var TOUCH_END = env.TOUCH_END;
var TOUCH_CANCEL = env.TOUCH_CANCEL;

var TouchEffect = function () {
    /**
     *
     * @param layer
     * @param options
     */

    function TouchEffect(layer, options) {
        _classCallCheck(this, TouchEffect);

        var t = this;
        t.layer = layer;
        t.options = options || {
            selector: "tTE", // abbr. tTouchEffect
            activeClass: "hover"
        };
        t.selector = t.options.selector;
        t.activeClass = t.options.activeClass;
        t.initEvent();
    }

    _createClass(TouchEffect, [{
        key: "initEvent",
        value: function initEvent() {
            var t = this;
            var layer = t.layer;

            layer.addEventListener(TOUCH_START, t.onTouchStart.bind(t), false);
            layer.addEventListener(TOUCH_END, t.onTouchEnd.bind(t), false);
            layer.addEventListener(TOUCH_CANCEL, t.onTouchEnd.bind(t), false);
        }
    }, {
        key: "onTouchStart",
        value: function onTouchStart(event) {

            var t = this;
            var target = event.target;

            while (target && target.classList && !target.classList.contains(t.selector)) {
                target = target.parentNode;
            }

            if (target && target.classList && target.classList.contains(t.selector)) {
                target.classList.add(t.activeClass);
            }
        }
    }, {
        key: "onTouchEnd",
        value: function onTouchEnd(event) {

            var t = this;
            var target = event.target;

            while (target && target.classList && !target.classList.contains(t.selector)) {
                target = target.parentNode;
            }

            if (target && target.classList && target.classList.contains(t.selector)) {
                target.classList.remove(t.activeClass);
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            var t = this;
            var layer = t.layer;
            layer.removeEventListener(TOUCH_START, t.onTouchStart.bind(t), false);
            layer.removeEventListener(TOUCH_END, t.onTouchEnd.bind(t), false);
            layer.removeEventListener(TOUCH_CANCEL, t.onTouchEnd.bind(t), false);
        }
    }]);

    return TouchEffect;
}();

TouchEffect.attach = function (layer, options) {
    return new TouchEffect(layer, options);
};

module.exports = TouchEffect;
//# sourceMappingURL=data:application/json;base64,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QixLQUFoQixFQUF1QixPQUF2QixDQUFwQjtBQUFBLENBQXJCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixXQUFqQiIsImZpbGUiOiJ0b3VjaEVmZmVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGluZ2xlIENvbnRleHRcbiAqIFRoZSBlbnZpcm9ubWVudCBmb3IgdGluZ2xlJ3MgaW5pdGlhbGl6YXRpb25cbiAqIEBhdXRob3IgeWl6ZVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIFRpbmdsZSBUZWFtLCBBbGludy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuY29uc3QgZW52ID0gcmVxdWlyZSgnLi9lbnYnKTtcbmNvbnN0IHtUT1VDSF9TVEFSVCwgVE9VQ0hfRU5ELCBUT1VDSF9DQU5DRUx9ID0gZW52O1xuXG5jbGFzcyBUb3VjaEVmZmVjdCB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGF5ZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxheWVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgICB0LmxheWVyID0gbGF5ZXI7XG4gICAgICAgIHQub3B0aW9ucyA9IG9wdGlvbnMgfHwge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBcInRURVwiLCAvLyBhYmJyLiB0VG91Y2hFZmZlY3RcbiAgICAgICAgICAgICAgICBhY3RpdmVDbGFzczogXCJob3ZlclwiXG4gICAgICAgICAgICB9O1xuICAgICAgICB0LnNlbGVjdG9yID0gdC5vcHRpb25zLnNlbGVjdG9yO1xuICAgICAgICB0LmFjdGl2ZUNsYXNzID0gdC5vcHRpb25zLmFjdGl2ZUNsYXNzO1xuICAgICAgICB0LmluaXRFdmVudCgpXG4gICAgfVxuXG4gICAgaW5pdEV2ZW50KCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcztcbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0LmxheWVyO1xuXG4gICAgICAgIGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoVE9VQ0hfU1RBUlQsIHQub25Ub3VjaFN0YXJ0LmJpbmQodCksIGZhbHNlKTtcbiAgICAgICAgbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSF9FTkQsIHQub25Ub3VjaEVuZC5iaW5kKHQpLCBmYWxzZSk7XG4gICAgICAgIGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoVE9VQ0hfQ0FOQ0VMLCB0Lm9uVG91Y2hFbmQuYmluZCh0KSwgZmFsc2UpO1xuICAgIH1cblxuICAgIG9uVG91Y2hTdGFydChldmVudCkge1xuXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LmNsYXNzTGlzdCAmJiAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyh0LnNlbGVjdG9yKSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5jbGFzc0xpc3QgJiYgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyh0LnNlbGVjdG9yKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQodC5hY3RpdmVDbGFzcylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uVG91Y2hFbmQoZXZlbnQpIHtcblxuICAgICAgICBjb25zdCB0ID0gdGhpcztcbiAgICAgICAgbGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldC5jbGFzc0xpc3QgJiYgIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnModC5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuY2xhc3NMaXN0ICYmIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnModC5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKHQuYWN0aXZlQ2xhc3MpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcztcbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0LmxheWVyO1xuICAgICAgICBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFRPVUNIX1NUQVJULCB0Lm9uVG91Y2hTdGFydC5iaW5kKHQpLCBmYWxzZSk7XG4gICAgICAgIGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoVE9VQ0hfRU5ELCB0Lm9uVG91Y2hFbmQuYmluZCh0KSwgZmFsc2UpO1xuICAgICAgICBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFRPVUNIX0NBTkNFTCwgdC5vblRvdWNoRW5kLmJpbmQodCksIGZhbHNlKTtcbiAgICB9XG59XG5cblRvdWNoRWZmZWN0LmF0dGFjaCA9IChsYXllciwgb3B0aW9ucykgPT4gbmV3IFRvdWNoRWZmZWN0KGxheWVyLCBvcHRpb25zKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaEVmZmVjdDtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

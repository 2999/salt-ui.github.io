import React from 'react';
const classnames = require('classnames');

class PushLoader extends React.Component {

    static propTypes = {
        status: React.PropTypes.string, // nodata error loading default
        loadingTip: React.PropTypes.string,
        noDataTip: React.PropTypes.string,
        noMoreDataTip: React.PropTypes.string,
        pushLoadTip: React.PropTypes.string,
        errorTip: React.PropTypes.string,
    }

    static defaultProps = {
        onLoadMore: function() {}
    };

    constructor(props) {
        super(props);
        this.state = {
            status: ''
        };

        this.maybeVisible = this.maybeVisible.bind(this);
    }

    acceptIScrollInstance(iscroll) {
        if(this.iscroll && this.iscroll !== iscroll) {
            this.detachScrollEvents();
        }
        this.iScroll = iscroll;
        this.iScroll.on('scrollEnd', this.maybeVisible);
        this._iscrollAttached = true;
        setTimeout( () => {
            this.maybeVisible();
        });
    }

    detachScrollEvents() {
        if(this._iscrollAttached) {
            this.iscroll.off('scrollEnd', this.maybeVisible);
            this._iscrollAttached = false;
        }
    }

    // 检测处于是否处于屏幕可见区域
    detectVisible() {
        let root = this.refs.root;
        var scrollY = this.iScroll && this.iScroll.y || 0;
        let scrollHeight = this.iScroll && this.iScroll.wrapperHeight || 0;
        // console.log(scrollY, scrollHeight, root.parentNode.offsetHeight);
        // 处于可见区域
        return Math.abs(scrollY) + scrollHeight >= root.parentNode.offsetHeight - 20;
    }

    componentWillReceiveProps(nextProps) {
        if(this.props.status !== nextProps.status) {
            this.setState({
                status: nextProps.status
            });

            // 从加载中的状态退出来,也就是一屏数据加载完成后,检测一下
            if(this.props.status === 'loading' && (!nextProps.status || nextProps.status === 'default')) {
                this.maybeVisible();
            }
        }
    }

    componentDidMount() {
        // const me = this;
        // this.maybeVisible();
    }

    maybeVisible() {
        const me = this;
        const iscroll = me.iScroll;
        const root = me.refs.root;
        const pullLoaderHeight = 54;
        const scrollBottom = -(root.parentNode.offsetHeight - iscroll.wrapperHeight - pullLoaderHeight);

        if (me.props.showTip && iscroll.y < scrollBottom && scrollBottom <= 0) {
            if (iscroll.y < scrollBottom - 30) {
                if (me.state.status !== 'error' && me.state.status !== 'nodata') {
                    if (me.loading) {
                        return
                    }
                    me.loading = true;
                    me.props.onLoadMore( (nodata) => {
                        nodata && iscroll.scrollTo(0, scrollBottom);
                        me.loading = false;
                    });
                } else {
                    setTimeout( () => { //没有数据或出错信息显示0.5秒后复原
                        iscroll.scrollTo(0, scrollBottom > -pullLoaderHeight ? -pullLoaderHeight : scrollBottom);
                    }, 500);
                }
            } else { //往上推没有超过30px就直接复原
                iscroll.scrollTo(0, scrollBottom);
            }
        } 
    }

    componentWillUnmount() {
        if(this.iScroll) {
            this.iScroll.off('scrollEnd', this.maybeVisible);
        }
    }

    render() {
        const isDefault = this.state.status === 'default';
        const isLoading = this.state.status === 'loading';
        const isError = this.state.status === 'error';
        const isNoData = this.state.status === 'nodata';
        const isPullLoding = this.props.pullStatus === 'loading';

        let icon;
        let text = '';

        // 全部数据为空,则显示空图片
        if (this.props.dataGetted && !this.props.allData.length) {
            icon = <div className="empty-icon" style={{'backgroundImage': `url(${this.props.noDataImage})`}} />
            text = this.props.noDataTip;
        }

        if(isLoading) {
            icon = <span className="loading" />;
            text = this.props.loadingTip;
        }

        if(isError) {
            text = this.props.errorTip;
        }

        if(isNoData && this.props.allData.length && this.props.showTip) {
            text = this.props.noMoreDataTip;
        }

        if(isDefault && this.props.showTip) {
            text = this.props.pushLoadTip;
        }

        if (isPullLoding) {
            icon = null;
            text = null;
        }

        return (
            <div ref="root" className={classnames({
                'loading-container': true,
                'push-loader': true,
                'error': isError,
                'nodata': isNoData,
                'loading': isLoading
            })}>
                {icon}
                <span className="pushloader-text loading-word">{text}</span>
            </div>
        );
    }
}

export default PushLoader;

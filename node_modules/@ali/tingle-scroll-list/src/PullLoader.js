import React from 'react';
import ReactDOM from 'react-dom';
const classnames = require('classnames');

class PullLoader extends React.Component {

    static propTypes = {
        status: React.PropTypes.string, // nodata error loading default
        loadingTip: React.PropTypes.string,
    }

    static defaultProps = {
        onPullLoad: function() {}
    };

    constructor(props) {
        super(props);
        this.state = {
            status: 'default'
        };

        this.onScrollStart = this.onScrollStart.bind(this);
        this.onScrollEnd = this.onScrollEnd.bind(this);
    }

    acceptIScrollInstance(iscroll) {
        // reset if accept new iscroll instance
        if(this.iscroll && this.iscroll !== iscroll) {
            this.detachScrollEvents();
        }

        this.iscroll = iscroll;
        this.attachScrollEvents();
        this.resetPosition();
        this._iscrollAttached = true;
    }

    attachScrollEvents() {
        this.iscroll.on('scrollStart', this.onScrollStart);
        this.iscroll.on('scrollEnd', this.onScrollEnd);
    }

    detachScrollEvents() {
        if(this._iscrollAttached) {
            this.iscroll.off('scrollStart', this.onScrollStart);
            this.iscroll.off('scrollEnd', this.onScrollEnd);
            this._iscrollAttached = false;
        }
    }

    getOffsetHeight() {
        let element = ReactDOM.findDOMNode(this);
        let offsetHeight = element.offsetHeight;
        return offsetHeight;
    }

    resetPosition() {
        this.iscroll.scrollTo(0, this.getOffsetHeight() * -1, 0);
    }

    resetPositionIfNeeded() {
        // todo
        let iscroll = this.iscroll;
        let offsetHeight = this.getOffsetHeight();
        let y = iscroll.y;
        let offsetY = offsetHeight * -1;
        if(y > offsetY) {
            let isLoading = this.props.status === 'loading';
            if(!isLoading) {
                iscroll.scrollTo(0, offsetY);
            }
        }
    }

    onScrollStart() {
    }

    onScrollEnd() {
        let me = this;
        let iscroll = this.iscroll;
        const pullLoaderHeight = 54
        
        if (iscroll.y > -12 && iscroll.directionY === -1) {
            me.props.onPullLoad( () => {
                me.resetPosition();
            });
        } else if (iscroll.y > -pullLoaderHeight ) {
            me.resetPosition();
        }
    }

    shouldComponentUpdate(nextProps) {
        return this.props.status !== nextProps.status;
    }

    componentDidUpdate(prevProps) {
        if(this.props.status !== prevProps.status) {

            if(prevProps.status === 'loading') {
                this.resetPosition();
            } else if(this.props.status === 'loading') {
                this.iscroll.scrollTo(0, 0);
            }
        }
    }

    componentWillUnmount() {
        this.detachScrollEvents();
    }

    render() {
        const isLoading = this.props.status === 'loading';
        let icon;
        let text = this.props.pullLoadTip;
        if(isLoading) {
            icon = <span className="loading" />;
            text = this.props.loadingTip;
        }
        return (
            <div ref="root" className={classnames({
                'loading-container': true,
                'pull-loader': true,
            })}>
                {icon}
                <span ref="pullText" className="loading-word">{text}</span>
            </div>
        );
    }
}

export default PullLoader;

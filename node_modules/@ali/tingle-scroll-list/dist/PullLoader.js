'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');

var PullLoader = function (_React$Component) {
    _inherits(PullLoader, _React$Component);

    function PullLoader(props) {
        _classCallCheck(this, PullLoader);

        var _this = _possibleConstructorReturn(this, (PullLoader.__proto__ || Object.getPrototypeOf(PullLoader)).call(this, props));

        _this.state = {
            status: 'default'
        };

        _this.onScrollStart = _this.onScrollStart.bind(_this);
        _this.onScrollEnd = _this.onScrollEnd.bind(_this);
        return _this;
    }

    _createClass(PullLoader, [{
        key: 'acceptIScrollInstance',
        value: function acceptIScrollInstance(iscroll) {
            // reset if accept new iscroll instance
            if (this.iscroll && this.iscroll !== iscroll) {
                this.detachScrollEvents();
            }

            this.iscroll = iscroll;
            this.attachScrollEvents();
            this.resetPosition();
            this._iscrollAttached = true;
        }
    }, {
        key: 'attachScrollEvents',
        value: function attachScrollEvents() {
            this.iscroll.on('scrollStart', this.onScrollStart);
            this.iscroll.on('scrollEnd', this.onScrollEnd);
        }
    }, {
        key: 'detachScrollEvents',
        value: function detachScrollEvents() {
            if (this._iscrollAttached) {
                this.iscroll.off('scrollStart', this.onScrollStart);
                this.iscroll.off('scrollEnd', this.onScrollEnd);
                this._iscrollAttached = false;
            }
        }
    }, {
        key: 'getOffsetHeight',
        value: function getOffsetHeight() {
            var element = _reactDom2.default.findDOMNode(this);
            var offsetHeight = element.offsetHeight;
            return offsetHeight;
        }
    }, {
        key: 'resetPosition',
        value: function resetPosition() {
            this.iscroll.scrollTo(0, this.getOffsetHeight() * -1, 0);
        }
    }, {
        key: 'resetPositionIfNeeded',
        value: function resetPositionIfNeeded() {
            // todo
            var iscroll = this.iscroll;
            var offsetHeight = this.getOffsetHeight();
            var y = iscroll.y;
            var offsetY = offsetHeight * -1;
            if (y > offsetY) {
                var isLoading = this.props.status === 'loading';
                if (!isLoading) {
                    iscroll.scrollTo(0, offsetY);
                }
            }
        }
    }, {
        key: 'onScrollStart',
        value: function onScrollStart() {}
    }, {
        key: 'onScrollEnd',
        value: function onScrollEnd() {
            var me = this;
            var iscroll = this.iscroll;
            var pullLoaderHeight = 54;

            if (iscroll.y > -12 && iscroll.directionY === -1) {
                me.props.onPullLoad(function () {
                    me.resetPosition();
                });
            } else if (iscroll.y > -pullLoaderHeight) {
                me.resetPosition();
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            return this.props.status !== nextProps.status;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (this.props.status !== prevProps.status) {

                if (prevProps.status === 'loading') {
                    this.resetPosition();
                } else if (this.props.status === 'loading') {
                    this.iscroll.scrollTo(0, 0);
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.detachScrollEvents();
        }
    }, {
        key: 'render',
        value: function render() {
            var isLoading = this.props.status === 'loading';
            var icon = void 0;
            var text = this.props.pullLoadTip;
            if (isLoading) {
                icon = _react2.default.createElement('span', { className: 'loading' });
                text = this.props.loadingTip;
            }
            return _react2.default.createElement(
                'div',
                { ref: 'root', className: classnames({
                        'loading-container': true,
                        'pull-loader': true
                    }) },
                icon,
                _react2.default.createElement(
                    'span',
                    { ref: 'pullText', className: 'loading-word' },
                    text
                )
            );
        }
    }]);

    return PullLoader;
}(_react2.default.Component);

PullLoader.propTypes = {
    status: _react2.default.PropTypes.string, // nodata error loading default
    loadingTip: _react2.default.PropTypes.string
};
PullLoader.defaultProps = {
    onPullLoad: function onPullLoad() {}
};
exports.default = PullLoader;
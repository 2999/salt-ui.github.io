'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');

var PushLoader = function (_React$Component) {
    _inherits(PushLoader, _React$Component);

    function PushLoader(props) {
        _classCallCheck(this, PushLoader);

        var _this = _possibleConstructorReturn(this, (PushLoader.__proto__ || Object.getPrototypeOf(PushLoader)).call(this, props));

        _this.state = {
            status: ''
        };

        _this.maybeVisible = _this.maybeVisible.bind(_this);
        return _this;
    }

    _createClass(PushLoader, [{
        key: 'acceptIScrollInstance',
        value: function acceptIScrollInstance(iscroll) {
            var _this2 = this;

            if (this.iscroll && this.iscroll !== iscroll) {
                this.detachScrollEvents();
            }
            this.iScroll = iscroll;
            this.iScroll.on('scrollEnd', this.maybeVisible);
            this._iscrollAttached = true;
            setTimeout(function () {
                _this2.maybeVisible();
            });
        }
    }, {
        key: 'detachScrollEvents',
        value: function detachScrollEvents() {
            if (this._iscrollAttached) {
                this.iscroll.off('scrollEnd', this.maybeVisible);
                this._iscrollAttached = false;
            }
        }

        // 检测处于是否处于屏幕可见区域

    }, {
        key: 'detectVisible',
        value: function detectVisible() {
            var root = this.refs.root;
            var scrollY = this.iScroll && this.iScroll.y || 0;
            var scrollHeight = this.iScroll && this.iScroll.wrapperHeight || 0;
            // console.log(scrollY, scrollHeight, root.parentNode.offsetHeight);
            // 处于可见区域
            return Math.abs(scrollY) + scrollHeight >= root.parentNode.offsetHeight - 20;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.status !== nextProps.status) {
                this.setState({
                    status: nextProps.status
                });

                // 从加载中的状态退出来,也就是一屏数据加载完成后,检测一下
                if (this.props.status === 'loading' && (!nextProps.status || nextProps.status === 'default')) {
                    this.maybeVisible();
                }
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            // const me = this;
            // this.maybeVisible();
        }
    }, {
        key: 'maybeVisible',
        value: function maybeVisible() {
            var me = this;
            var iscroll = me.iScroll;
            var root = me.refs.root;
            var pullLoaderHeight = 54;
            var scrollBottom = -(root.parentNode.offsetHeight - iscroll.wrapperHeight - pullLoaderHeight);

            if (me.props.showTip && iscroll.y < scrollBottom && scrollBottom <= 0) {
                if (iscroll.y < scrollBottom - 30) {
                    if (me.state.status !== 'error' && me.state.status !== 'nodata') {
                        if (me.loading) {
                            return;
                        }
                        me.loading = true;
                        me.props.onLoadMore(function (nodata) {
                            nodata && iscroll.scrollTo(0, scrollBottom);
                            me.loading = false;
                        });
                    } else {
                        setTimeout(function () {
                            //没有数据或出错信息显示0.5秒后复原
                            iscroll.scrollTo(0, scrollBottom > -pullLoaderHeight ? -pullLoaderHeight : scrollBottom);
                        }, 500);
                    }
                } else {
                    //往上推没有超过30px就直接复原
                    iscroll.scrollTo(0, scrollBottom);
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.iScroll) {
                this.iScroll.off('scrollEnd', this.maybeVisible);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var isDefault = this.state.status === 'default';
            var isLoading = this.state.status === 'loading';
            var isError = this.state.status === 'error';
            var isNoData = this.state.status === 'nodata';
            var isPullLoding = this.props.pullStatus === 'loading';

            var icon = void 0;
            var text = '';

            // 全部数据为空,则显示空图片
            if (this.props.dataGetted && !this.props.allData.length) {
                icon = _react2.default.createElement('div', { className: 'empty-icon', style: { 'backgroundImage': 'url(' + this.props.noDataImage + ')' } });
                text = this.props.noDataTip;
            }

            if (isLoading) {
                icon = _react2.default.createElement('span', { className: 'loading' });
                text = this.props.loadingTip;
            }

            if (isError) {
                text = this.props.errorTip;
            }

            if (isNoData && this.props.allData.length && this.props.showTip) {
                text = this.props.noMoreDataTip;
            }

            if (isDefault && this.props.showTip) {
                text = this.props.pushLoadTip;
            }

            if (isPullLoding) {
                icon = null;
                text = null;
            }

            return _react2.default.createElement(
                'div',
                { ref: 'root', className: classnames({
                        'loading-container': true,
                        'push-loader': true,
                        'error': isError,
                        'nodata': isNoData,
                        'loading': isLoading
                    }) },
                icon,
                _react2.default.createElement(
                    'span',
                    { className: 'pushloader-text loading-word' },
                    text
                )
            );
        }
    }]);

    return PushLoader;
}(_react2.default.Component);

PushLoader.propTypes = {
    status: _react2.default.PropTypes.string, // nodata error loading default
    loadingTip: _react2.default.PropTypes.string,
    noDataTip: _react2.default.PropTypes.string,
    noMoreDataTip: _react2.default.PropTypes.string,
    pushLoadTip: _react2.default.PropTypes.string,
    errorTip: _react2.default.PropTypes.string
};
PushLoader.defaultProps = {
    onLoadMore: function onLoadMore() {}
};
exports.default = PushLoader;
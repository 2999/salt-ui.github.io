'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * css util for tingle
 * @author gnosaij
 *
 * Copyright 2014-2015, Tingle Team, Alinw.
 * All rights reserved.
 *
 * Usage:
 *     const {createStyleContext} = require('tingle-style');
 *     let componentStyle = createStyleContext('tGroupList');
 *
 *     // 添加样式
 *     componentStyle.add(`
 *         body{
 *             background-color: red;
 *         }
 *     `);
 *
 *     // 添加带有标识的样式，这样可以优化去重
 *     componentStyle.add('redBG', `
 *         body{
 *             background-color: red;
 *         }
 *     `);
 */
var doc = document;
var headEl = doc.getElementsByTagName('head')[0];

/**
 * 可使用`JS`动态插入样式的类
 */

var StyleContext = function () {
    /**
     * 构造函数
     * @param id {String} required 用于创建`style`元素的`id`标识，建议使用`componentName`作为`id`的值，避免全局冲突
     */

    function StyleContext(id) {
        _classCallCheck(this, StyleContext);

        var t = this;
        t.id = id;
        t.rules = [];
        t._createStyleEl();
    }

    _createClass(StyleContext, [{
        key: '_createStyleEl',
        value: function _createStyleEl() {
            var t = this;
            var el = doc.createElement('style');
            el.id = t.id + '-style';
            el.setAttribute('type', 'text/css');
            headEl.appendChild(el);
            t.el = el;
        }
    }, {
        key: '_addRule',
        value: function _addRule(rule) {
            this.el.appendChild(doc.createTextNode(rule));
        }

        /**
         * 外部接口 添加新的样式规则
         */

    }, {
        key: 'add',
        value: function add(ruleId, rule) {
            var t = this;
            if (rule === undefined) {
                rule = ruleId;
                t._addRule(t._clearRuleIndent(rule));
            } else if (ruleId && -1 === t.rules.indexOf(ruleId)) {
                t.rules.push(ruleId);
                t._addRule('/* ' + ruleId + ' */\n' + t._clearRuleIndent(rule));
            }
        }

        /**
         * 删除多余的缩进 更方便阅读
         */

    }, {
        key: '_clearRuleIndent',
        value: function _clearRuleIndent(rule) {
            // 为了取出正确的首行缩进数量 需要去掉第一行的换行
            rule = rule.replace(/^\n/, '');
            var whiteSpaceLength = rule.match(/^\s*/)[0].length;
            var firstLineIndentRegExp = new RegExp('^\\s{' + whiteSpaceLength + '}');
            var otherLinesIndentResExp = new RegExp('\\n\\s{' + whiteSpaceLength + '}', 'mg');
            //console.log(rule.match(otherLinesIndentResExp));
            // 删除多余的缩进
            rule = rule.replace(firstLineIndentRegExp, '').replace(otherLinesIndentResExp, '\n');

            return rule;
        }
    }]);

    return StyleContext;
}();

// 创建一个Component的样式上下文


var existedInstances = {};
var createStyleContext = function createStyleContext(contextId) {
    if (!contextId) {
        console.error('The param(`contextId`) is required for `createStyleContext`(tingle-style/util.js) method. ');
        return;
    }
    return existedInstances[contextId] || (existedInstances[contextId] = new StyleContext(contextId));
};

/**
 * 添加长度单位，默认单位是`px`
 * @param any {Number|String|*}
 * @returns {Number|String} 返回Number时一定是0 否则返回的都是带有单位的长度字符串值
 * @demo
 *      unitize(10)     // 10px
 *      unitize('10px') // 10px
 *      unitize('1rem') // 1rem
 *      unitize()       // 0
 */
var unitize = function unitize(any) {
    var ret = void 0;
    if (typeof any === 'number') {
        ret = '' + any + 'px';
    } else if (typeof any === 'string') {
        if (any.match(/^\d+$/)) {
            ret = any + 'px';
        } else {
            ret = any;
        }
    } else {
        ret = 0;
    }
    return ret;
};

module.exports = {
    createStyleContext: createStyleContext,
    unitize: unitize
};
//# sourceMappingURL=data:application/json;base64,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QUFDekIsY0FBTSxLQUFLLEdBQUwsR0FBVyxJQUFYLENBRG1CO0tBQTdCLE1BRU8sSUFBSSxPQUFPLEdBQVAsS0FBZSxRQUFmLEVBQXlCO0FBQ2hDLFlBQUksSUFBSSxLQUFKLENBQVUsT0FBVixDQUFKLEVBQXdCO0FBQ3BCLGtCQUFNLE1BQU0sSUFBTixDQURjO1NBQXhCLE1BRU87QUFDSCxrQkFBTSxHQUFOLENBREc7U0FGUDtLQURHLE1BTUE7QUFDSCxjQUFNLENBQU4sQ0FERztLQU5BO0FBU1AsV0FBTyxHQUFQLENBYm1CO0NBQVQ7O0FBZ0JkLE9BQU8sT0FBUCxHQUFpQjtBQUNiLDBDQURhO0FBRWIsb0JBRmE7Q0FBakIiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY3NzIHV0aWwgZm9yIHRpbmdsZVxuICogQGF1dGhvciBnbm9zYWlqXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgVGluZ2xlIFRlYW0sIEFsaW53LlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2FnZTpcbiAqICAgICBjb25zdCB7Y3JlYXRlU3R5bGVDb250ZXh0fSA9IHJlcXVpcmUoJ3RpbmdsZS1zdHlsZScpO1xuICogICAgIGxldCBjb21wb25lbnRTdHlsZSA9IGNyZWF0ZVN0eWxlQ29udGV4dCgndEdyb3VwTGlzdCcpO1xuICpcbiAqICAgICAvLyDmt7vliqDmoLflvI9cbiAqICAgICBjb21wb25lbnRTdHlsZS5hZGQoYFxuICogICAgICAgICBib2R5e1xuICogICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICogICAgICAgICB9XG4gKiAgICAgYCk7XG4gKlxuICogICAgIC8vIOa3u+WKoOW4puacieagh+ivhueahOagt+W8j++8jOi/meagt+WPr+S7peS8mOWMluWOu+mHjVxuICogICAgIGNvbXBvbmVudFN0eWxlLmFkZCgncmVkQkcnLCBgXG4gKiAgICAgICAgIGJvZHl7XG4gKiAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG4gKiAgICAgICAgIH1cbiAqICAgICBgKTtcbiAqL1xuY29uc3QgZG9jID0gZG9jdW1lbnQ7XG5jb25zdCBoZWFkRWwgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcblxuLyoqXG4gKiDlj6/kvb/nlKhgSlNg5Yqo5oCB5o+S5YWl5qC35byP55qE57G7XG4gKi9cbmNsYXNzIFN0eWxlQ29udGV4dCB7XG4gICAgLyoqXG4gICAgICog5p6E6YCg5Ye95pWwXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHJlcXVpcmVkIOeUqOS6juWIm+W7umBzdHlsZWDlhYPntKDnmoRgaWRg5qCH6K+G77yM5bu66K6u5L2/55SoYGNvbXBvbmVudE5hbWVg5L2c5Li6YGlkYOeahOWAvO+8jOmBv+WFjeWFqOWxgOWGsueqgVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgdC5pZCA9IGlkO1xuICAgICAgICB0LnJ1bGVzID0gW107XG4gICAgICAgIHQuX2NyZWF0ZVN0eWxlRWwoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlU3R5bGVFbCgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBsZXQgZWwgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgZWwuaWQgPSB0LmlkICsgJy1zdHlsZSc7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgICAgICBoZWFkRWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB0LmVsID0gZWw7XG4gICAgfVxuXG4gICAgX2FkZFJ1bGUocnVsZSkge1xuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShydWxlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5aSW6YOo5o6l5Y+jIOa3u+WKoOaWsOeahOagt+W8j+inhOWImVxuICAgICAqL1xuICAgIGFkZChydWxlSWQsIHJ1bGUpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBpZiAocnVsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBydWxlID0gcnVsZUlkO1xuICAgICAgICAgICAgdC5fYWRkUnVsZSh0Ll9jbGVhclJ1bGVJbmRlbnQocnVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHJ1bGVJZCAmJiAtMSA9PT0gdC5ydWxlcy5pbmRleE9mKHJ1bGVJZCkpIHtcbiAgICAgICAgICAgIHQucnVsZXMucHVzaChydWxlSWQpO1xuICAgICAgICAgICAgdC5fYWRkUnVsZSgnLyogJyArIHJ1bGVJZCArICcgKi9cXG4nICsgdC5fY2xlYXJSdWxlSW5kZW50KHJ1bGUpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWIoOmZpOWkmuS9meeahOe8qei/myDmm7Tmlrnkvr/pmIXor7tcbiAgICAgKi9cbiAgICBfY2xlYXJSdWxlSW5kZW50KHJ1bGUpIHtcbiAgICAgICAgLy8g5Li65LqG5Y+W5Ye65q2j56Gu55qE6aaW6KGM57yp6L+b5pWw6YePIOmcgOimgeWOu+aOieesrOS4gOihjOeahOaNouihjFxuICAgICAgICBydWxlID0gcnVsZS5yZXBsYWNlKC9eXFxuLywgJycpO1xuICAgICAgICBsZXQgd2hpdGVTcGFjZUxlbmd0aCA9IHJ1bGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuICAgICAgICBsZXQgZmlyc3RMaW5lSW5kZW50UmVnRXhwID0gbmV3IFJlZ0V4cCgnXlxcXFxzeycgKyB3aGl0ZVNwYWNlTGVuZ3RoICsgJ30nKTtcbiAgICAgICAgbGV0IG90aGVyTGluZXNJbmRlbnRSZXNFeHAgPSBuZXcgUmVnRXhwKCdcXFxcblxcXFxzeycgKyB3aGl0ZVNwYWNlTGVuZ3RoICsgJ30nLCAnbWcnKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhydWxlLm1hdGNoKG90aGVyTGluZXNJbmRlbnRSZXNFeHApKTtcbiAgICAgICAgLy8g5Yig6Zmk5aSa5L2Z55qE57yp6L+bXG4gICAgICAgIHJ1bGUgPSBydWxlLnJlcGxhY2UoZmlyc3RMaW5lSW5kZW50UmVnRXhwLCAnJykucmVwbGFjZShvdGhlckxpbmVzSW5kZW50UmVzRXhwLCAnXFxuJyk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxufVxuXG4vLyDliJvlu7rkuIDkuKpDb21wb25lbnTnmoTmoLflvI/kuIrkuIvmlodcbmxldCBleGlzdGVkSW5zdGFuY2VzID0ge307XG5sZXQgY3JlYXRlU3R5bGVDb250ZXh0ID0gKGNvbnRleHRJZCkgPT4ge1xuICAgIGlmICghY29udGV4dElkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBwYXJhbShgY29udGV4dElkYCkgaXMgcmVxdWlyZWQgZm9yIGBjcmVhdGVTdHlsZUNvbnRleHRgKHRpbmdsZS1zdHlsZS91dGlsLmpzKSBtZXRob2QuICcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBleGlzdGVkSW5zdGFuY2VzW2NvbnRleHRJZF0gfHwgKGV4aXN0ZWRJbnN0YW5jZXNbY29udGV4dElkXSA9IG5ldyBTdHlsZUNvbnRleHQoY29udGV4dElkKSk7XG59O1xuXG4vKipcbiAqIOa3u+WKoOmVv+W6puWNleS9je+8jOm7mOiupOWNleS9jeaYr2BweGBcbiAqIEBwYXJhbSBhbnkge051bWJlcnxTdHJpbmd8Kn1cbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfSDov5Tlm55OdW1iZXLml7bkuIDlrprmmK8wIOWQpuWImei/lOWbnueahOmDveaYr+W4puacieWNleS9jeeahOmVv+W6puWtl+espuS4suWAvFxuICogQGRlbW9cbiAqICAgICAgdW5pdGl6ZSgxMCkgICAgIC8vIDEwcHhcbiAqICAgICAgdW5pdGl6ZSgnMTBweCcpIC8vIDEwcHhcbiAqICAgICAgdW5pdGl6ZSgnMXJlbScpIC8vIDFyZW1cbiAqICAgICAgdW5pdGl6ZSgpICAgICAgIC8vIDBcbiAqL1xubGV0IHVuaXRpemUgPSAoYW55KSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAodHlwZW9mIGFueSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0ID0gJycgKyBhbnkgKyAncHgnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFueSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGFueS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgICAgICAgIHJldCA9IGFueSArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXQgPSBhbnk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY3JlYXRlU3R5bGVDb250ZXh0LFxuICAgIHVuaXRpemVcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
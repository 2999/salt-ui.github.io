/**
 * TabBar Component for tingle
 * @author zhouwenjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
import React from 'react';
import classnames from 'classnames';
import Context from '@ali/tingle-context';
import {HBox} from '@ali/tingle-box';
import TabBarItem from './TabBarItem';

class TabBar extends React.Component {
    static displayName = 'TabBar';
    static defaultProps = {
        activeIndex: 0,
        onChange: ()=> {
        },
    };
    static propTypes = {
        className: React.PropTypes.string,
        activeIndex: React.PropTypes.number,
        onChange: React.PropTypes.func,
    };

    constructor(props) {
        super(props);
        this.state = {
            activeIndex: props.activeIndex,
        }
    }

    componentWillReceiveProps(nextProps) {
        let t = this;
        const nextActiveIndex = nextProps.activeIndex;
        if (nextActiveIndex !== t.state.activeIndex) {
            t.setActiveIndex(nextActiveIndex);
        }
    }

    onItemClick(index) {
        if (index !== this.state.activeIndex) {
            this.setActiveIndex(index);
        }
    }

    setActiveIndex(index) {
        const t = this;
        t.setState({
            activeIndex: index
        }, ()=> {
            t.props.onChange(index);
        });
    }

    renderItems() {
        const t = this;
        return (
            <HBox
                className={Context.prefixClass('tab-bar-items')}
                hAlign="center"
                vAlign="center"
            >
                {React.Children.map(t.props.children, (child, idx) => {
                    if (!child) {
                        return null;
                    }
                    return (
                        <TabBarItem
                            key={idx}
                            item={child}
                            active={idx===t.state.activeIndex}
                            onClick={t.onItemClick.bind(t, idx)}
                        />
                    );
                })}
            </HBox>
        );
    }

    renderContents() {
        let t = this;
        return <div className={Context.prefixClass('tab-bar-contents')}>
            {React.Children.map(t.props.children, (child, idx) => {
                if (!child) {
                    return null;
                }
                return (
                    <div key={idx} className={classnames(Context.prefixClass('tab-bar-content'), {
                    'active': idx === t.state.activeIndex
                })}>{child.props && child.props.children}</div>
                )
            })}
        </div>
    }

    render() {
        let t = this;
        return <div ref='root' className={classnames(Context.prefixClass('tab-bar'), {
            [t.props.className]: !!t.props.className
        })}>
            {t.renderContents()}
            {t.renderItems()}
        </div>;
    }
}
TabBar.Item = TabBarItem;

export default TabBar;

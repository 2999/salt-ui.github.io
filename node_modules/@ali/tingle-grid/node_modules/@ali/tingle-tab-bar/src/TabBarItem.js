/**
 * TabBar Component for tingle
 * @author zhouwenjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
import classnames from 'classnames';
import Context from '@ali/tingle-context';
import {Box} from '@ali/tingle-box';
import Icon from '@ali/tingle-icon';

const isUrl = (str)=> {
    return /\/\/.+/g.test(str);
};
const isArray = (obj) => {
    return Object.prototype.toString.call(obj) === '[object Array]';
};

export default class TabBarItem extends React.Component {
    static displayName = 'TabBarItem';
    static defaultProps = {};
    static propTypes = {
        className: React.PropTypes.string,
        item: React.PropTypes.element,
    };

    constructor(props) {
        super(props);
    }

    renderImgIcon(src, title) {
        const className = Context.prefixClass('tab-bar-item-img-icon');
        return <img className={className} src={src} alt={title}/>;
    }

    renderTingleIcon(name) {
        const className = Context.prefixClass('tab-bar-item-icon');
        return <Icon width={25} height={25} className={className} name={name}/>
    }

    renderIcon(icon, title, active) {
        if (typeof icon === 'string') {
            if (isUrl(icon)) {
                return this.renderImgIcon(icon, title);
            }
            return this.renderTingleIcon(icon);
        }

        if (isArray(icon)) {
            return this.renderImgIcon(active ? icon[1] : icon[0], title);
        }
        return null;
    }

    render() {
        const t = this;
        const item = t.props.item;
        const {title, icon} = item.props;
        const active = t.props.active;
        return (
            <Box className={classnames(Context.prefixClass('tab-bar-item'), {
                'active': active
            })} onClick={t.props.onClick} flex={1}
            >
                {t.renderIcon(icon, title, active)}
                <span className={Context.prefixClass('tab-bar-item-label')}>{title}</span>
            </Box>
        );
    }
}

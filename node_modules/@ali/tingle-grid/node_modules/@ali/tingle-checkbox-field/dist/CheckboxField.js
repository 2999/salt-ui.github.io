'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CheckboxField Component for tingle
 * @author shanchao
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');
var Icon = require('@ali/tingle-icon');
var Context = require('@ali/tingle-context');
var Group = require('@ali/tingle-group');

var prefixClass = Context.prefixClass;

var CheckboxField = function (_React$Component) {
    _inherits(CheckboxField, _React$Component);

    function CheckboxField(props) {
        _classCallCheck(this, CheckboxField);

        return _possibleConstructorReturn(this, (CheckboxField.__proto__ || Object.getPrototypeOf(CheckboxField)).call(this, props));
    }

    _createClass(CheckboxField, [{
        key: 'clickAction',
        value: function clickAction(value, item, index, data) {
            var t = this;
            var onChange = t.props.onChange;

            var disable = item.disable;
            if (disable) {
                return;
            }
            item.checked = !item.checked;
            onChange && onChange(value, index, data);
            t.forceUpdate();
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;
            var props = t.props;
            var className = props.className;
            var checkboxArray = props.data;
            var groupListArgument = props.groupListArgument;
            var groupListFlag = props.groupListFlag;
            var label = props.label;

            var requiredTag = React.createElement(Icon, { name: 'field-required', className: prefixClass('field-layout-label-required'), width: 6, height: 6, fill: 'red' });

            var checkboxArrayComponent = checkboxArray.map(function (item, index, data) {
                var checked = item.checked;
                var disable = item.disable;
                var value = item.value;


                var iconName = checked ? "check-round" : "";
                var iconClassName = classnames(prefixClass("checkbox-field-icon"), { "checked": checked }, { "noChecked": !checked }, { "disable": disable });

                var textClassName = classnames(prefixClass("checkbox-field-text FBH FBAC"), { "disable": disable });

                var iconTag = checked ? React.createElement(Icon, { key: 'check-round', width: 22, height: 22, name: 'check-round', className: iconClassName }) : React.createElement('div', { className: iconClassName });

                var finalItemJSX = React.createElement(
                    'div',
                    { onClick: t.clickAction.bind(t, value, item, index, checkboxArray), key: index,
                        className: prefixClass("checkbox-field-row FBAC FBH") },
                    React.createElement(
                        'div',
                        { className: prefixClass("checkbox-field-icon-div FBH FBAC") },
                        iconTag
                    ),
                    React.createElement(
                        'div',
                        { ref: "text" + index, className: textClassName },
                        item.text
                    )
                );
                return finalItemJSX;
            });

            var finalJSX = React.createElement(
                Group,
                { className: classnames(prefixClass('checkbox-field'), _defineProperty({}, className, !!className)) },
                label == '' ? null : React.createElement(
                    Group.Head,
                    { className: classnames(prefixClass('checkbox-label')) },
                    label,
                    this.props.required && requiredTag
                ),
                React.createElement(
                    Group.List,
                    groupListArgument,
                    checkboxArrayComponent
                )
            );

            if (!groupListFlag) {
                finalJSX = React.createElement(
                    'div',
                    { ref: 'root', className: classnames(prefixClass('checkbox-field'), _defineProperty({}, className, !!className)) },
                    checkboxArrayComponent
                );
            }
            return finalJSX;
        }
    }, {
        key: 'getData',
        value: function getData() {
            var t = this;
            return t.props.data;
        }
    }]);

    return CheckboxField;
}(React.Component);

CheckboxField.defaultProps = {
    data: [],
    onChange: function onChange() {},
    groupListFlag: true,
    groupListArgument: {
        lineIndent: 0,
        itemIndent: 15
    },
    label: ''
};

// http://facebook.github.io/react/docs/reusable-components.html
CheckboxField.propTypes = {
    className: React.PropTypes.string,
    data: React.PropTypes.array,
    onChange: React.PropTypes.func,
    groupListFlag: React.PropTypes.bool,
    groupListArgument: React.PropTypes.object
};

CheckboxField.displayName = 'CheckboxField';

module.exports = CheckboxField;
//# sourceMappingURL=data:application/json;base64,

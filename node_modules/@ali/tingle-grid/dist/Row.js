'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var Context = require('@ali/tingle-context');

var _require = require('@ali/tingle-box');

var VBox = _require.VBox;


var prefixClass = Context.prefixClass;

var Row = function (_React$Component) {
    _inherits(Row, _React$Component);

    function Row(props) {
        _classCallCheck(this, Row);

        return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));
    }

    // 根据`col`的设置，补充空的`item`


    _createClass(Row, [{
        key: 'fillEmptyItem',
        value: function fillEmptyItem(n) {
            if (n === 0) {
                return null;
            }

            var t = this;
            var ret = [];

            while (n-- > 0) {
                ret.push(React.createElement(VBox, { flex: 1, hAlign: t.props.itemHAlign, vAlign: t.props.itemVAlign, className: prefixClass('grid-item'),
                    style: t.props.square ? { height: '' + 10 / t.props.col + 'rem' } : {} }));
            }
            return React.Children.toArray(ret);
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;
            var toFilledItemNumber = t.props.col - React.Children.count(t.props.children);

            return React.createElement(
                'div',
                { className: prefixClass('grid-row') + ' ' + prefixClass('FBH') },
                React.Children.map(t.props.children, function (child, i) {
                    return React.createElement(
                        VBox,
                        { flex: 1, hAlign: t.props.itemHAlign, vAlign: t.props.itemVAlign,
                            className: prefixClass('grid-item'), key: i,
                            style: t.props.square ? { height: '' + 10 / t.props.col + 'rem' } : {} },
                        child
                    );
                }),
                t.fillEmptyItem(toFilledItemNumber)
            );
        }
    }]);

    return Row;
}(React.Component);

Row.defaultProps = {
    col: 4,
    square: false
};

Row.propTypes = {
    col: React.PropTypes.number,
    square: React.PropTypes.bool,
    // 单个格子的水平对其方式
    itemHAlign: VBox.propTypes.hAlign,
    // 单个格子的垂直对其方式
    itemVAlign: VBox.propTypes.vAlign
};

module.exports = Row;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJvdy5qcyJdLCJuYW1lcyI6WyJjbGFzc25hbWVzIiwicmVxdWlyZSIsIkNvbnRleHQiLCJWQm94IiwicHJlZml4Q2xhc3MiLCJSb3ciLCJwcm9wcyIsIm4iLCJ0IiwicmV0IiwicHVzaCIsIml0ZW1IQWxpZ24iLCJpdGVtVkFsaWduIiwic3F1YXJlIiwiaGVpZ2h0IiwiY29sIiwiUmVhY3QiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJ0b0ZpbGxlZEl0ZW1OdW1iZXIiLCJjb3VudCIsImNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpIiwiZmlsbEVtcHR5SXRlbSIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm51bWJlciIsImJvb2wiLCJoQWxpZ24iLCJ2QWxpZ24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBTUEsYUFBYUMsUUFBUSxZQUFSLENBQW5CO0FBQ0EsSUFBTUMsVUFBVUQsUUFBUSxxQkFBUixDQUFoQjs7ZUFDZUEsUUFBUSxpQkFBUixDOztJQUFSRSxJLFlBQUFBLEk7OztBQUVQLElBQU1DLGNBQWNGLFFBQVFFLFdBQTVCOztJQUVNQyxHOzs7QUFFRixpQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLHlHQUNUQSxLQURTO0FBRWxCOztBQUVEOzs7OztzQ0FDY0MsQyxFQUFHO0FBQ2IsZ0JBQUlBLE1BQU0sQ0FBVixFQUFhO0FBQ1QsdUJBQU8sSUFBUDtBQUNIOztBQUVELGdCQUFJQyxJQUFJLElBQVI7QUFDQSxnQkFBSUMsTUFBTSxFQUFWOztBQUVBLG1CQUFPRixNQUFNLENBQWIsRUFBZ0I7QUFDWkUsb0JBQUlDLElBQUosQ0FDSSxvQkFBQyxJQUFELElBQU0sTUFBTSxDQUFaLEVBQWUsUUFBUUYsRUFBRUYsS0FBRixDQUFRSyxVQUEvQixFQUEyQyxRQUFRSCxFQUFFRixLQUFGLENBQVFNLFVBQTNELEVBQXVFLFdBQVdSLFlBQVksV0FBWixDQUFsRjtBQUNJLDJCQUFPSSxFQUFFRixLQUFGLENBQVFPLE1BQVIsR0FBaUIsRUFBQ0MsUUFBUSxLQUFLLEtBQUdOLEVBQUVGLEtBQUYsQ0FBUVMsR0FBaEIsR0FBc0IsS0FBL0IsRUFBakIsR0FBeUQsRUFEcEUsR0FESjtBQUtIO0FBQ0QsbUJBQU9DLE1BQU1DLFFBQU4sQ0FBZUMsT0FBZixDQUF1QlQsR0FBdkIsQ0FBUDtBQUNIOzs7aUNBRVE7QUFDTCxnQkFBSUQsSUFBSSxJQUFSO0FBQ0EsZ0JBQUlXLHFCQUFxQlgsRUFBRUYsS0FBRixDQUFRUyxHQUFSLEdBQWNDLE1BQU1DLFFBQU4sQ0FBZUcsS0FBZixDQUFxQlosRUFBRUYsS0FBRixDQUFRZSxRQUE3QixDQUF2Qzs7QUFFQSxtQkFDSTtBQUFBO0FBQUEsa0JBQUssV0FBY2pCLFlBQVksVUFBWixDQUFkLFNBQXlDQSxZQUFZLEtBQVosQ0FBOUM7QUFFUVksc0JBQU1DLFFBQU4sQ0FBZUssR0FBZixDQUFtQmQsRUFBRUYsS0FBRixDQUFRZSxRQUEzQixFQUFxQyxVQUFVRSxLQUFWLEVBQWlCQyxDQUFqQixFQUFvQjtBQUNyRCwyQkFDSTtBQUFDLDRCQUFEO0FBQUEsMEJBQU0sTUFBTSxDQUFaLEVBQWUsUUFBUWhCLEVBQUVGLEtBQUYsQ0FBUUssVUFBL0IsRUFBMkMsUUFBUUgsRUFBRUYsS0FBRixDQUFRTSxVQUEzRDtBQUNJLHVDQUFXUixZQUFZLFdBQVosQ0FEZixFQUN5QyxLQUFLb0IsQ0FEOUM7QUFFSSxtQ0FBT2hCLEVBQUVGLEtBQUYsQ0FBUU8sTUFBUixHQUFpQixFQUFDQyxRQUFRLEtBQUssS0FBR04sRUFBRUYsS0FBRixDQUFRUyxHQUFoQixHQUFzQixLQUEvQixFQUFqQixHQUF5RCxFQUZwRTtBQUdLUTtBQUhMLHFCQURKO0FBT0gsaUJBUkQsQ0FGUjtBQVlLZixrQkFBRWlCLGFBQUYsQ0FBZ0JOLGtCQUFoQjtBQVpMLGFBREo7QUFnQkg7Ozs7RUE3Q2FILE1BQU1VLFM7O0FBZ0R4QnJCLElBQUlzQixZQUFKLEdBQW1CO0FBQ2ZaLFNBQUssQ0FEVTtBQUVmRixZQUFRO0FBRk8sQ0FBbkI7O0FBS0FSLElBQUl1QixTQUFKLEdBQWdCO0FBQ1piLFNBQUtDLE1BQU1hLFNBQU4sQ0FBZ0JDLE1BRFQ7QUFFWmpCLFlBQVFHLE1BQU1hLFNBQU4sQ0FBZ0JFLElBRlo7QUFHWjtBQUNBcEIsZ0JBQVlSLEtBQUt5QixTQUFMLENBQWVJLE1BSmY7QUFLWjtBQUNBcEIsZ0JBQVlULEtBQUt5QixTQUFMLENBQWVLO0FBTmYsQ0FBaEI7O0FBU0FDLE9BQU9DLE9BQVAsR0FBaUI5QixHQUFqQiIsImZpbGUiOiJSb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuY29uc3QgQ29udGV4dCA9IHJlcXVpcmUoJ0BhbGkvdGluZ2xlLWNvbnRleHQnKTtcbmNvbnN0IHtWQm94fSA9IHJlcXVpcmUoJ0BhbGkvdGluZ2xlLWJveCcpO1xuXG5jb25zdCBwcmVmaXhDbGFzcyA9IENvbnRleHQucHJlZml4Q2xhc3M7XG5cbmNsYXNzIFJvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgLy8g5qC55o2uYGNvbGDnmoTorr7nva7vvIzooaXlhYXnqbrnmoRgaXRlbWBcbiAgICBmaWxsRW1wdHlJdGVtKG4pIHtcbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBsZXQgcmV0ID0gW107XG5cbiAgICAgICAgd2hpbGUgKG4tLSA+IDApIHtcbiAgICAgICAgICAgIHJldC5wdXNoKFxuICAgICAgICAgICAgICAgIDxWQm94IGZsZXg9ezF9IGhBbGlnbj17dC5wcm9wcy5pdGVtSEFsaWdufSB2QWxpZ249e3QucHJvcHMuaXRlbVZBbGlnbn0gY2xhc3NOYW1lPXtwcmVmaXhDbGFzcygnZ3JpZC1pdGVtJyl9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt0LnByb3BzLnNxdWFyZSA/IHtoZWlnaHQ6ICcnICsgMTAvdC5wcm9wcy5jb2wgKyAncmVtJ30gOiB7fX0+XG4gICAgICAgICAgICAgICAgPC9WQm94PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShyZXQpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBsZXQgdG9GaWxsZWRJdGVtTnVtYmVyID0gdC5wcm9wcy5jb2wgLSBSZWFjdC5DaGlsZHJlbi5jb3VudCh0LnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsYXNzKCdncmlkLXJvdycpfSAke3ByZWZpeENsYXNzKCdGQkgnKX1gfT5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcCh0LnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZCb3ggZmxleD17MX0gaEFsaWduPXt0LnByb3BzLml0ZW1IQWxpZ259IHZBbGlnbj17dC5wcm9wcy5pdGVtVkFsaWdufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3ByZWZpeENsYXNzKCdncmlkLWl0ZW0nKX0ga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17dC5wcm9wcy5zcXVhcmUgPyB7aGVpZ2h0OiAnJyArIDEwL3QucHJvcHMuY29sICsgJ3JlbSd9IDoge319PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9WQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge3QuZmlsbEVtcHR5SXRlbSh0b0ZpbGxlZEl0ZW1OdW1iZXIpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Sb3cuZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbDogNCxcbiAgICBzcXVhcmU6IGZhbHNlXG59O1xuXG5Sb3cucHJvcFR5cGVzID0ge1xuICAgIGNvbDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBzcXVhcmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIC8vIOWNleS4quagvOWtkOeahOawtOW5s+WvueWFtuaWueW8j1xuICAgIGl0ZW1IQWxpZ246IFZCb3gucHJvcFR5cGVzLmhBbGlnbixcbiAgICAvLyDljZXkuKrmoLzlrZDnmoTlnoLnm7Tlr7nlhbbmlrnlvI9cbiAgICBpdGVtVkFsaWduOiBWQm94LnByb3BUeXBlcy52QWxpZ25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUm93O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

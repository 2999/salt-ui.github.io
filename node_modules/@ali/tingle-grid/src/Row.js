const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const {VBox} = require('@ali/tingle-box');

const prefixClass = Context.prefixClass;

class Row extends React.Component {

    constructor(props) {
        super(props);
    }

    // 根据`col`的设置，补充空的`item`
    fillEmptyItem(n) {
        if (n === 0) {
            return null;
        }

        let t = this;
        let ret = [];

        while (n-- > 0) {
            ret.push(
                <VBox flex={1} hAlign={t.props.itemHAlign} vAlign={t.props.itemVAlign} className={prefixClass('grid-item')}
                    style={t.props.square ? {height: '' + 10/t.props.col + 'rem'} : {}}>
                </VBox>
            );
        }
        return React.Children.toArray(ret);
    }

    render() {
        let t = this;
        let toFilledItemNumber = t.props.col - React.Children.count(t.props.children);

        return (
            <div className={`${prefixClass('grid-row')} ${prefixClass('FBH')}`}>
                {
                    React.Children.map(t.props.children, function (child, i) {
                        return (
                            <VBox flex={1} hAlign={t.props.itemHAlign} vAlign={t.props.itemVAlign}
                                className={prefixClass('grid-item')} key={i}
                                style={t.props.square ? {height: '' + 10/t.props.col + 'rem'} : {}}>
                                {child}
                            </VBox>
                        );
                    })
                }
                {t.fillEmptyItem(toFilledItemNumber)}
            </div>
        );
    }
}

Row.defaultProps = {
    col: 4,
    square: false
};

Row.propTypes = {
    col: React.PropTypes.number,
    square: React.PropTypes.bool,
    // 单个格子的水平对其方式
    itemHAlign: VBox.propTypes.hAlign,
    // 单个格子的垂直对其方式
    itemVAlign: VBox.propTypes.vAlign
};

module.exports = Row;

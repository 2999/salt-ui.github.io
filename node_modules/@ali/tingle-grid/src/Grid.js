/**
* Collection Component for tingle
* @author gnosaij
*
* Copyright 2014-2016, Tingle Team, Alinw.
* All rights reserved.
*/
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const {VBox} = require('@ali/tingle-box');
const Row = require('./Row');

const prefixClass = Context.prefixClass;

class Grid extends React.Component {

    constructor(props) {
        super(props);
    }

    /**
    * 将子元素的索引值根据列数划分成组
    * @returns {Array}
    */
    cutIndexesIntoRows() {
        var t = this;
        let rowIndexes = [];
        let childrenCount = React.Children.count(t.props.children);
        let dummyIndexArray = [];
        let dummyIndex = 0;
        while (childrenCount-- > 0) {
            dummyIndexArray.push(dummyIndex++);
        }

        while (dummyIndexArray.length) {
            rowIndexes.push(dummyIndexArray.splice(0, t.props.col));
        }

        return rowIndexes;
    }

    render() {
        let t = this;
        // react0.14
        let children = React.Children.toArray(t.props.children);

        let rows = t.cutIndexesIntoRows();
        let {className, noLine, ...rowProps} = t.props;

        return (
            <div className={classnames(prefixClass('grid'), {
                [className]: !!className,
                [prefixClass('no-line')]: noLine,
                [prefixClass('grid-touchable')]: this.props.touchable
            })}>
            {
                rows.map(function (indexes, i) {
                    return (
                        <Row {...rowProps} key={i}>
                            {indexes.map(function (index) {
                                return children[index];
                            })}
                        </Row>
                    );
                })
            }
            </div>
        );
    }
}

Grid.defaultProps = {
    className: '',
    col: 4,
    square: false,
    noLine: false,
    itemHAlign: 'center',
    itemVAlign: 'center',
    touchable: false
};

// http://facebook.github.io/react/docs/reusable-components.html
Grid.propTypes = {
    className: React.PropTypes.string,
    // 列数
    col: React.PropTypes.number,
    // 是否自适应单元格的高度 使单元格成为正方形
    square: React.PropTypes.bool,
    // 是否隐藏分割线
    noLine: React.PropTypes.bool,
    // 单个格子的水平对其方式
    itemHAlign: VBox.propTypes.hAlign,
    // 单个格子的垂直对其方式
    itemVAlign: VBox.propTypes.vAlign,
    // 单元格是否可点击
    touchable: React.PropTypes.bool
};

Grid.displayName = 'Grid';

module.exports = Grid;

/**
 * Tab Component for tingle
 * @author zhangshun@alipay.com
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const Scroller = require('@ali/tingle-scroller');
const TabItem = require('./TabItem');
let prefixClass = Context.prefixClass;
const iScroll = require("@ali/tingle-scroller/dist/iscroll");

class Tab extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            active: props.active
        }
    }

    componentDidMount() {
        // 计算宽度和滚动
        let t = this;
        if (!t.props.showScroll) {
            return;
        }
        let w = 0;
        let scrollEl = ReactDOM.findDOMNode(t.refs.scroll);
        let chNodes = scrollEl.childNodes;
        for (let i = 0, l = chNodes.length; i < l; i++) {
            w += chNodes[i].offsetWidth + 1;
        }

        scrollEl.style.width = w + "px";
        // 实例化滚动
        t.refs.head.scroller.refresh();
    }

    componentWillReceiveProps(nextProps) {
        let t = this;
        if (nextProps.active !== t.state.active) {
            t.setState({
                active: nextProps.active
            });
        }
    }

    componentDidUpdate(prevProps, prevState) {
        //fix issue #8
        if(this.state.active !== prevState.active) {
            this.setActiveTabItemVisible();
        }
    }

    setActiveTabItemVisible() {
        if(!this.props.showScroll) {
            //没有scroll的时候，active tab必然是可见的
            return true;
        }

        var activeTab = this.findActiveTab();
        if(!this.tabVisible(activeTab)) {
            this.refs.head.scroller.scrollToElement(activeTab, 'auto', true, true);
        }
    }

    tabVisible(tab) {
        var scroller = this.refs.head.scroller;
        var tabOffset = iScroll.utils.offset(tab);
        var wrapperWidth = scroller.wrapperWidth;

        //scroll使用的offset像素坐标都是负值，使用的时候做Math.abs处理，方便计算
        var headOffsetRange = {
            left: Math.abs(scroller.x),
            right: Math.abs(scroller.x + (-wrapperWidth))
        };

        var tabLeft = Math.abs(tabOffset.left);
        var tabRight = Math.abs(tabOffset.right);

        if(tabLeft >= headOffsetRange.left) {
            return tabLeft < headOffsetRange.right;
        }

        if(tabRight < headOffsetRange.left) {
            return tabRight <= headOffsetRange.right;
        }

    }

    findActiveTab() {
        var refKey = `tab_${this.state.active}`;
        return ReactDOM.findDOMNode(this.refs[refKey]);
    }

    handleChange(active, data, e) {
        let t = this;
        let preActive = t.state.active;
        t.setState({
            active: active
        });
        t.props.onChange({
            active: active,
            preActive: preActive,
            data: data,
            e: e
        });
    }

    render() {
        let t = this;
        return <div ref='root' className={classnames({
            [prefixClass('tab')]: true,
            [t.props.type]: true,
            [t.props.className]: !!t.props.className,
            //固顶和固底不能同时生效，且已固顶优先
            "fixed-top": !!t.props.fixedTop,
            "fixed-bottom": !t.props.fixedTop && !!t.props.fixedBottom,
        })}>
            {t._renderHead()}
            {t._renderBody()}
            {t.props.showScroll && t._renderPendant()}
        </div>;


    }

    _renderHead() {
        let t = this;
        if (t.props.showScroll) {
            //添加右边icon
            return <Scroller className={prefixClass('tab-head')} scrollX={true} scrollY={false} ref="head">
                {t._renderHeadContent(true, t)}
            </Scroller>
        } else {
            return <div className={prefixClass('tab-head')} ref="head">
                {t._renderHeadContent(false, t)}
            </div>

        }
    }

    _renderHeadContent(scroll, t) {
        return <div className={classnames({
            [prefixClass('tab-head-scroll')]: scroll,
            [prefixClass('tab-head-container')]: true,
            [prefixClass('CL')]: scroll,
            [prefixClass('FBH')]: !scroll
        })} ref="scroll">
            {
                React.Children.map(t.props.children, (child, active) => {
                    let _className = classnames({
                        [prefixClass('tab-head-item')]: true,
                        [prefixClass('FAC')]: true,
                        [prefixClass('FL')]: scroll,
                        [prefixClass('FB1')]: !scroll,
                        'active': t.state.active == active
                    });
                    return <div className={_className} key={active} active={active} ref={`tab_${active}`}
                                onClick={t.handleChange.bind(t, active, child.props.data)}>
                        <span>{child.props.title}</span>
                    </div>
                })
            }
        </div>

    }

    _renderPendant() {
        //渲染右边自定义的小零件
        let t = this;
        let pendant = t.props.pendant;

        if(pendant && React.isValidElement(pendant)) {
            return React.cloneElement(pendant, {
                role: "pendant"
            });
        }
    }

    _renderBody() {
        let t = this;
        let activeBody = [];

        React.Children.forEach(t.props.children, (child, active) => {
            let _className = classnames({
                [prefixClass('tab-body-item')]: true,
                [prefixClass('hide')]: t.state.active !== active
            });
            activeBody.push(
                <div className={_className} key={active} active={t.state.active === active}>{child}</div>
            );
        });

        if (t.props.destroyInactiveTabPane) {
            activeBody = activeBody.filter((body) => {
                return body.props.active;
            });
        }

        return (
            <div className={prefixClass('tab-body')}>
                {
                    activeBody
                }
            </div>
        );
    }
}

Tab.defaultProps = {
    active: 0,
    type: '',
    onChange: Context.noop,
    showScroll: false,
    destroyInactiveTabPane: false,
    //固定顶部
    fixedTop: false,
    //固定底部
    fixedBottom: false,
};

// http://facebook.github.io/react/docs/reusable-components.html
Tab.propTypes = {
    active: React.PropTypes.number,
    type: React.PropTypes.oneOf(['', 'brick']),
    onChange: React.PropTypes.func,
    showScroll: React.PropTypes.bool,
    destroyInactiveTabPane: React.PropTypes.bool,
    pendant: React.PropTypes.element,
    fixedTop: React.PropTypes.bool,
    fixedBottom: React.PropTypes.bool,
};

Tab.Item = TabItem;
Tab.displayName = 'Tab';

module.exports = Tab;

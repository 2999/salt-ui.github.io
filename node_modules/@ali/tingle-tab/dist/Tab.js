'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tab Component for tingle
 * @author zhangshun@alipay.com
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');
var Context = require('@ali/tingle-context');
var Scroller = require('@ali/tingle-scroller');
var TabItem = require('./TabItem');
var prefixClass = Context.prefixClass;
var iScroll = require("@ali/tingle-scroller/dist/iscroll");

var Tab = function (_React$Component) {
    _inherits(Tab, _React$Component);

    function Tab(props) {
        _classCallCheck(this, Tab);

        var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props));

        _this.state = {
            active: props.active
        };
        return _this;
    }

    _createClass(Tab, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // 计算宽度和滚动
            var t = this;
            if (!t.props.showScroll) {
                return;
            }
            var w = 0;
            var scrollEl = ReactDOM.findDOMNode(t.refs.scroll);
            var chNodes = scrollEl.childNodes;
            for (var i = 0, l = chNodes.length; i < l; i++) {
                w += chNodes[i].offsetWidth + 1;
            }

            scrollEl.style.width = w + "px";
            // 实例化滚动
            t.refs.head.scroller.refresh();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var t = this;
            if (nextProps.active !== t.state.active) {
                t.setState({
                    active: nextProps.active
                });
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            //fix issue #8
            if (this.state.active !== prevState.active) {
                this.setActiveTabItemVisible();
            }
        }
    }, {
        key: 'setActiveTabItemVisible',
        value: function setActiveTabItemVisible() {
            if (!this.props.showScroll) {
                //没有scroll的时候，active tab必然是可见的
                return true;
            }

            var activeTab = this.findActiveTab();
            if (!this.tabVisible(activeTab)) {
                this.refs.head.scroller.scrollToElement(activeTab, 'auto', true, true);
            }
        }
    }, {
        key: 'tabVisible',
        value: function tabVisible(tab) {
            var scroller = this.refs.head.scroller;
            var tabOffset = iScroll.utils.offset(tab);
            var wrapperWidth = scroller.wrapperWidth;

            //scroll使用的offset像素坐标都是负值，使用的时候做Math.abs处理，方便计算
            var headOffsetRange = {
                left: Math.abs(scroller.x),
                right: Math.abs(scroller.x + -wrapperWidth)
            };

            var tabLeft = Math.abs(tabOffset.left);
            var tabRight = Math.abs(tabOffset.right);

            if (tabLeft >= headOffsetRange.left) {
                return tabLeft < headOffsetRange.right;
            }

            if (tabRight < headOffsetRange.left) {
                return tabRight <= headOffsetRange.right;
            }
        }
    }, {
        key: 'findActiveTab',
        value: function findActiveTab() {
            var refKey = 'tab_' + this.state.active;
            return ReactDOM.findDOMNode(this.refs[refKey]);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(active, data, e) {
            var t = this;
            var preActive = t.state.active;
            t.setState({
                active: active
            });
            t.props.onChange({
                active: active,
                preActive: preActive,
                data: data,
                e: e
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _classnames;

            var t = this;
            return React.createElement(
                'div',
                { ref: 'root', className: classnames((_classnames = {}, _defineProperty(_classnames, prefixClass('tab'), true), _defineProperty(_classnames, t.props.type, true), _defineProperty(_classnames, t.props.className, !!t.props.className), _defineProperty(_classnames, "fixed-top", !!t.props.fixedTop), _defineProperty(_classnames, "fixed-bottom", !t.props.fixedTop && !!t.props.fixedBottom), _classnames)) },
                t._renderHead(),
                t._renderBody(),
                t.props.showScroll && t._renderPendant()
            );
        }
    }, {
        key: '_renderHead',
        value: function _renderHead() {
            var t = this;
            if (t.props.showScroll) {
                //添加右边icon
                return React.createElement(
                    Scroller,
                    { className: prefixClass('tab-head'), scrollX: true, scrollY: false, ref: 'head' },
                    t._renderHeadContent(true, t)
                );
            } else {
                return React.createElement(
                    'div',
                    { className: prefixClass('tab-head'), ref: 'head' },
                    t._renderHeadContent(false, t)
                );
            }
        }
    }, {
        key: '_renderHeadContent',
        value: function _renderHeadContent(scroll, t) {
            var _classnames2;

            return React.createElement(
                'div',
                { className: classnames((_classnames2 = {}, _defineProperty(_classnames2, prefixClass('tab-head-scroll'), scroll), _defineProperty(_classnames2, prefixClass('tab-head-container'), true), _defineProperty(_classnames2, prefixClass('CL'), scroll), _defineProperty(_classnames2, prefixClass('FBH'), !scroll), _classnames2)), ref: 'scroll' },
                React.Children.map(t.props.children, function (child, active) {
                    var _classnames3;

                    var _className = classnames((_classnames3 = {}, _defineProperty(_classnames3, prefixClass('tab-head-item'), true), _defineProperty(_classnames3, prefixClass('FAC'), true), _defineProperty(_classnames3, prefixClass('FL'), scroll), _defineProperty(_classnames3, prefixClass('FB1'), !scroll), _defineProperty(_classnames3, 'active', t.state.active == active), _classnames3));
                    return React.createElement(
                        'div',
                        { className: _className, key: active, active: active, ref: 'tab_' + active,
                            onClick: t.handleChange.bind(t, active, child.props.data) },
                        React.createElement(
                            'span',
                            null,
                            child.props.title
                        )
                    );
                })
            );
        }
    }, {
        key: '_renderPendant',
        value: function _renderPendant() {
            //渲染右边自定义的小零件
            var t = this;
            var pendant = t.props.pendant;

            if (pendant && React.isValidElement(pendant)) {
                return React.cloneElement(pendant, {
                    role: "pendant"
                });
            }
        }
    }, {
        key: '_renderBody',
        value: function _renderBody() {
            var t = this;
            var activeBody = [];

            React.Children.forEach(t.props.children, function (child, active) {
                var _classnames4;

                var _className = classnames((_classnames4 = {}, _defineProperty(_classnames4, prefixClass('tab-body-item'), true), _defineProperty(_classnames4, prefixClass('hide'), t.state.active !== active), _classnames4));
                activeBody.push(React.createElement(
                    'div',
                    { className: _className, key: active, active: t.state.active === active },
                    child
                ));
            });

            if (t.props.destroyInactiveTabPane) {
                activeBody = activeBody.filter(function (body) {
                    return body.props.active;
                });
            }

            return React.createElement(
                'div',
                { className: prefixClass('tab-body') },
                activeBody
            );
        }
    }]);

    return Tab;
}(React.Component);

Tab.defaultProps = {
    active: 0,
    type: '',
    onChange: Context.noop,
    showScroll: false,
    destroyInactiveTabPane: false,
    //固定顶部
    fixedTop: false,
    //固定底部
    fixedBottom: false
};

// http://facebook.github.io/react/docs/reusable-components.html
Tab.propTypes = {
    active: React.PropTypes.number,
    type: React.PropTypes.oneOf(['', 'brick']),
    onChange: React.PropTypes.func,
    showScroll: React.PropTypes.bool,
    destroyInactiveTabPane: React.PropTypes.bool,
    pendant: React.PropTypes.element,
    fixedTop: React.PropTypes.bool,
    fixedBottom: React.PropTypes.bool
};

Tab.Item = TabItem;
Tab.displayName = 'Tab';

module.exports = Tab;
//# sourceMappingURL=data:application/json;base64,

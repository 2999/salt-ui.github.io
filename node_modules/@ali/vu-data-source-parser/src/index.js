import Natty from 'natty-fetch';
import assign from 'object-assign';
import functionParser from '@ali/vu-function-parser';

function processDataSourceParams(dataSourceProps, componentProps) {
  var params = {};

  dataSourceProps.forEach(item => {
    var { name, value, isVariable } = item;
    if (isVariable) {
      value = componentProps[value];
    }
    params[name] = value;
  });

  return params;
}

function parser(dataSource, nattyOptions) {
  const isData = dataSource.type === "DATA";
  const isRpc = dataSource.type === "URL";
  const isJsonp = dataSource.method === 'JSONP';

  if (isData) {
    //静态数据源，直接返回data
    return function() {
      return Promise.resolve(dataSource.data);
    }
  } else {
    //动态数据源，构造rpcOption请求数据
    return function(props) {
      let rpcOption = {
        url: dataSource.url,
        jsonp: isJsonp,
        method: isJsonp ? "GET" : dataSource.method,
        data: processDataSourceParams(dataSource.params || [], props || {}),
        withCredentials: false,
        willFetch: dataSource.willFetch ? functionParser(dataSource.willFetch) : function() {
        },
        process: dataSource.process ? functionParser(dataSource.process) : undefined
      };

      rpcOption = assign({}, rpcOption, nattyOptions || {});

      if (!rpcOption.url) {
        return Promise.reject("数据源url缺失，请检查配置是否正确");
      }

      const context = Natty.context();
      context.create({
        'dataSource': rpcOption
      });

      return context.api.dataSource();
    }
  }

}

export default parser;

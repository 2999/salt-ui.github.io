'use strict';

var React = require('react');

var _require = require('engine');

var Bundle = _require.Bundle;

var _require2 = require('engine-utils');

var BoolSetter = _require2.BoolSetter;
var TextSetter = _require2.TextSetter;
var ChoiceSetter = _require2.ChoiceSetter;
var JsonSetter = _require2.JsonSetter;
var NumberSetter = _require2.NumberSetter;


module.exports = Bundle.createPrototype({
    title: " 按钮",
    category: "*",
    icon: require("./logo-ide.svg"),
    componentName: "Button",
    canHovering: true,
    canSelecting: true,
    canDraging: true,
    isInline: false,
    isContainer: false,
    canDropto: true,
    canDroping: false,
    configure: [{
        name: "size",
        title: "size",
        defaultValue: 'medium',
        required: false,
        fieldStyle: "block",
        fieldCollapsed: false,
        setter: React.createElement(ChoiceSetter, { options: [{ value: 'medium' }, { value: 'large' }, { value: 'small' }] })
    }, {
        name: "type",
        title: "type",
        defaultValue: 'primary',
        required: false,
        fieldStyle: "block",
        fieldCollapsed: false,
        setter: React.createElement(ChoiceSetter, { options: [{ value: 'primary' }, { value: 'secondary' }, { value: 'minor' }, { value: 'danger' }, { value: 'text' }] })
    }, {
        name: "disabled",
        title: "disabled",
        defaultValue: false,
        fieldStyle: "block",
        fieldCollapsed: false,
        setter: React.createElement(BoolSetter, null)
    }, {
        name: "style",
        title: "style",
        defaultValue: {},
        required: false,
        fieldStyle: "accordion",
        fieldCollapsed: false,
        setter: React.createElement(JsonSetter, null)
    }, {
        name: "children",
        title: "text",
        defaultValue: "一级按钮",
        required: false,
        fieldStyle: "block",
        fieldCollapsed: false,
        setter: React.createElement(TextSetter, null)
    }]
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvdHlwZS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCdW5kbGUiLCJCb29sU2V0dGVyIiwiVGV4dFNldHRlciIsIkNob2ljZVNldHRlciIsIkpzb25TZXR0ZXIiLCJOdW1iZXJTZXR0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlUHJvdG90eXBlIiwidGl0bGUiLCJjYXRlZ29yeSIsImljb24iLCJjb21wb25lbnROYW1lIiwiY2FuSG92ZXJpbmciLCJjYW5TZWxlY3RpbmciLCJjYW5EcmFnaW5nIiwiaXNJbmxpbmUiLCJpc0NvbnRhaW5lciIsImNhbkRyb3B0byIsImNhbkRyb3BpbmciLCJjb25maWd1cmUiLCJuYW1lIiwiZGVmYXVsdFZhbHVlIiwicmVxdWlyZWQiLCJmaWVsZFN0eWxlIiwiZmllbGRDb2xsYXBzZWQiLCJzZXR0ZXIiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFNQSxRQUFRQyxRQUFRLE9BQVIsQ0FBZDs7ZUFDaUJBLFFBQVEsUUFBUixDOztJQUFWQyxNLFlBQUFBLE07O2dCQUNrRUQsUUFBUSxjQUFSLEM7O0lBQWxFRSxVLGFBQUFBLFU7SUFBWUMsVSxhQUFBQSxVO0lBQVlDLFksYUFBQUEsWTtJQUFjQyxVLGFBQUFBLFU7SUFBWUMsWSxhQUFBQSxZOzs7QUFFekRDLE9BQU9DLE9BQVAsR0FBaUJQLE9BQU9RLGVBQVAsQ0FBdUI7QUFDcENDLFdBQU8sS0FENkI7QUFFcENDLGNBQVUsR0FGMEI7QUFHcENDLFVBQU1aLFFBQVEsZ0JBQVIsQ0FIOEI7QUFJcENhLG1CQUFlLFFBSnFCO0FBS3BDQyxpQkFBYSxJQUx1QjtBQU1wQ0Msa0JBQWMsSUFOc0I7QUFPcENDLGdCQUFZLElBUHdCO0FBUXBDQyxjQUFVLEtBUjBCO0FBU3BDQyxpQkFBYSxLQVR1QjtBQVVwQ0MsZUFBVyxJQVZ5QjtBQVdwQ0MsZ0JBQVksS0FYd0I7QUFZcENDLGVBQVcsQ0FBQztBQUNKQyxjQUFNLE1BREY7QUFFSlosZUFBTyxNQUZIO0FBR0phLHNCQUFjLFFBSFY7QUFJSkMsa0JBQVUsS0FKTjtBQUtKQyxvQkFBWSxPQUxSO0FBTUpDLHdCQUFnQixLQU5aO0FBT0pDLGdCQUFRLG9CQUFDLFlBQUQsSUFBYyxTQUFTLENBQUMsRUFBQ0MsT0FBTSxRQUFQLEVBQUQsRUFBa0IsRUFBQ0EsT0FBTSxPQUFQLEVBQWxCLEVBQWtDLEVBQUNBLE9BQU0sT0FBUCxFQUFsQyxDQUF2QjtBQVBKLEtBQUQsRUFRSjtBQUNDTixjQUFNLE1BRFA7QUFFQ1osZUFBTyxNQUZSO0FBR0NhLHNCQUFjLFNBSGY7QUFJQ0Msa0JBQVUsS0FKWDtBQUtDQyxvQkFBWSxPQUxiO0FBTUNDLHdCQUFnQixLQU5qQjtBQU9DQyxnQkFBUSxvQkFBQyxZQUFELElBQWMsU0FBUyxDQUFDLEVBQUNDLE9BQU0sU0FBUCxFQUFELEVBQW1CLEVBQUNBLE9BQU0sV0FBUCxFQUFuQixFQUF1QyxFQUFDQSxPQUFNLE9BQVAsRUFBdkMsRUFBdUQsRUFBQ0EsT0FBTSxRQUFQLEVBQXZELEVBQXdFLEVBQUNBLE9BQU0sTUFBUCxFQUF4RSxDQUF2QjtBQVBULEtBUkksRUFnQko7QUFDQ04sY0FBTSxVQURQO0FBRUNaLGVBQU8sVUFGUjtBQUdDYSxzQkFBYyxLQUhmO0FBSUNFLG9CQUFZLE9BSmI7QUFLQ0Msd0JBQWdCLEtBTGpCO0FBTUNDLGdCQUFRLG9CQUFDLFVBQUQ7QUFOVCxLQWhCSSxFQXVCSjtBQUNDTCxjQUFNLE9BRFA7QUFFQ1osZUFBTyxPQUZSO0FBR0NhLHNCQUFjLEVBSGY7QUFJQ0Msa0JBQVUsS0FKWDtBQUtDQyxvQkFBWSxXQUxiO0FBTUNDLHdCQUFnQixLQU5qQjtBQU9DQyxnQkFBUSxvQkFBQyxVQUFEO0FBUFQsS0F2QkksRUErQko7QUFDQ0wsY0FBTSxVQURQO0FBRUNaLGVBQU8sTUFGUjtBQUdDYSxzQkFBYyxNQUhmO0FBSUNDLGtCQUFVLEtBSlg7QUFLQ0Msb0JBQVksT0FMYjtBQU1DQyx3QkFBZ0IsS0FOakI7QUFPQ0MsZ0JBQVEsb0JBQUMsVUFBRDtBQVBULEtBL0JJO0FBWnlCLENBQXZCLENBQWpCIiwiZmlsZSI6InByb3RvdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge0J1bmRsZX0gPSByZXF1aXJlKCdlbmdpbmUnKTtcbmNvbnN0IHtCb29sU2V0dGVyLCBUZXh0U2V0dGVyLCBDaG9pY2VTZXR0ZXIsIEpzb25TZXR0ZXIsIE51bWJlclNldHRlcn0gPSByZXF1aXJlKCdlbmdpbmUtdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdW5kbGUuY3JlYXRlUHJvdG90eXBlKHtcbiAgICB0aXRsZTogXCIg5oyJ6ZKuXCIsXG4gICAgY2F0ZWdvcnk6IFwiKlwiLFxuICAgIGljb246IHJlcXVpcmUoXCIuL2xvZ28taWRlLnN2Z1wiKSxcbiAgICBjb21wb25lbnROYW1lOiBcIkJ1dHRvblwiLFxuICAgIGNhbkhvdmVyaW5nOiB0cnVlLFxuICAgIGNhblNlbGVjdGluZzogdHJ1ZSxcbiAgICBjYW5EcmFnaW5nOiB0cnVlLFxuICAgIGlzSW5saW5lOiBmYWxzZSxcbiAgICBpc0NvbnRhaW5lcjogZmFsc2UsXG4gICAgY2FuRHJvcHRvOiB0cnVlLFxuICAgIGNhbkRyb3Bpbmc6IGZhbHNlLFxuICAgIGNvbmZpZ3VyZTogW3tcbiAgICAgICAgICAgIG5hbWU6IFwic2l6ZVwiLFxuICAgICAgICAgICAgdGl0bGU6IFwic2l6ZVwiLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnbWVkaXVtJyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZpZWxkU3R5bGU6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIGZpZWxkQ29sbGFwc2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHNldHRlcjogPENob2ljZVNldHRlciBvcHRpb25zPXtbe3ZhbHVlOidtZWRpdW0nfSx7dmFsdWU6J2xhcmdlJ30se3ZhbHVlOidzbWFsbCd9XX0gLz5cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJ0eXBlXCIsXG4gICAgICAgICAgICB0aXRsZTogXCJ0eXBlXCIsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICdwcmltYXJ5JyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZpZWxkU3R5bGU6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIGZpZWxkQ29sbGFwc2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHNldHRlcjogPENob2ljZVNldHRlciBvcHRpb25zPXtbe3ZhbHVlOidwcmltYXJ5J30se3ZhbHVlOidzZWNvbmRhcnknfSx7dmFsdWU6J21pbm9yJ30se3ZhbHVlOidkYW5nZXInfSx7dmFsdWU6J3RleHQnfV19IC8+XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICAgIHRpdGxlOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgZmllbGRTdHlsZTogXCJibG9ja1wiLFxuICAgICAgICAgICAgZmllbGRDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2V0dGVyOiA8Qm9vbFNldHRlciAvPlxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiBcInN0eWxlXCIsXG4gICAgICAgICAgICB0aXRsZTogXCJzdHlsZVwiLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB7fSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZpZWxkU3R5bGU6IFwiYWNjb3JkaW9uXCIsXG4gICAgICAgICAgICBmaWVsZENvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgICAgICBzZXR0ZXI6IDxKc29uU2V0dGVyIC8+XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiY2hpbGRyZW5cIixcbiAgICAgICAgICAgIHRpdGxlOiBcInRleHRcIixcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogXCLkuIDnuqfmjInpkq5cIixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGZpZWxkU3R5bGU6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIGZpZWxkQ29sbGFwc2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHNldHRlcjogPFRleHRTZXR0ZXIgLz5cbiAgICAgICAgfV1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var i18n = require('../i18n');
var Context = require('@ali/tingle-context');
var prefixClass = Context.prefixClass;

// value 的格式：{startDate: '2016-01-02', endDate: '2016-01-03'}

var Month = function (_React$Component) {
  _inherits(Month, _React$Component);

  function Month(props) {
    _classCallCheck(this, Month);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Month).call(this, props));

    var date = _this.processValue();
    _this.state = {
      year: new Date(date.startDate).getFullYear()
    };
    return _this;
  }

  _createClass(Month, [{
    key: 'processValue',
    value: function processValue(props) {
      var t = this;
      props = props || t.props;
      if (_typeof(props.value) == 'object') {
        var _props$value = props.value;
        var startDate = _props$value.startDate;
        var endDate = _props$value.endDate;
      } else {
        var startDate = props.value;
      }
      return {
        startDate: new Date(startDate || 0),
        endDate: new Date(endDate || startDate || 0)
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var t = this;
      var newState = {};
      if (t.processValue().startDate.getTime() !== t.processValue(nextProps).startDate.getTime()) {
        newState['year'] = t.processValue(nextProps).startDate.getFullYear();
      }
      t.setState(newState);
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      var t = this;
      return t.state.year;
    }
  }, {
    key: 'handleListItemClick',
    value: function handleListItemClick(date) {
      var t = this;
      var value = t.processValue();
      date.setDate(value.startDate.getDate());
      var startDate = value.startDate;
      var endDate = value.endDate;

      var newValue = {};

      if (!t.props.singleMode) {
        if (startDate.getTime() !== endDate.getTime()) {
          newValue = {
            startDate: new Date(date).getTime(),
            endDate: ""
          };
        } else {
          // 需先判断选中日期和 startDate 的大小
          // 如果选中日期大于 startDate，则选中日期作为 endDate。
          if (new Date(date).getTime() > new Date(startDate).getTime()) {
            newValue = {
              startDate: new Date(startDate).getTime(),
              endDate: new Date(date).getTime()
            };
          }
          // 反之，则 startDate 作为新的 endDate，选中日期作为新的 startDate
          else {
              newValue = {
                startDate: new Date(date).getTime(),
                endDate: new Date(startDate).getTime()
              };
            }
        }
      } else {
        newValue = {
          startDate: new Date(date).getTime(),
          endDate: ""
        };
      }

      t.props.onChange(newValue);
    }
  }, {
    key: 'handlePrev',
    value: function handlePrev() {
      var t = this;
      t.setState({
        year: t.state.year - 1
      });
    }
  }, {
    key: 'handleNext',
    value: function handleNext() {
      var t = this;
      t.setState({
        year: t.state.year + 1
      });
    }
  }, {
    key: 'handleTitleClick',
    value: function handleTitleClick() {
      if (this.props.singleMode) {
        this.props.onTitleClick();
      }
    }
  }, {
    key: 'isItemActive',
    value: function isItemActive(index) {
      var t = this;
      var year = t.state.year;

      var _t$processValue = t.processValue();

      var startDate = _t$processValue.startDate;
      var endDate = _t$processValue.endDate;

      if (!startDate) {
        return false;
      }
      var startYear = new Date(startDate).getFullYear();
      var startMonth = new Date(startDate).getMonth();
      var active = false;
      if (!!endDate) {
        var endYear = new Date(endDate).getFullYear();
        var endMonth = new Date(endDate).getMonth();
        if (startYear != endYear) {
          active = year == startYear && index >= startMonth || year > startYear && year < endYear || year == endYear && index <= endMonth;
        } else {
          active = year == startYear && index <= endMonth && index >= startMonth;
        }
      } else {
        active = year == startYear && index == startMonth;
      }

      return active;
    }
  }, {
    key: 'renderMonthList',
    value: function renderMonthList() {
      var t = this;
      var months = i18n[t.props.locale]['monthTitle'];
      var year = t.state.year;


      return months.map(function (month, index) {
        var _classnames;

        return React.createElement(
          'div',
          { className: classnames((_classnames = {}, _defineProperty(_classnames, prefixClass('month-list-item'), true), _defineProperty(_classnames, "active", t.isItemActive(index)), _classnames)), key: index, onClick: t.handleListItemClick.bind(t, new Date(year, index)) },
          month
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var t = this;
      return React.createElement(
        'div',
        { className: prefixClass('month-panel') },
        React.createElement(
          'div',
          { className: prefixClass('tool FBH FBAC') },
          React.createElement('div', { className: prefixClass('FB1') }),
          React.createElement(
            'div',
            { className: prefixClass('btn prev-month tap op'), onClick: this.handlePrev.bind(this) },
            '<'
          ),
          React.createElement(
            'span',
            { className: prefixClass('text'), onClick: t.handleTitleClick.bind(t) },
            t.getTitle()
          ),
          React.createElement(
            'div',
            { className: prefixClass('btn next-month tap op'), onClick: this.handleNext.bind(this) },
            '>'
          ),
          React.createElement('div', { className: prefixClass('FB1') })
        ),
        React.createElement(
          'div',
          { className: prefixClass('month-list') },
          t.renderMonthList()
        )
      );
    }
  }]);

  return Month;
}(React.Component);

Month.displayName = "Month";
Month.defaultProps = {
  locale: 'zh-cn',
  onChange: function onChange() {},
  onTitleClick: function onTitleClick() {},
  singleMode: false
};
Month.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onChange: React.PropTypes.func,
  onTitleClick: React.PropTypes.func,
  singleMode: React.PropTypes.bool
};

module.exports = Month;
//# sourceMappingURL=data:application/json;base64,

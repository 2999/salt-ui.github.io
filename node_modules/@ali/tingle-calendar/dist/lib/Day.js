'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var i18n = require('../i18n');
var Context = require('@ali/tingle-context');
var prefixClass = Context.prefixClass;

// value 的格式：{startDate: '2016-01-02', startDateType: 'AM', endDate: '2016-01-03', endDateType: 'AM' }

var Day = function (_React$Component) {
  _inherits(Day, _React$Component);

  function Day(props) {
    _classCallCheck(this, Day);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Day).call(this, props));

    _this.state = {
      currentDate: _this.processValue(props).startDate, // 当前正在展示的面板上对应的时间，用以获取年和月的信息
      active: 'endDate'
    };
    return _this;
  }

  _createClass(Day, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var t = this;
      t.locale = i18n[t.props.locale];
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var t = this;
      var value = t.props.value;

      var nextValue = nextProps.value;
      var active = t.state.active;

      var newState = {};
      if (new Date(value.startDate).getTime() !== new Date(nextValue.startDate).getTime()) {
        newState['active'] = 'startDate';
      } else {
        newState['active'] = 'endDate';
      }
      if (t.processValue().startDate.getTime() !== t.processValue(nextProps).startDate.getTime()) {
        newState['currentDate'] = t.processValue(nextProps).startDate;
      }

      t.setState(newState);
    }
  }, {
    key: 'processValue',
    value: function processValue(props) {
      var t = this;
      props = props || t.props;
      if (_typeof(props.value) == 'object') {
        var _props$value = props.value;
        var startDate = _props$value.startDate;
        var startDateType = _props$value.startDateType;
        var endDate = _props$value.endDate;
        var endDateType = _props$value.endDateType;
      } else {
        var startDate = props.value;
      }

      // 处理异常情况，当 endDate 存在且不等于 startDate 的情况下， startDateType 不可能为 'AM'
      if (endDate && new Date(startDate).getTime() !== new Date(endDate).getTime() && startDateType == 'AM') {
        startDateType = 'FULL';
      }
      return {
        startDate: new Date(startDate || 0),
        startDateType: startDateType || 'FULL',
        endDate: new Date(endDate || startDate || 0),
        endDateType: endDateType || 'FULL'
      };
    }
  }, {
    key: 'handlePrev',
    value: function handlePrev() {
      var t = this;
      var currentDate = t.state.currentDate;

      t.setState({
        currentDate: new Date(currentDate.setMonth(currentDate.getMonth() - 1))
      });
    }
  }, {
    key: 'handleNext',
    value: function handleNext() {
      var t = this;
      var currentDate = t.state.currentDate;

      t.setState({
        currentDate: new Date(currentDate.setMonth(currentDate.getMonth() + 1))
      });
    }
  }, {
    key: 'handleClick',
    value: function handleClick(date, e) {
      var t = this;

      //如果有onSelecting的方法，且其执行函数后值为false，则直接返回
      if (typeof t.props.onSelecting == 'function' && t.props.onSelecting(date, e) === false) {
        return;
      }

      var singleMode = t.props.singleMode;
      var _t$props$value = t.props.value;
      var startDate = _t$props$value.startDate;
      var startDateType = _t$props$value.startDateType;
      var endDate = _t$props$value.endDate;
      var endDateType = _t$props$value.endDateType;

      var status = 0;
      // 先判断目前是一点状态还是两点状态，如果 startDate != endDate 则为两点状态，
      // 否则相等则为一点、startDate 为 0 则为0点状态
      if (!!startDate) {
        // 如果是单选模式，则 status 总为 2
        if (!!endDate && new Date(endDate).getTime() !== new Date(startDate).getTime() || singleMode) {
          status = 2;
        } else {
          status = 1;
        }
      }

      var newStartDate = '';
      var newEndDate = '';
      var newStartDateType = 'FULL';
      var newEndDateType = 'FULL';
      if (status == 0) {
        newStartDate = date.getTime();
      } else if (status == 1) {
        // 判断点击的时间和开始时间的大小，以决定谁是新的开始时间。
        if (date.getTime() >= new Date(startDate).getTime()) {
          newStartDate = startDate;
          newEndDate = date.getTime();
          newStartDateType = startDateType;
        } else {
          newStartDate = date.getTime();
          newEndDate = startDate;
          newEndDateType = startDateType;
        }
      } else {
        newStartDate = date.getTime();
      }

      t.props.onChange({
        startDate: newStartDate,
        startDateType: newStartDateType,
        endDate: newEndDate,
        endDateType: newEndDateType
      });
    }
  }, {
    key: 'handleTypeClick',
    value: function handleTypeClick(type, e) {
      var t = this;
      var value = typeof t.props.value == "string" ? { startDate: t.props.value } : t.props.value;
      var startDate = value.startDate;
      var startDateType = value.startDateType;
      var endDate = value.endDate;
      var endDateType = value.endDateType;

      var status = 0;
      var active = t.state.active;
      // 先判断目前是一点状态还是两点状态，如果 startDate != endDate 则为两点状态，
      // 否则相等则为一点、startDate 不存在则为 0 点状态

      if (!!startDate) {
        if (!!endDate && new Date(endDate).getTime() !== new Date(startDate).getTime()) {
          status = 2;
        } else {
          status = 1;
        }
      }

      var newStartDateType = "FULL";
      var newEndDateType = "FULL";

      if (status == 2) {
        if (active == 'startDate') {
          newStartDateType = type;
          newEndDateType = endDateType;
        } else {
          newStartDateType = startDateType;
          newEndDateType = type;
        }
      } else {
        newStartDateType = type;
        newEndDateType = type;
      }

      t.props.onChange({
        startDate: startDate,
        startDateType: newStartDateType,
        endDate: endDate,
        endDateType: newEndDateType
      });
    }
  }, {
    key: 'handleTitleClick',
    value: function handleTitleClick(e) {
      if (this.props.singleMode) {
        this.props.onTitleClick(e);
      }
    }

    /**
     * 当前时间是否在被选中的范围
     * @param {Date} date 当前时间
     * @param {Object} 由 processValue 导出的时间范围
     */

  }, {
    key: 'isInRange',
    value: function isInRange(date, value) {

      return date.getTime() >= value.startDate.getTime() && date.getTime() <= value.endDate.getTime();
    }
  }, {
    key: 'getType',
    value: function getType(date, value) {
      var type = '';
      ['FULL', 'AM', 'PM'].forEach(function (item, index) {
        if (date.getTime() == value.startDate.getTime() && new RegExp(item, 'i').test(value.startDateType) || date.getTime() == value.endDate.getTime() && new RegExp(item, 'i').test(value.endDateType)) {
          type = item;
        }
      });
      return type;
    }
  }, {
    key: 'renderDate',
    value: function renderDate(date, value) {
      var _classnames;

      var t = this;
      // TODO: tStatus 假休班
      // 只有开始和结束的日子可能出现上午和下午
      var type = t.getType(date, value);
      var now = new Date();
      var currentDate = t.state.currentDate;
      var cls = classnames((_classnames = {}, _defineProperty(_classnames, prefixClass('FB1 tap op'), true), _defineProperty(_classnames, prefixClass('now'), now.getTime() == date.getTime()), _defineProperty(_classnames, prefixClass('selected'), t.isInRange(date, value)), _defineProperty(_classnames, prefixClass('AM'), type == 'AM'), _defineProperty(_classnames, prefixClass('PM'), type == 'PM'), _defineProperty(_classnames, prefixClass('prev-month'), date.getMonth() < currentDate.getMonth() && date.getYear() === currentDate.getYear() || date.getYear() < currentDate.getYear()), _defineProperty(_classnames, prefixClass('next-month'), date.getMonth() > currentDate.getMonth() && date.getYear() === currentDate.getYear() || date.getYear() > currentDate.getYear()), _defineProperty(_classnames, prefixClass('weekend'), date.getDay() === 6 || date.getDay() === 0), _defineProperty(_classnames, t.handleExtraClass(date, value), true), _classnames));
      //在这里添加新功能，确定不可用日期
      var dateContent = React.createElement(
        'div',
        { key: date.getTime(), className: cls, onClick: t.handleClick.bind(t, new Date(date)) },
        React.createElement(
          'div',
          { className: prefixClass('date-point') },
          date.getDate()
        ),
        t.props.showHalfDay ? React.createElement(
          'div',
          { className: classnames(_defineProperty({}, prefixClass('date-tip'), true)) },
          t.props.showHalfDay ? t.locale['dayTipMap'][type] : ""
        ) : ''
      );
      return dateContent;
    }

    //给“天”的展示项目添加新的样式

  }, {
    key: 'handleExtraClass',
    value: function handleExtraClass(date, value) {
      //如果添加的是一个字符串
      if (typeof this.props.extraClass == 'string') {
        return this.props.extraClass;
      } else if (typeof this.props.extraClass == 'function') {
        return this.props.extraClass(date, value) || '';
      }
      return '';
    }
  }, {
    key: 'renderDatePanel',
    value: function renderDatePanel(value) {
      var t = this;
      var dateArrInAWeek = [];
      var weekArr = [];
      var flexBoxKey = 0;
      var currentDate = t.state.currentDate;

      var currentYear = currentDate.getFullYear();
      var currentMonth = currentDate.getMonth();
      var calendarCode = t.props.calendarCode;

      var now = new Date();
      var firstDateInStartMonth = new Date(new Date(currentDate).setDate(1));
      var changedDate = new Date(new Date(currentDate).setDate(1)); // 用于当月的循环复制
      var firstDayInStartMonth = firstDateInStartMonth.getDay();
      var firstDateShownInPanel = new Date(firstDateInStartMonth.setDate(firstDateInStartMonth.getDate() - firstDayInStartMonth));

      //计算上个月剩余补充天数
      for (var i = 0; i < firstDayInStartMonth; i++) {
        var _changedDate = new Date(firstDateShownInPanel);
        var date = new Date(_changedDate.setDate(_changedDate.getDate() + i));
        dateArrInAWeek.push(t.renderDate(date, value));
      }

      // 计算当前月天数

      while (changedDate.getMonth() == currentMonth) {
        flexBoxKey++;
        // 判断 dateArrInAWeek 数组是否已满 7 个，若满则推入 weekArr 数组
        if (dateArrInAWeek.length == 7) {
          weekArr.push(React.createElement(
            'div',
            { key: currentMonth + flexBoxKey, className: prefixClass('FBH') },
            dateArrInAWeek
          ));
          dateArrInAWeek = [];
        }
        dateArrInAWeek.push(t.renderDate(new Date(changedDate), value));
        changedDate.setDate(changedDate.getDate() + 1);
      }

      // 计算下个月剩余补充天数，如果下个月第一天恰好是周日，那么就没有必要渲染下个月了
      // 把最后一个 dateArrInAWeek 数组推进 weekArr 数组
      if (changedDate.getDay() == 0) {
        weekArr.push(React.createElement(
          'div',
          { key: "last", className: prefixClass('FBH') },
          dateArrInAWeek
        ));
      } else {
        var delta = 7 - changedDate.getDay();
        for (var _i = 0; _i < delta; _i++) {
          dateArrInAWeek.push(t.renderDate(new Date(changedDate), value));
          changedDate.setDate(changedDate.getDate() + 1);
        }
        weekArr.push(React.createElement(
          'div',
          { key: "last", className: prefixClass('FBH') },
          dateArrInAWeek
        ));
      }

      return weekArr;
    }
  }, {
    key: 'renderHalfDayButton',
    value: function renderHalfDayButton(date, value) {
      if (!this.props.showHalfDay) return;

      var t = this;
      var active = t.state.active;

      var type = t.getType(date, value);
      var am = React.createElement(
        'div',
        { key: 'tMorning', className: prefixClass("day morning tap op ") + (type == 'AM' ? 'now' : ''),
          onClick: t.handleTypeClick.bind(t, 'AM') },
        React.createElement(
          'span',
          null,
          t.locale['dayTipMap']['AM']
        )
      );
      var pm = React.createElement(
        'div',
        { key: 'tAfternoon', className: prefixClass("day afternoon tap op ") + (type == 'PM' ? 'now' : ''),
          onClick: t.handleTypeClick.bind(t, 'PM') },
        React.createElement(
          'span',
          null,
          t.locale['dayTipMap']['PM']
        )
      );
      var full = React.createElement(
        'div',
        { key: 'tFullDay', className: prefixClass("day fullday tap op ") + (type == 'FULL' ? 'now' : ''),
          onClick: t.handleTypeClick.bind(t, 'FULL') },
        React.createElement(
          'span',
          null,
          t.locale['dayTipMap']['FULL']
        )
      );

      // 处理被选中的日期，需判断当前是起点还是终点，若 开始时间 == 结束时间 则是起点

      //是否显示上午、下午
      if (value.startDate.getTime() === value.endDate.getTime()) {
        return [full, am, pm];
      } else {
        if (active == 'endDate') {
          return [full, am];
        } else {
          return [full, pm];
        }
      }
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle(value) {
      var t = this;
      var currentDate = t.state.currentDate;

      var str = '';
      switch (t.props.locale) {
        case 'zh-cn':
          str = currentDate.getFullYear() + '年' + (currentDate.getMonth() + 1) + '月';
          break;
        case 'en':
          str = t.locale['monthTitle'][currentDate.getMonth()] + ' ' + currentDate.getFullYear();
          break;
      }
      return str;
    }
  }, {
    key: 'renderHalfDay',
    value: function renderHalfDay() {
      var _classnames4;

      var t = this;
      var value = t.processValue();
      var active = t.state.active;

      var left = t.renderHalfDayButton(value[active], value);
      var selected = value[active].getDate();
      return React.createElement(
        'div',
        { className: classnames(_defineProperty({}, prefixClass("half-wrap FBH FBAC"), true)) },
        React.createElement(
          'div',
          { className: classnames((_classnames4 = {}, _defineProperty(_classnames4, prefixClass("selected-day"), true), _defineProperty(_classnames4, prefixClass("DN"), !t.props.showHalfDay), _classnames4)) },
          selected
        ),
        left,
        React.createElement('div', { className: prefixClass("FB1") })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var t = this;
      var value = t.processValue();
      var clearButton = '';
      var ret = '';
      var _t$props = t.props;
      var show = _t$props.show;
      var className = _t$props.className;
      var singleMode = _t$props.singleMode;
      var showHalfDay = _t$props.showHalfDay;


      if (show) {
        ret = this.renderDatePanel(value);
      }

      return React.createElement(
        'div',
        { className: prefixClass('month-panel') },
        React.createElement(
          'div',
          { className: prefixClass('tool FBH FBAC') },
          React.createElement('div', { className: prefixClass('FB1') }),
          React.createElement(
            'div',
            { className: prefixClass('btn prev-month tap op'), onClick: t.handlePrev.bind(t) },
            '<'
          ),
          React.createElement(
            'span',
            { className: prefixClass('text'), onClick: t.handleTitleClick.bind(t) },
            this.renderTitle(value)
          ),
          React.createElement(
            'div',
            { className: prefixClass('btn next-month tap op'), onClick: t.handleNext.bind(t) },
            '>'
          ),
          React.createElement('div', { className: prefixClass('FB1') })
        ),
        React.createElement(
          'div',
          { className: prefixClass('week FBH') },
          t.locale['weekTitle'].map(function (item, index) {
            return React.createElement(
              'div',
              { className: prefixClass('FB1 FBAC'), key: index },
              item
            );
          })
        ),
        React.createElement(
          'div',
          { className: prefixClass('month') },
          ret
        ),
        t.props.showHalfDay && t.renderHalfDay()
      );
    }
  }]);

  return Day;
}(React.Component);

Day.propTypes = {
  show: React.PropTypes.bool, // 是否显示
  singleMode: React.PropTypes.bool, // 是否是单选模式
  showHalfDay: React.PropTypes.bool, // 是否显示半天
  calendarCode: React.PropTypes.object, // 后端传来的 code
  value: React.PropTypes.oneOfType([// 默认值
  React.PropTypes.string, React.PropTypes.object]),
  extraClass: React.PropTypes.oneOfType([// 默认值
  React.PropTypes.string, React.PropTypes.func]),
  onSelecting: React.PropTypes.func, //当某一天被点击是触发事件，如果其值为false则不执行
  locale: React.PropTypes.string, // 国际化语言
  onChange: React.PropTypes.func, // value 变化时触发的回调
  onTitleClick: React.PropTypes.func // 点击标题时触发的回调，用于切换面板
};

Day.defaultProps = {
  show: true,
  singleMode: true,
  showHalfDay: true,
  locale: 'zh-cn',
  calendarCode: {},
  onChange: function onChange() {},
  onSelecting: function onSelecting() {},
  onTitleClick: function onTitleClick() {},
  extraClass: ''
};

Day.displayName = "Day";

module.exports = Day;
//# sourceMappingURL=data:application/json;base64,

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var i18n = require('../i18n');
var Context = require('@ali/tingle-context');
var prefixClass = Context.prefixClass;

var Year = function (_React$Component) {
  _inherits(Year, _React$Component);

  function Year(props) {
    _classCallCheck(this, Year);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Year).call(this, props));

    _this.state = {
      year: _this.getYear()
    };
    return _this;
  }

  _createClass(Year, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var t = this;
      var newState = {};
      if (t.processValue().startDate.getTime() !== t.processValue(nextProps).startDate.getTime()) {
        newState['year'] = t.getYear(nextProps);
      }
      t.setState(newState);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var t = this;
    }
  }, {
    key: 'getYear',
    value: function getYear(props) {
      var t = this;

      var _t$processValue = t.processValue(props);

      var startDate = _t$processValue.startDate;

      var year = new Date(startDate).getFullYear();
      year = year.toString().substring(0, 3) + '0';
      return parseInt(year);
    }
  }, {
    key: 'processValue',
    value: function processValue(props) {
      var t = this;
      props = props || t.props;
      if (_typeof(props.value) == 'object') {
        var _props$value = props.value;
        var startDate = _props$value.startDate;
        var endDate = _props$value.endDate;
      } else {
        var startDate = props.value;
      }
      return {
        startDate: new Date(startDate || 0),
        endDate: new Date(endDate || startDate || 0)
      };
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      var t = this;
      return t.state.year + '-' + (t.state.year + 9);
    }
  }, {
    key: 'handleListItemClick',
    value: function handleListItemClick(date) {
      var t = this;
      var value = t.processValue();
      date = new Date(date.setDate(value.startDate.getDate())).setMonth(value.startDate.getMonth());
      var newValue = {};
      if (!t.props.singleMode) {
        if (!!t.props.value.endDate) {
          newValue = {
            startDate: new Date(date).getTime(),
            endDate: ""
          };
        } else {
          // 需先判断选中日期和 startDate 的大小
          // 如果选中日期大于 startDate，则选中日期作为 endDate。
          if (new Date(date).getTime() > new Date(value.startDate).getTime()) {
            newValue = {
              startDate: new Date(value.startDate).getTime(),
              endDate: new Date(date).getTime()
            };
          }
          // 反之，则 startDate 作为新的 endDate，选中日期作为新的 startDate
          else {
              newValue = {
                startDate: new Date(date).getTime(),
                endDate: new Date(value.startDate).getTime()
              };
            }
        }
      } else {
        newValue = {
          startDate: new Date(date).getTime(),
          endDate: ""
        };
      }
      t.props.onChange(newValue);
    }
  }, {
    key: 'handlePrev',
    value: function handlePrev() {
      var t = this;
      t.setState({
        year: t.state.year - 10
      });
    }
  }, {
    key: 'handleNext',
    value: function handleNext() {
      var t = this;
      t.setState({
        year: t.state.year + 10
      });
    }
  }, {
    key: 'isItemActive',
    value: function isItemActive(index) {
      var t = this;
      var year = t.state.year;

      var _t$processValue2 = t.processValue();

      var startDate = _t$processValue2.startDate;
      var endDate = _t$processValue2.endDate;

      if (!startDate) {
        return false;
      }
      var startYear = new Date(startDate).getFullYear();
      var startMonth = new Date(startDate).getMonth();
      var now = year + index;
      var active = false;
      if (!!endDate) {
        var endYear = new Date(endDate).getFullYear();
        active = now >= startYear && now <= endYear;
      } else {
        active = now == startYear;
      }

      return active;
    }
  }, {
    key: 'renderYearList',
    value: function renderYearList() {
      var t = this;
      var months = i18n[t.props.locale]['monthTitle'];
      var year = t.state.year;

      var yearList = [];

      yearList.push(React.createElement(
        'div',
        { className: classnames(_defineProperty({}, prefixClass('year-list-item'), true)), key: 'prev', onClick: t.handlePrev.bind(t) },
        "..."
      ));

      for (var i = 0; i < 10; i++) {
        var _classnames2;

        yearList.push(React.createElement(
          'div',
          { className: classnames((_classnames2 = {}, _defineProperty(_classnames2, prefixClass('year-list-item'), true), _defineProperty(_classnames2, "active", t.isItemActive(i)), _classnames2)), key: i, onClick: t.handleListItemClick.bind(t, new Date(year + i + "")) },
          year + i
        ));
      }

      yearList.push(React.createElement(
        'div',
        { className: classnames(_defineProperty({}, prefixClass('year-list-item'), true)), key: 'next', onClick: t.handleNext.bind(t) },
        "..."
      ));

      return yearList;
    }
  }, {
    key: 'render',
    value: function render() {
      var t = this;
      return React.createElement(
        'div',
        { className: prefixClass("month-panel") },
        React.createElement(
          'div',
          { className: prefixClass("tool FBH FBAC") },
          React.createElement('div', { className: prefixClass("FB1") }),
          React.createElement(
            'div',
            { className: prefixClass("btn prev-month tap op"), onClick: this.handlePrev.bind(this) },
            '<'
          ),
          React.createElement(
            'span',
            { className: prefixClass("text") },
            t.getTitle()
          ),
          React.createElement(
            'div',
            { className: prefixClass("btn next-month tap op"), onClick: this.handleNext.bind(this) },
            '>'
          ),
          React.createElement('div', { className: prefixClass("FB1") })
        ),
        React.createElement(
          'div',
          { className: prefixClass("year-list") },
          t.renderYearList()
        )
      );
    }
  }]);

  return Year;
}(React.Component);

Year.displayName = "Year";
Year.defaultProps = {
  locale: 'zh-cn',
  onChange: function onChange() {},
  singleMode: false
};
Year.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onChange: React.PropTypes.func,
  singleMode: React.PropTypes.bool
};

module.exports = Year;
//# sourceMappingURL=data:application/json;base64,

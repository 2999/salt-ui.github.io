'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Calendar Component for tingle
 * @author wenzhao.fw
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */

var classnames = require('classnames');
var Formatter = require('uxcore-formatter');
var Layer = require('@ali/tingle-layer');
var i18n = require('./i18n');
var MonthCalendar = require('./MonthCalendar');
var YearCalendar = require('./YearCalendar');
var Day = require('./lib/Day');
var Month = require('./lib/Month');
var Year = require('./lib/Year');
var deepcopy = require('deepcopy');
var deepEqual = require('deep-equal');
var Context = require('@ali/tingle-context');
var prefixClass = Context.prefixClass;

// value 的格式：{startDate: '2016-01-02', startDateType: 'AM', endDate: '2016-01-03', endDateType: 'AM' }

var Calendar = function (_React$Component) {
    _inherits(Calendar, _React$Component);

    function Calendar(props) {
        _classCallCheck(this, Calendar);

        // value 可能是对象，为防止外部直接修改 props.value，造成 componentWillReceiveProps 出现问题
        // 故在此备份一份
        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Calendar).call(this, props));

        _this.value = deepcopy(props.value);
        _this.state = {
            value: deepcopy(props.value),
            panel: 'day'
        };
        return _this;
    }

    _createClass(Calendar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var t = this;
            t.locale = i18n[t.props.locale];
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var t = this;
            if (!deepEqual(nextProps.value, t.value)) {
                t.value = deepcopy(nextProps.value);
                t.setState({
                    value: deepcopy(nextProps.value)
                });
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange(value) {
            var t = this;
            var panelMap = {
                month: 'day',
                year: 'month'
            };
            var newState = {
                value: value
            };
            if (t.state.panel == 'month' || t.state.panel == 'year') {
                newState['panel'] = panelMap[t.state.panel];
            }
            t.setState(newState);
        }
    }, {
        key: 'handlePanelChange',
        value: function handlePanelChange() {
            var t = this;
            var panel = t.state.panel;

            if (panel == 'day') {
                panel = 'month';
            } else if (panel == 'month') {
                panel = 'year';
            }
            t.setState({
                panel: panel
            });
        }
    }, {
        key: 'handleCanel',
        value: function handleCanel() {
            var t = this;
            t.setState({
                panel: 'day'
            });
            t.props.onCancel();
        }
    }, {
        key: 'handleClear',
        value: function handleClear() {
            var t = this;
            t.setState({
                value: deepcopy(t.props.value)
            });
        }
    }, {
        key: 'handleOk',
        value: function handleOk() {
            var t = this;
            t.props.onOk(deepcopy(t.state.value));
        }
    }, {
        key: 'renderPanel',
        value: function renderPanel() {
            var t = this;
            var _t$state = t.state;
            var value = _t$state.value;
            var panel = _t$state.panel;
            var _t$props = t.props;
            var singleMode = _t$props.singleMode;
            var locale = _t$props.locale;
            var showHalfDay = _t$props.showHalfDay;

            var panelProps = {
                value: value,
                onChange: t.handleChange.bind(t),
                singleMode: singleMode,
                locale: locale,
                showHalfDay: showHalfDay,
                onTitleClick: t.handlePanelChange.bind(t),
                onSelecting: t.props.onSelecting,
                extraClass: t.props.extraClass
            };
            if (panel == 'day') {
                return React.createElement(Day, panelProps);
            } else {
                panelProps['singleMode'] = true;
                if (panel == 'month') {
                    return React.createElement(Month, panelProps);
                } else {
                    return React.createElement(Year, panelProps);
                }
            }
        }
    }, {
        key: 'renderTopPanel',
        value: function renderTopPanel() {
            return React.createElement(
                'div',
                { className: classnames(_defineProperty({}, prefixClass("top-panel"), true)) },
                React.createElement(
                    'span',
                    { className: prefixClass("top-panel-cancel"), onClick: this.handleCanel.bind(this) },
                    this.locale['button']['cancel']
                ),
                React.createElement(
                    'span',
                    { className: prefixClass("top-panel-title") },
                    this.props.topPanelTitle || '选择时间'
                ),
                React.createElement(
                    'span',
                    { className: prefixClass("top-panel-confirm"), onClick: this.handleOk.bind(this) },
                    this.locale['button']['confirm']
                )
            );
        }
    }, {
        key: 'renderBottomPanel',
        value: function renderBottomPanel() {
            var _classnames3;

            var t = this;
            return React.createElement(
                'div',
                { className: classnames(_defineProperty({}, prefixClass("operate"), true)) },
                React.createElement(
                    'span',
                    { className: prefixClass("cancel tap op"), onClick: this.handleCanel.bind(this) },
                    t.locale['button']['cancel']
                ),
                ' ',
                React.createElement(
                    'span',
                    { className: prefixClass("reset"),
                        onClick: this.handleClear.bind(this) },
                    ' ',
                    t.locale['button']['clear'],
                    ' '
                ),
                ' ',
                React.createElement(
                    'span',
                    { className: classnames((_classnames3 = {}, _defineProperty(_classnames3, prefixClass("confirm tap op"), true), _defineProperty(_classnames3, prefixClass('gray'), !t.state.value.startDate), _classnames3)),
                        onClick: this.handleOk.bind(this) },
                    ' ',
                    t.locale['button']['confirm'],
                    ' '
                ),
                ' '
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _classnames4;

            var t = this;
            var clearButton = '';
            var value = t.state.value;
            var _t$props2 = t.props;
            var visible = _t$props2.visible;
            var className = _t$props2.className;
            var singleMode = _t$props2.singleMode;
            var autoFinish = _t$props2.autoFinish;
            var locale = _t$props2.locale;
            var showHalfDay = _t$props2.showHalfDay;

            // Calculate the height of the current container

            var clientHeight = document.documentElement.clientHeight;
            var height = 352;
            !!t.props.showTopPanel && (height += 44);
            !!t.props.showHalfDay && (height += 120);

            return React.createElement(
                Layer,
                { visible: visible },
                React.createElement(
                    'div',
                    { className: prefixClass("calendar-container"), style: {
                            height: clientHeight,
                            // Scale the view to ensure user can see the whole widget 
                            // on the small screen device
                            transform: height >= clientHeight ? 'scale(' + ((clientHeight / height).toFixed(3) - 0.15) + ')' : ''
                        } },
                    React.createElement(
                        'div',
                        { className: classnames((_classnames4 = {}, _defineProperty(_classnames4, prefixClass("calendar"), true), _defineProperty(_classnames4, className, !!className), _classnames4)), style: {
                                display: visible ? 'block' : 'block',
                                height: height
                            } },
                        t.props.showTopPanel && t.renderTopPanel(),
                        t.renderPanel()
                    )
                )
            );
        }
    }]);

    return Calendar;
}(React.Component);

Calendar.propTypes = {
    className: React.PropTypes.string,
    visible: React.PropTypes.bool, // 是否显示
    calendarCode: React.PropTypes.object, // 后端传来的 code
    value: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object]), // 默认值
    locale: React.PropTypes.string, // 国际化语言
    singleMode: React.PropTypes.bool, // 是否是单选模式
    onCancel: React.PropTypes.func, // 取消选择时触发的回调
    onOk: React.PropTypes.func, // 返回值时触发的回调
    onSelecting: React.PropTypes.func // 开始选择时的回调
};

Calendar.defaultProps = {
    visible: true,
    locale: 'zh-cn',
    calendarCode: {},
    singleMode: true,
    showHalfDay: false,
    showTopPanel: true,
    value: {
        startDate: new Date().getTime(),
        startDateType: 'FULL',
        endDate: new Date().getTime(),
        endDateType: 'FULL'
    },
    onCancel: function onCancel() {},
    onOk: function onOk() {},
    onSelecting: function onSelecting() {}
};

Calendar.MonthCalendar = MonthCalendar;
Calendar.YearCalendar = YearCalendar;

Calendar.displayName = "Calendar";
module.exports = Calendar;
//# sourceMappingURL=data:application/json;base64,

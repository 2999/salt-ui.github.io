'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var classnames = require('classnames');
var deepcopy = require('deepcopy');
var deepEqual = require('deep-equal');
var i18n = require('./i18n');

var Layer = require('@ali/tingle-layer');
var Formatter = require('uxcore-formatter');
var Month = require('./lib/Month');
var Year = require('./lib/Year');

var Context = require('@ali/tingle-context');
var prefixClass = Context.prefixClass;

var MonthCalendar = function (_React$Component) {
  _inherits(MonthCalendar, _React$Component);

  function MonthCalendar(props) {
    _classCallCheck(this, MonthCalendar);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MonthCalendar).call(this, props));

    _this.value = deepcopy(props.value);
    _this.state = {
      value: deepcopy(props.value),
      panel: 'month'
    };
    return _this;
  }

  _createClass(MonthCalendar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var t = this;
      t.locale = i18n[t.props.locale];
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var t = this;
      if (!deepEqual(nextProps.value, t.value)) {
        t.value = deepcopy(nextProps.value);
        t.setState({
          value: deepcopy(nextProps.value)
        });
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(value) {
      var t = this;
      var newState = {
        value: value
      };
      if (t.state.panel == 'year') {
        newState['panel'] = 'month';
      }
      t.setState(newState);
    }
  }, {
    key: 'handleCanel',
    value: function handleCanel() {
      var t = this;
      t.props.onCancel();
    }
  }, {
    key: 'handleClear',
    value: function handleClear() {
      var t = this;
      t.setState({
        value: deepcopy(t.props.value)
      });
    }
  }, {
    key: 'handleOk',
    value: function handleOk() {
      var t = this;
      var _t$state = t.state;
      var startDate = _t$state.startDate;
      var endDate = _t$state.endDate;

      if (!!t.state.value.startDate) {
        t.props.onOk(t.state.value);
      }
    }
  }, {
    key: 'handlePanelChange',
    value: function handlePanelChange() {
      var t = this;
      var panel = t.state.panel;

      if (panel == 'month') {
        panel = 'year';
      }
      t.setState({
        panel: panel
      });
    }
  }, {
    key: 'renderTopPanel',
    value: function renderTopPanel() {
      return React.createElement(
        'div',
        { className: classnames(_defineProperty({}, prefixClass("top-panel"), true)) },
        React.createElement(
          'span',
          { className: prefixClass("top-panel-cancel"), onClick: this.handleCanel.bind(this) },
          this.locale['button']['cancel']
        ),
        React.createElement(
          'span',
          { className: prefixClass("top-panel-title") },
          this.props.topPanelTitle || '选择时间'
        ),
        React.createElement(
          'span',
          { className: prefixClass("top-panel-confirm"), onClick: this.handleOk.bind(this) },
          this.locale['button']['confirm']
        )
      );
    }
  }, {
    key: 'renderPanel',
    value: function renderPanel() {
      var t = this;
      var _t$state2 = t.state;
      var value = _t$state2.value;
      var panel = _t$state2.panel;
      var _t$props = t.props;
      var singleMode = _t$props.singleMode;
      var locale = _t$props.locale;
      var showHalfDay = _t$props.showHalfDay;

      var panelProps = {
        value: value,
        onChange: t.handleChange.bind(t),
        singleMode: singleMode,
        locale: locale,
        showHalfDay: showHalfDay,
        onTitleClick: t.handlePanelChange.bind(t)
      };
      if (panel == 'month') {
        return React.createElement(Month, panelProps);
      } else {
        panelProps['singleMode'] = true;
        return React.createElement(Year, panelProps);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames2;

      var t = this;
      var _t$props2 = t.props;
      var visible = _t$props2.visible;
      var className = _t$props2.className;
      var singleMode = _t$props2.singleMode;

      var button = t.locale['button'];

      // Calculate the height of the current container
      var clientHeight = document.documentElement.clientHeight;
      var height = 230;
      !!t.props.showTopPanel && (height += 44);
      !!t.props.showHalfDay && (height += 120);

      return React.createElement(
        Layer,
        { visible: visible },
        React.createElement(
          'div',
          { className: prefixClass("calendar-container"), style: {
              height: clientHeight,
              // Scale the view to ensure user can see the whole widgit 
              // on the small screen device
              transform: height >= clientHeight ? 'scale(' + ((clientHeight / height).toFixed(3) - 0.15) + ')' : ''
            } },
          React.createElement(
            'div',
            { className: classnames((_classnames2 = {}, _defineProperty(_classnames2, prefixClass("calendar"), true), _defineProperty(_classnames2, className, !!className), _classnames2)), style: {
                display: visible ? 'block' : 'none',
                height: height
              } },
            t.props.showTopPanel && t.renderTopPanel(),
            t.renderPanel()
          )
        )
      );
    }
  }]);

  return MonthCalendar;
}(React.Component);

MonthCalendar.displayName = "MonthCalendar";
MonthCalendar.defaultProps = {
  locale: 'zh-cn',
  onCancel: function onCancel() {},
  onOk: function onOk() {},
  value: {
    startDate: new Date().getTime(),
    startDateType: 'FULL',
    endDate: new Date().getTime(),
    endDateType: 'FULL'
  },
  showTopPanel: true,
  singleMode: false
};
MonthCalendar.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onCancel: React.PropTypes.func,
  onOk: React.PropTypes.func,
  visible: React.PropTypes.bool,
  singleMode: React.PropTypes.bool
};

module.exports = MonthCalendar;
//# sourceMappingURL=data:application/json;base64,

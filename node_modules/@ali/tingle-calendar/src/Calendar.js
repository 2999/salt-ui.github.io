/**
 * Calendar Component for tingle
 * @author wenzhao.fw
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */

let classnames = require('classnames');
let Formatter = require('uxcore-formatter');
let Layer = require('@ali/tingle-layer');
let i18n = require('./i18n');
let MonthCalendar = require('./MonthCalendar');
let YearCalendar = require('./YearCalendar');
let Day = require('./lib/Day');
let Month = require('./lib/Month');
let Year = require('./lib/Year');
let deepcopy = require('deepcopy');
let deepEqual = require('deep-equal');
let Context = require('@ali/tingle-context');
let prefixClass = Context.prefixClass;

// value 的格式：{startDate: '2016-01-02', startDateType: 'AM', endDate: '2016-01-03', endDateType: 'AM' }
class Calendar extends React.Component {
    constructor(props) {
        super(props);
        // value 可能是对象，为防止外部直接修改 props.value，造成 componentWillReceiveProps 出现问题
        // 故在此备份一份
        this.value = deepcopy(props.value);
        this.state = {
            value: deepcopy(props.value),
            panel: 'day'
        }
    }

    componentWillMount() {
        let t = this;
        t.locale = i18n[t.props.locale];
    }

    componentWillReceiveProps(nextProps) {
        let t = this;
        if (!deepEqual(nextProps.value, t.value)) {
            t.value = deepcopy(nextProps.value);
            t.setState({
                value: deepcopy(nextProps.value)
            })
        }
    }

    handleChange(value) {
        let t = this;
        let panelMap = {
            month: 'day',
            year: 'month'
        };
        let newState = {
            value: value
        };
        if (t.state.panel == 'month' || t.state.panel == 'year') {
            newState['panel'] = panelMap[t.state.panel];
        }
        t.setState(newState);
    }

    handlePanelChange() {
        let t = this;
        let { panel } = t.state;
        if (panel == 'day') {
            panel = 'month';
        } else if (panel == 'month') {
            panel = 'year';
        }
        t.setState({
            panel: panel
        })
    }

    handleCanel() {
        let t = this;
        t.setState({
            panel: 'day'
        })
        t.props.onCancel();
    }

    handleClear() {
        let t = this;
        t.setState({
            value: deepcopy(t.props.value)
        })
    }

    handleOk() {
        let t = this;
        t.props.onOk(deepcopy(t.state.value));
    }
    
    renderPanel() {
        let t = this;
        let { value, panel } = t.state;
        let { singleMode, locale, showHalfDay } = t.props;
        let panelProps = {
            value: value,
            onChange: t.handleChange.bind(t),
            singleMode: singleMode,
            locale: locale,
            showHalfDay: showHalfDay,
            onTitleClick: t.handlePanelChange.bind(t),
            onSelecting: t.props.onSelecting,
            extraClass: t.props.extraClass
        };
        if (panel == 'day') {
            return <Day {...panelProps}/>
        } else {
            panelProps['singleMode'] = true;
            if (panel == 'month') {
                return <Month {...panelProps}/>
            } else {
                return <Year {...panelProps}/>
            }
        }
    }

    renderTopPanel() {
        return <div className={classnames({[prefixClass("top-panel")]: true})}>
      <span className={prefixClass("top-panel-cancel")} onClick={this.handleCanel.bind(this)}>{this.locale['button']['cancel']}</span>
      <span className={prefixClass("top-panel-title")}>{this.props.topPanelTitle || '选择时间'}</span>
      <span className={prefixClass("top-panel-confirm")} onClick={this.handleOk.bind(this)}>{this.locale['button']['confirm']}</span>
    </div>
    }

    renderBottomPanel() {
        let t = this;
        return <div className = {
                classnames({
                    [prefixClass("operate")]: true
                })
            } >
            <span className={prefixClass("cancel tap op")} onClick={this.handleCanel.bind(this)}>{t.locale['button']['cancel']}</span> < span className = { prefixClass("reset") }
        onClick = { this.handleClear.bind(this) } > { t.locale['button']['clear'] } < /span> < span className = {
        classnames({
            [prefixClass("confirm tap op")]: true,
            [prefixClass('gray')]: !t.state.value.startDate
        })
    }
    onClick = { this.handleOk.bind(this) } > { t.locale['button']['confirm'] } < /span> < /div >
}

render() {
    let t = this;
    let clearButton = '';
    let { value } = t.state;
    let { visible, className, singleMode, autoFinish, locale, showHalfDay } = t.props;

    // Calculate the height of the current container
    let clientHeight = document.documentElement.clientHeight
    let height = 352;
    !!t.props.showTopPanel && (height += 44);
    !!t.props.showHalfDay && (height += 120);

    return (
        <Layer visible={visible}>
        <div className={prefixClass("calendar-container")} style={{
          height: clientHeight,
          // Scale the view to ensure user can see the whole widget 
          // on the small screen device
          transform: height >= clientHeight ? 'scale(' + ((clientHeight / height).toFixed(3) - 0.15 )+ ')' : ''
        }}>
          <div className={classnames({
            [prefixClass("calendar")]: true,
            [className]: !!className
          })} style={{
                      display: visible ? 'block' : 'block',
                      height: height
                  }}>
            {t.props.showTopPanel && t.renderTopPanel()}
            {t.renderPanel()}
          </div>
        </div>
      </Layer>
    );
}

}


Calendar.propTypes = {
    className: React.PropTypes.string,
    visible: React.PropTypes.bool, // 是否显示
    calendarCode: React.PropTypes.object, // 后端传来的 code
    value: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.object
    ]), // 默认值
    locale: React.PropTypes.string, // 国际化语言
    singleMode: React.PropTypes.bool, // 是否是单选模式
    onCancel: React.PropTypes.func, // 取消选择时触发的回调
    onOk: React.PropTypes.func, // 返回值时触发的回调
    onSelecting: React.PropTypes.func // 开始选择时的回调
}

Calendar.defaultProps = {
    visible: true,
    locale: 'zh-cn',
    calendarCode: {},
    singleMode: true,
    showHalfDay: false,
    showTopPanel: true,
    value: {
        startDate: new Date().getTime(),
        startDateType: 'FULL',
        endDate: new Date().getTime(),
        endDateType: 'FULL'
    },
    onCancel: () => {},
    onOk: () => {},
    onSelecting:()=>{}
}


Calendar.MonthCalendar = MonthCalendar;
Calendar.YearCalendar = YearCalendar;

Calendar.displayName = "Calendar";
module.exports = Calendar;

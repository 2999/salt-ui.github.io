let classnames = require('classnames');
let i18n = require('../i18n');
let Context = require('@ali/tingle-context');
let prefixClass = Context.prefixClass;

class Year extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      year: this.getYear()
    };
  }

  componentWillReceiveProps(nextProps) {
    let t = this;
    let newState = {};
    if (t.processValue().startDate.getTime() !== t.processValue(nextProps).startDate.getTime()) {
      newState['year'] = t.getYear(nextProps);
    }
    t.setState(newState);
  }

  componentWillMount() {
    let t = this;
  }

  getYear(props) {
    let t = this;
    let {startDate} = t.processValue(props);
    let year = new Date(startDate).getFullYear();
    year = year.toString().substring(0,3) + '0';
    return parseInt(year);
  }

  processValue(props) {
    let t = this;
    props = props || t.props;
    if (typeof props.value == 'object') {
      var {startDate, endDate} = props.value;
    }

    else {
      var startDate = props.value;
    }
    return {
      startDate: new Date(startDate || 0),
      endDate: new Date(endDate || startDate || 0),
    }
  }



  getTitle() {
    let t = this;
    return t.state.year + '-' + (t.state.year + 9);
  }

  handleListItemClick(date) {
    let t = this;
    let value = t.processValue()
    date = new Date(date.setDate(value.startDate.getDate())).setMonth(value.startDate.getMonth());
    let newValue = {};
    if (!t.props.singleMode) {
      if (!!t.props.value.endDate) {
        newValue = {
          startDate: new Date(date).getTime(),
          endDate: ""
        };
      }
      else {
        // 需先判断选中日期和 startDate 的大小
        // 如果选中日期大于 startDate，则选中日期作为 endDate。
        if (new Date(date).getTime() > new Date(value.startDate).getTime()) {
          newValue = {
            startDate: new Date(value.startDate).getTime(),
            endDate: new Date(date).getTime()
          };
        }
        // 反之，则 startDate 作为新的 endDate，选中日期作为新的 startDate
        else {
          newValue = {
            startDate: new Date(date).getTime(),
            endDate: new Date(value.startDate).getTime()
          };
        }
      }
    }
    else {
      newValue = {
        startDate: new Date(date).getTime(),
        endDate: ""
      };
    }
    t.props.onChange(newValue);
  }

  handlePrev() {
    let t = this;
    t.setState({
      year: t.state.year - 10
    })
  }

  handleNext() {
    let t = this;
    t.setState({
      year: t.state.year + 10
    })
  }

  isItemActive(index) {
    let t = this;
    let {year} = t.state;
    let {startDate, endDate} = t.processValue();
    if (!startDate) {
      return false
    }
    let startYear = new Date(startDate).getFullYear();
    let startMonth = new Date(startDate).getMonth();
    let now = year + index;
    let active = false;
    if (!!endDate) {
      let endYear = new Date(endDate).getFullYear();
      active = (now >= startYear && now <= endYear);
    }
    else {
      active = (now == startYear)
    }

    return active;
  }

  renderYearList() {
    let t = this;
    let months = i18n[t.props.locale]['monthTitle'];
    let {year} = t.state;
    let yearList = [];

    yearList.push(<div className={classnames({
      [prefixClass('year-list-item')]: true
    })} key="prev" onClick={t.handlePrev.bind(t)}>{"..."}</div>)

    for (let i = 0; i < 10; i++) {
      yearList.push(<div className={classnames({
        [prefixClass('year-list-item')]: true,
        "active": t.isItemActive(i)
      })} key={i} onClick={t.handleListItemClick.bind(t, new Date(year + i + ""))}>{year + i}</div>)
    }

    yearList.push(<div className={classnames({
      [prefixClass('year-list-item')]: true
    })} key="next" onClick={t.handleNext.bind(t)}>{"..."}</div>)

    return yearList
  }

  render() {
    let t = this;
    return (
      <div className={prefixClass("month-panel")}>
        <div className={prefixClass("tool FBH FBAC")}>
            <div className={prefixClass("FB1")}></div>
            <div className={prefixClass("btn prev-month tap op")} onClick={this.handlePrev.bind(this)}>&lt;</div>
            <span className={prefixClass("text")}>{t.getTitle()}</span>
            <div className={prefixClass("btn next-month tap op")} onClick={this.handleNext.bind(this)}>&gt;</div>
            <div className={prefixClass("FB1")}></div>
          </div>
          <div className={prefixClass("year-list")}>
            {t.renderYearList()}
          </div>
      </div>
    )
  }
}

Year.displayName = "Year";
Year.defaultProps = {
  locale: 'zh-cn',
  onChange: () => {
  },
  singleMode: false
};
Year.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onChange: React.PropTypes.func,
  singleMode: React.PropTypes.bool
};

module.exports = Year;

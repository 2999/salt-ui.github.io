let classnames = require('classnames');
let i18n = require('../i18n');
let Context = require('@ali/tingle-context');
let prefixClass = Context.prefixClass;


// value 的格式：{startDate: '2016-01-02', endDate: '2016-01-03'}
class Month extends React.Component {
  constructor(props) {
    super(props);
    let date = this.processValue();
    this.state = {
      year: new Date(date.startDate).getFullYear()
    };
  }

  processValue(props) {
    let t = this;
    props = props || t.props;
    if (typeof props.value == 'object') {
      var {startDate, endDate} = props.value;
    }

    else {
      var startDate = props.value;
    }
    return {
      startDate: new Date(startDate || 0),
      endDate: new Date(endDate || startDate || 0),
    }
  }

  componentWillReceiveProps(nextProps) {
    let t = this;
    let newState = {};
    if (t.processValue().startDate.getTime() !== t.processValue(nextProps).startDate.getTime()) {
      newState['year'] = t.processValue(nextProps).startDate.getFullYear();
    }
    t.setState(newState);
  }


  getTitle() {
    let t = this;
    return t.state.year;
  }

  handleListItemClick(date) {
    let t = this;
    let value = t.processValue();
    date.setDate(value.startDate.getDate());
    let {startDate, endDate} = value;
    let newValue = {}

    if (!t.props.singleMode) {
      if (startDate.getTime() !== endDate.getTime()) {
        newValue = {
          startDate: new Date(date).getTime(),
          endDate: ""
        };
      }
      else {
        // 需先判断选中日期和 startDate 的大小
        // 如果选中日期大于 startDate，则选中日期作为 endDate。
        if (new Date(date).getTime() > new Date(startDate).getTime()) {
          newValue = {
            startDate: new Date(startDate).getTime(),
            endDate: new Date(date).getTime()
          };
        }
        // 反之，则 startDate 作为新的 endDate，选中日期作为新的 startDate
        else {
          newValue = {
            startDate: new Date(date).getTime(),
            endDate: new Date(startDate).getTime()
          };
        }
      }
    }
    else {
      newValue = {
        startDate: new Date(date).getTime(),
        endDate: ""
      };
    }

    t.props.onChange(newValue);
  }

  handlePrev() {
    let t = this;
    t.setState({
      year: t.state.year - 1
    })
  }

  handleNext() {
    let t = this;
    t.setState({
      year: t.state.year + 1
    })
  }

  handleTitleClick() {
    if (this.props.singleMode) {
      this.props.onTitleClick();
    }
  }


  isItemActive(index) {
    let t = this;
    let {year} = t.state;
    let {startDate, endDate} = t.processValue();
    if (!startDate) {
      return false
    }
    let startYear = new Date(startDate).getFullYear();
    let startMonth = new Date(startDate).getMonth();
    let active = false;
    if (!!endDate) {
      let endYear = new Date(endDate).getFullYear();
      let endMonth = new Date(endDate).getMonth();
      if (startYear != endYear) {
        active = ((year == startYear && index >= startMonth) ||
        (year > startYear && year < endYear) ||
        (year == endYear && index <= endMonth));
      }
      else {
        active = (year == startYear && index <= endMonth && index >= startMonth);
      }
    }
    else {
      active = (year == startYear && index == startMonth)
    }

    return active;
  }

  renderMonthList() {
    let t = this;
    let months = i18n[t.props.locale]['monthTitle'];
    let {year} = t.state;

    return months.map((month, index) => {
      return <div className={classnames({
                [prefixClass('month-list-item')]: true,
                "active": t.isItemActive(index)
            })} key={index} onClick={t.handleListItemClick.bind(t, new Date(year, index))}>{month}</div>
    })
  }

  render() {
    let t = this;
    return (
      <div className={prefixClass('month-panel')}>
        <div className={prefixClass('tool FBH FBAC')}>
            <div className={prefixClass('FB1')}></div>
            <div className={prefixClass('btn prev-month tap op')} onClick={this.handlePrev.bind(this)}>&lt;</div>
            <span className={prefixClass('text')} onClick={t.handleTitleClick.bind(t)}>{t.getTitle()}</span>
            <div className={prefixClass('btn next-month tap op')} onClick={this.handleNext.bind(this)}>&gt;</div>
            <div className={prefixClass('FB1')}></div>
          </div>
          <div className={prefixClass('month-list')}>
            {t.renderMonthList()}
          </div>
      </div>
    )
  }
}

Month.displayName = "Month";
Month.defaultProps = {
  locale: 'zh-cn',
  onChange: () => {
  },
  onTitleClick: () => {
  },
  singleMode: false
};
Month.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onChange: React.PropTypes.func,
  onTitleClick: React.PropTypes.func,
  singleMode: React.PropTypes.bool
};

module.exports = Month;

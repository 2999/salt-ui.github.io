let classnames = require('classnames');
let deepcopy = require('deepcopy');
let deepEqual = require('deep-equal');
let i18n = require('./i18n');

let Layer = require('@ali/tingle-layer');
let Formatter = require('uxcore-formatter');
let Month = require('./lib/Month');
let Year = require('./lib/Year');

let Context = require('@ali/tingle-context');
let prefixClass = Context.prefixClass;

class MonthCalendar extends React.Component {
  constructor(props) {
    super(props);
    this.value = deepcopy(props.value);
    this.state = {
      value: deepcopy(props.value),
      panel: 'month'
    }
  }

  componentWillMount() {
    let t = this;
    t.locale = i18n[t.props.locale];
  }

  componentWillReceiveProps(nextProps) {
    let t = this;
    if (!deepEqual(nextProps.value, t.value)) {
      t.value = deepcopy(nextProps.value);
      t.setState({
        value: deepcopy(nextProps.value)
      })
    }
  }

  handleChange(value) {
    let t = this;
    let newState = {
      value: value
    };
    if (t.state.panel == 'year') {
      newState['panel'] = 'month';
    }
    t.setState(newState);
  }

  handleCanel() {
    let t = this;
    t.props.onCancel()
  }

  handleClear() {
    let t = this;
    t.setState({
      value: deepcopy(t.props.value)
    })
  }

  handleOk() {
    let t = this;
    let {startDate, endDate} = t.state;
    if (!!t.state.value.startDate) {
      t.props.onOk(t.state.value);
    }
  }

  handlePanelChange() {
    let t = this;
    let {panel} = t.state;
    if (panel == 'month') {
      panel = 'year';
    }
    t.setState({
      panel: panel
    })
  }

  renderTopPanel() {
    return <div className={classnames({[prefixClass("top-panel")]: true})}>
      <span className={prefixClass("top-panel-cancel")} onClick={this.handleCanel.bind(this)}>{this.locale['button']['cancel']}</span>
      <span className={prefixClass("top-panel-title")}>{this.props.topPanelTitle || '选择时间'}</span>
      <span className={prefixClass("top-panel-confirm")} onClick={this.handleOk.bind(this)}>{this.locale['button']['confirm']}</span>
    </div>
  }

  renderPanel() {
    let t = this;
    let {value, panel} = t.state;
    let {singleMode, locale, showHalfDay} = t.props;
    let panelProps = {
      value: value, 
      onChange: t.handleChange.bind(t), 
      singleMode: singleMode, 
      locale: locale, 
      showHalfDay: showHalfDay,
      onTitleClick: t.handlePanelChange.bind(t)
    };
    if (panel == 'month') {
      return <Month {...panelProps}/>
    }
    else {
      panelProps['singleMode'] = true;
      return <Year {...panelProps}/>
    }
  }

  render() {
    let t = this;
    let {visible, className, singleMode} = t.props;
    let button = t.locale['button'];

    // Calculate the height of the current container
    let clientHeight = document.documentElement.clientHeight
    let height = 230
    !!t.props.showTopPanel && (height += 44); 
    !!t.props.showHalfDay && (height += 120); 

    return (
      <Layer visible={visible}>
        <div className={prefixClass("calendar-container")} style={{
          height: clientHeight,
          // Scale the view to ensure user can see the whole widgit 
          // on the small screen device
          transform: height >= clientHeight ? 'scale(' + ((clientHeight / height).toFixed(3) - 0.15 )+ ')' : ''
        }}>
        <div className={classnames({
                    [prefixClass("calendar")]: true,
                    [className]: !!className
                })} style={{
                    display: visible ? 'block' : 'none',
                    height: height
                }}>
          {t.props.showTopPanel && t.renderTopPanel()}
          {t.renderPanel()}
        </div>
        </div>
      </Layer>
    )
  }
}

MonthCalendar.displayName = "MonthCalendar";
MonthCalendar.defaultProps = {
  locale: 'zh-cn',
  onCancel: () => {
  },
  onOk: () => {
  },
  value: {
    startDate: new Date().getTime(),
    startDateType: 'FULL',
    endDate: new Date().getTime(),
    endDateType: 'FULL'
  },
  showTopPanel: true,
  singleMode: false
};
MonthCalendar.propTypes = {
  value: React.PropTypes.object,
  locale: React.PropTypes.string,
  onCancel: React.PropTypes.func,
  onOk: React.PropTypes.func,
  visible: React.PropTypes.bool,
  singleMode: React.PropTypes.bool
};

module.exports = MonthCalendar;

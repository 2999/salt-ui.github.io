'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Avatar Component for tingle
 * @author
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var classnames = require('classnames');

var _require = require('@ali/tingle-style');

var unitize = _require.unitize;

var Context = require('@ali/tingle-context');
var avatarColors = ["#FF8170", "#F5B153", "#56c8e8", "#79CC70", "#52bafa", "#9e9ee6"];
var defaultSrc = 'https://img.alicdn.com/tps/TB1.IgIKpXXXXbgXpXXXXXXXXXX-116-116.png';
var global = Context.getGlobal('avatar') || {};

var Avatar = function (_React$Component) {
    _inherits(Avatar, _React$Component);

    function Avatar(props) {
        _classCallCheck(this, Avatar);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Avatar).call(this, props));

        var size = unitize(props.size);
        _this.style = {
            width: size,
            height: size,
            lineHeight: size,
            fontSize: unitize(props.fontSize)
        };
        return _this;
    }

    _createClass(Avatar, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            for (var key in this.props) {
                if (this.props[key] !== nextProps[key]) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'render',
        value: function render() {

            var t = this;
            if (!t.props.name || t.props.src) {
                return React.createElement('img', { ref: 'root', className: classnames(Context.prefixClass('avatar'), _defineProperty({}, t.props.className, !!t.props.className)), src: t.props.src || t.props.defaultSrc, style: t.style });
            }
            if (t.props.defaultColor) {
                t.style.backgroundColor = t.props.defaultColor;
            } else {
                var hashCode = t.props.hashCode(t.props.name, t.props.isLong);
                t.style.backgroundColor = t.props.colors[Math.abs(hashCode) % t.props.colors.length];
            }
            return React.createElement(
                'div',
                { ref: 'root', className: classnames(Context.prefixClass('avatar'), _defineProperty({}, t.props.className, !!t.props.className)), style: this.style },
                Avatar.formatName(t.props.name)
            );
        }
    }]);

    return Avatar;
}(React.Component);

Avatar.hashCode = function (strKey, isLong) {
    var intValue = function intValue(num) {
        var MAX_VALUE = 0x7fffffff;
        var MIN_VALUE = -0x80000000;
        if (num > MAX_VALUE || num < MIN_VALUE) {
            return num &= 0xFFFFFFFF;
        }
        return num;
    };

    var hash = 0;
    if (typeof strKey === 'string') {
        for (var i = 0, l = strKey.length; i < l; i++) {
            hash = hash * 31 + strKey.charCodeAt(i);
            if (!isLong) {
                hash = intValue(hash);
            }
        }
    }
    return hash;
};

Avatar.formatName = function (name) {
    var firstChar = name.slice(0, 1);
    if (/^[A-Za-z]+$/.test(firstChar)) {
        return firstChar.toUpperCase();
    }
    if (name.length === 3) {
        return name.slice(1, 3);
    }
    if (name.length > 3) {
        return name.slice(0, 2);
    }
    return name;
};

Avatar.defaultProps = {
    className: '',
    name: '',
    src: '',
    defaultColor: '',
    colors: global.colors || avatarColors,
    defaultSrc: global.defaultSrc || defaultSrc,
    hashCode: global.hashCode || Avatar.hashCode,
    isLong: false,
    size: 40,
    fontSize: 12
};

// http://facebook.github.io/react/docs/reusable-components.html
Avatar.propTypes = {
    className: React.PropTypes.string,
    size: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    fontSize: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    name: React.PropTypes.string,
    defaultColor: React.PropTypes.string,
    defaultSrc: React.PropTypes.string,
    src: React.PropTypes.string,
    colors: React.PropTypes.array,
    isLong: React.PropTypes.bool,
    hashCode: React.PropTypes.func
};

Avatar.displayName = 'Avatar';

module.exports = Avatar;
//# sourceMappingURL=data:application/json;base64,

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * SearchBar Component for tingle
 * @author zhouquan.yezq
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var classnames = require('classnames');
var debounce = require('lodash/debounce');

var Context = require('@ali/tingle-context');
var Icon = require('@ali/tingle-icon');
var locale = require('./locale');
var SearchHistory = require('./SearchHistory');

var addUrlParam = function addUrlParam(name, value) {
    var currentUrl = location.href;
    var reg;
    if (/\?/g.test(currentUrl)) {
        reg = new RegExp(name + '=[-\\w]{4,25}', 'g');
        if (reg.test(currentUrl)) {
            currentUrl = currentUrl.replace(reg, name + "=" + value);
        } else {
            currentUrl += "&" + name + "=" + value;
        }
    } else {
        currentUrl += "?" + name + "=" + value;
    }
    return currentUrl;
};

var SearchBar = function (_React$Component) {
    _inherits(SearchBar, _React$Component);

    function SearchBar(props) {
        _classCallCheck(this, SearchBar);

        var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));

        _this.state = {
            isActive: false, // whether in search mode
            keyword: ''
        };
        _this.lastSearch = '';
        _this.listener = _this.exitStatusSearch.bind(_this);
        _this.doDebouceSearch = debounce(_this.doSearch, props.searchDelay);
        return _this;
    }

    _createClass(SearchBar, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.body.style.overflow = '';
        }
    }, {
        key: 'onChange',
        value: function onChange(e) {
            var value = e.target.value.trim();
            var t = this;
            this.setState({
                keyword: value
            }, function () {
                if (t.props.instantSearch) {
                    t.doDebouceSearch('input');
                }
            });
            t.props.onChange(value, 'input', e);
        }
    }, {
        key: 'onKeyUp',
        value: function onKeyUp(e) {
            var value = e.target.value.trim();
            if (e.keyCode === 13 && value) {
                this.doSearch('click', value);
                this.refs.input.blur();
            }
        }
    }, {
        key: 'doSearch',
        value: function doSearch(from, keyword) {
            var t = this;
            keyword = keyword || t.state.keyword;
            if (from !== 'input' && t.props.hasHistory) {
                t.refs.history.addItem(keyword);
            }
            if (keyword === t.lastSearch) {
                return;
            }
            t.lastSearch = keyword;
            t.props.onSearch(keyword);
        }
    }, {
        key: 'clearKeyword',
        value: function clearKeyword() {
            var t = this;
            t.setState({
                keyword: ''
            });
            t.refs.input.focus();
            t.props.onChange('', 'clear', null);
        }
    }, {
        key: 'enterSearch',
        value: function enterSearch() {
            var t = this;
            if (t.props.disabled) {
                return;
            }
            t.setState({
                isActive: true
            });
            t.refs.input.focus();
            history.pushState(null, '', addUrlParam('SEARCH_BAR', Date.now()));
            window.addEventListener("popstate", this.listener, false);
            document.body.style.overflow = 'hidden';
            t.props.onEnter();
        }
    }, {
        key: 'exitSearch',
        value: function exitSearch() {
            history.go(-1);
        }
    }, {
        key: 'exitStatusSearch',
        value: function exitStatusSearch() {
            var t = this;
            t.setState({
                isActive: false,
                keyword: ''
            });
            t.refs.input.blur();
            window.removeEventListener("popstate", this.listener, false);
            document.body.style.overflow = '';
            t.props.onExit();
        }
    }, {
        key: 'onHistorySelect',
        value: function onHistorySelect(value) {
            var t = this;
            t.setState({
                keyword: value
            }, function () {
                t.doSearch('history');
            });
        }
    }, {
        key: 'renderHistory',
        value: function renderHistory() {
            var t = this;
            if (!t.props.hasHistory) {
                return null;
            }
            return React.createElement(SearchHistory, { ref: 'history',
                locale: t.props.locale,
                name: t.props.historyName,
                className: classnames({ 'active': !t.state.keyword }),
                onSelect: t.onHistorySelect.bind(t)
            });
        }
    }, {
        key: 'renderResult',
        value: function renderResult() {
            var t = this;
            return React.createElement(
                'div',
                { className: classnames(Context.prefixClass('search-bar-result'), {
                        'active': t.state.keyword
                    }) },
                t.props.children
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _classnames;

            var t = this;
            var i18n = locale[t.props.locale];
            var placeholder = t.props.placeholder;
            if ((typeof placeholder === 'undefined' ? 'undefined' : _typeof(placeholder)) === 'object' && placeholder !== null) {
                placeholder = placeholder[t.props.locale];
            }
            return React.createElement(
                'div',
                { ref: 'root', className: classnames(Context.prefixClass('search-bar'), (_classnames = {}, _defineProperty(_classnames, t.props.className, !!t.props.className), _defineProperty(_classnames, t.props.locale, !!t.props.locale), _defineProperty(_classnames, 'active', t.state.isActive), _classnames)) },
                React.createElement(
                    'div',
                    { className: classnames(Context.prefixClass('search-bar-wrapper'), _defineProperty({}, t.props.className, !!t.props.className)) },
                    React.createElement(
                        'div',
                        { className: Context.prefixClass('search-bar-box') },
                        t.state.isActive ? null : React.createElement(
                            'div',
                            { className: Context.prefixClass('search-bar-holder-wrapper'),
                                onClick: t.enterSearch.bind(t) },
                            React.createElement(
                                'div',
                                { className: Context.prefixClass('search-bar-holder') },
                                React.createElement(Icon, { name: 'search', className: Context.prefixClass('search-bar-icon-search'),
                                    width: this.props.iconWidth, height: this.props.iconHeight,
                                    fill: this.props.iconColor }),
                                placeholder
                            )
                        ),
                        React.createElement(Icon, { name: 'search', className: Context.prefixClass('search-bar-icon-search'),
                            width: this.props.iconWidth, height: this.props.iconHeight, fill: this.props.iconColor }),
                        React.createElement(
                            'form',
                            { action: 'javascript:void(0)' },
                            React.createElement('input', { ref: 'input', type: 'search',
                                className: Context.prefixClass('search-bar-input'),
                                value: t.state.keyword,
                                onChange: t.onChange.bind(t),
                                onKeyUp: t.onKeyUp.bind(t),
                                placeholder: t.state.isActive ? placeholder : '' })
                        ),
                        React.createElement(Icon, { name: 'cross-round', onClick: t.clearKeyword.bind(t),
                            className: classnames(Context.prefixClass('search-bar-icon-cross'), {
                                'active': t.state.keyword
                            }),
                            width: this.props.iconWidth, height: this.props.iconHeight, fill: this.props.iconColor })
                    ),
                    React.createElement(
                        'span',
                        { className: Context.prefixClass('search-bar-btn'),
                            onClick: t.exitSearch.bind(t)
                        },
                        i18n['cancel']
                    )
                ),
                t.state.isActive ? React.createElement(
                    'div',
                    { className: Context.prefixClass('search-bar-list') },
                    t.renderHistory(),
                    t.renderResult()
                ) : null
            );
        }
    }]);

    return SearchBar;
}(React.Component);

var noop = function noop() {};

SearchBar.defaultProps = {
    iconWidth: 20,
    iconHeight: 20,
    iconColor: "#bcbcbc",
    locale: 'zh_CN',
    placeholder: {
        'zh_CN': '搜索',
        'en_US': 'Search'
    },
    hasHistory: true,
    instantSearch: true, // whether trigger search when  input change
    searchDelay: 350, // debounce time for search action
    disabled: false,
    onChange: noop,
    onSearch: noop,
    onEnter: noop,
    onExit: noop
};

// http://facebook.github.io/react/docs/reusable-components.html
SearchBar.propTypes = {
    locale: React.PropTypes.string,
    placeholder: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object]),
    hasHistory: React.PropTypes.bool,
    historyName: React.PropTypes.string,
    instantSearch: React.PropTypes.bool,
    searchDelay: React.PropTypes.number,
    onChange: React.PropTypes.func,
    onSearch: React.PropTypes.func,
    onEnter: React.PropTypes.func,
    onExit: React.PropTypes.func,
    disabled: React.PropTypes.bool
};

SearchBar.displayName = 'SearchBar';

module.exports = SearchBar;
//# sourceMappingURL=data:application/json;base64,

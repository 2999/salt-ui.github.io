/**
 * SearchBar Component for tingle
 * @author zhouquan.yezq
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const classnames = require('classnames');
const debounce = require('lodash/debounce');

const Context = require('@ali/tingle-context');
const Icon = require('@ali/tingle-icon');
const locale = require('./locale');
const SearchHistory = require('./SearchHistory');

const addUrlParam = (name, value) => {
    var currentUrl = location.href;
    var reg;
    if (/\?/g.test(currentUrl)) {
        reg = new RegExp(name + '=[-\\w]{4,25}', 'g');
        if (reg.test(currentUrl)) {
            currentUrl = currentUrl.replace(reg, name + "=" + value);
        } else {
            currentUrl += "&" + name + "=" + value;
        }
    } else {
        currentUrl += "?" + name + "=" + value;
    }
    return currentUrl
};

class SearchBar extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            isActive: false, // whether in search mode
            keyword: ''
        };
        this.lastSearch = '';
        this.listener = this.exitStatusSearch.bind(this);
        this.doDebouceSearch = debounce(this.doSearch, props.searchDelay);
    }

    componentWillUnmount() {
        document.body.style.overflow = '';
    }

    onChange(e) {
        let value = e.target.value.trim();
        let t = this;
        this.setState({
            keyword: value
        }, ()=> {
            if (t.props.instantSearch) {
                t.doDebouceSearch('input');
            }
        });
        t.props.onChange(value, 'input', e);
    }

    onKeyUp(e) {
        let value = e.target.value.trim();
        if (e.keyCode === 13 && value) {
            this.doSearch('click', value);
            this.refs.input.blur();
        }
    }

    doSearch(from, keyword) {
        let t = this;
        keyword = keyword || t.state.keyword;
        if (from !== 'input' && t.props.hasHistory) {
            t.refs.history.addItem(keyword);
        }
        if (keyword === t.lastSearch) {
            return
        }
        t.lastSearch = keyword;
        t.props.onSearch(keyword);
    }

    clearKeyword() {
        let t = this;
        t.setState({
            keyword: ''
        });
        t.refs.input.focus();
        t.props.onChange('', 'clear', null);
    }

    enterSearch() {
        let t = this;
        if (t.props.disabled) {
            return
        }
        t.setState({
            isActive: true
        });
        t.refs.input.focus();
        history.pushState(null, '', addUrlParam('SEARCH_BAR', Date.now()));
        window.addEventListener("popstate", this.listener, false);
        document.body.style.overflow = 'hidden';
        t.props.onEnter();
    }

    exitSearch() {
        history.go(-1)
    }

    exitStatusSearch() {
        let t = this;
        t.setState({
            isActive: false,
            keyword: ''
        });
        t.refs.input.blur();
        window.removeEventListener("popstate", this.listener, false);
        document.body.style.overflow = '';
        t.props.onExit();
    }

    onHistorySelect(value) {
        let t = this;
        t.setState({
            keyword: value
        }, ()=> {
            t.doSearch('history')
        });
    }

    renderHistory() {
        let t = this;
        if (!t.props.hasHistory) {
            return null
        }
        return <SearchHistory ref="history"
                              locale={t.props.locale}
                              name={t.props.historyName}
                              className={classnames({'active': !t.state.keyword})}
                              onSelect={t.onHistorySelect.bind(t)}
        />
    }

    renderResult() {
        let t = this;
        return <div className={classnames(Context.prefixClass('search-bar-result'), {
            'active': t.state.keyword
        })}>{t.props.children}</div>
    }

    render() {
        let t = this;
        let i18n = locale[t.props.locale];
        let placeholder = t.props.placeholder;
        if (typeof placeholder === 'object' && placeholder !== null) {
            placeholder = placeholder[t.props.locale];
        }
        return <div ref='root' className={classnames(Context.prefixClass('search-bar'), {
            [t.props.className]: !!t.props.className,
            [t.props.locale]: !!t.props.locale,
            'active': t.state.isActive
        })}>
            <div className={classnames(Context.prefixClass('search-bar-wrapper'), {
                [t.props.className]: !!t.props.className
            })}>
                <div className={Context.prefixClass('search-bar-box')}>
                    {t.state.isActive ? null :
                        <div className={Context.prefixClass('search-bar-holder-wrapper')}
                             onClick={t.enterSearch.bind(t)}>
                            <div className={Context.prefixClass('search-bar-holder')}>
                                <Icon name="search" className={Context.prefixClass('search-bar-icon-search')}
                                      width={this.props.iconWidth} height={this.props.iconHeight}
                                      fill={this.props.iconColor}/>
                                {placeholder}</div>
                        </div> }
                    <Icon name="search" className={Context.prefixClass('search-bar-icon-search')}
                          width={this.props.iconWidth} height={this.props.iconHeight} fill={this.props.iconColor}/>
                    <form action="javascript:void(0)">
                        <input ref="input" type="search"
                               className={Context.prefixClass('search-bar-input')}
                               value={t.state.keyword}
                               onChange={t.onChange.bind(t)}
                               onKeyUp={t.onKeyUp.bind(t)}
                               placeholder={t.state.isActive ? placeholder : ''}/>
                    </form>
                    <Icon name="cross-round" onClick={t.clearKeyword.bind(t)}
                          className={classnames(Context.prefixClass('search-bar-icon-cross'), {
                                'active': t.state.keyword
                            })}
                          width={this.props.iconWidth} height={this.props.iconHeight} fill={this.props.iconColor}/>
                </div>
                <span className={Context.prefixClass('search-bar-btn')}
                      onClick={t.exitSearch.bind(t)}
                >{i18n['cancel']}</span>
            </div>
            {t.state.isActive ?
                <div className={Context.prefixClass('search-bar-list')}>
                    {t.renderHistory()}
                    {t.renderResult()}
                </div>
                : null}
        </div>;
    }
}

const noop = () => {};

SearchBar.defaultProps = {
    iconWidth: 20,
    iconHeight: 20,
    iconColor: "#bcbcbc",
    locale: 'zh_CN',
    placeholder: {
        'zh_CN': '搜索',
        'en_US': 'Search'
    },
    hasHistory: true,
    instantSearch: true, // whether trigger search when  input change
    searchDelay: 350, // debounce time for search action
    disabled: false,
    onChange:  noop,
    onSearch:  noop,
    onEnter:  noop,
    onExit:  noop,
};

// http://facebook.github.io/react/docs/reusable-components.html
SearchBar.propTypes = {
    locale: React.PropTypes.string,
    placeholder: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.object
    ]),
    hasHistory: React.PropTypes.bool,
    historyName: React.PropTypes.string,
    instantSearch: React.PropTypes.bool,
    searchDelay: React.PropTypes.number,
    onChange: React.PropTypes.func,
    onSearch: React.PropTypes.func,
    onEnter: React.PropTypes.func,
    onExit: React.PropTypes.func,
    disabled: React.PropTypes.bool
};

SearchBar.displayName = 'SearchBar';

module.exports = SearchBar;

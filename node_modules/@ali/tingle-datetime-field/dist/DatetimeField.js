'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * DatetimeField Component for tingle
 * @author caoke.ck
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');

var Context = require('@ali/tingle-context');
var Slot = require('@ali/tingle-slot');
var Icon = require('@ali/tingle-icon');
var Field = require('@ali/tingle-field');

if (!React.addons || !React.addons.update) {
    console.warning('Please use react with addons!');
}

var DatetimeField = function (_React$Component) {
    _inherits(DatetimeField, _React$Component);

    function DatetimeField(props) {
        _classCallCheck(this, DatetimeField);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DatetimeField).call(this, props));

        var t = _this;

        // 使用当前时间或传入时间作为默认值
        var currentValue = parseValue(props.value);

        // 形成候选项
        var options = [makeArray(currentValue[0] - 80, currentValue[0] + 20), makeArray(1, 12).map(function (v) {
            return { text: '' + v, value: v - 1 };
        }), getDates(currentValue[0], currentValue[1]), makeArray(0, 23), makeArray(0, 59), makeArray(0, 59)];
        currentValue = slice(currentValue, props);
        options = slice(options, props);

        // 数据格式化
        var ret = Slot.formatDataValue(options, currentValue);
        t.state = {
            data: ret.data,
            value: currentValue,
            confirmedValue: props.value ? ret.value : []
        };
        return _this;
    }

    // 外部变更选中值


    _createClass(DatetimeField, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var t = this;
            var value = nextProps.value;
            if (value) {
                t.setValue(slice(parseValue(nextProps.value), nextProps), true);
            } else {
                t.setState({
                    confirmedValue: []
                });
            }
        }
    }, {
        key: 'handleClick',
        value: function handleClick() {
            var t = this;
            !t.props.readOnly && t.refs.slot.show();
        }
    }, {
        key: 'handleChange',
        value: function handleChange(value, column, index) {
            var t = this;
            var dates = void 0;
            if (value.length > 2) {
                if (column === 1) {

                    // 改变了月份，会导致月内天数的改变
                    dates = getDates(value[0].value, value[1].value);
                } else if (column === 0 && value[1].value === 1) {

                    // 改变了年份，会导致 2 月天数的改变
                    dates = getDates(value[0].value, 1);
                }
            }
            if (dates) {

                // 同时变更日期和选中项
                var ret = Slot.formatColumnValue(dates, value[2]);
                value[2] = ret.columnValue;
                t.setState(React.addons.update(t.state, {
                    data: _defineProperty({}, 2, {
                        $set: ret.columnData
                    }),
                    value: {
                        $set: value
                    }
                }));
            } else {

                // 仅改变了选中项
                t.setState({
                    value: value
                });
            }
        }
    }, {
        key: 'handleConfirm',
        value: function handleConfirm(value) {
            var t = this;
            var argv = value.map(function (v) {
                return v.value;
            });
            for (var i = 0; i < 6; i++) {
                argv[i] = argv[i] || (i === 2 ? 1 : 0);
            }
            var date = new (Function.prototype.bind.apply(Date, [null].concat(argv)))();

            // 确认选中项目
            t.props.onSelect(date.getTime());
        }
    }, {
        key: 'handleCancel',
        value: function handleCancel() {
            var t = this;
            if (t.state.confirmedValue && t.state.confirmedValue.length) {
                t.setValue(t.state.confirmedValue);
            }
        }
    }, {
        key: 'setValue',
        value: function setValue(val, confirm) {
            var t = this;

            var _Slot$formatDataValue = Slot.formatDataValue(t.state.data, val);

            var value = _Slot$formatDataValue.value;

            var changes = void 0;

            if (value.length > 2) {
                // 为确保有对应的日期，需要重新设置日期
                var dates = getDates(value[0].value, value[1].value);
                var ret = Slot.formatColumnValue(dates);
                changes = {
                    data: _defineProperty({}, 2, {
                        $set: ret.columnData
                    }),
                    value: {
                        $set: value
                    }
                };
            } else {
                changes = {
                    value: {
                        $set: value
                    }
                };
            }
            if (confirm) {
                changes.confirmedValue = {
                    $set: value
                };
            }
            t.setState(React.addons.update(t.state, changes));
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;
            var options = [];
            return React.createElement(
                Field,
                _extends({}, t.props, { icon: t.props.readOnly ? null : {
                        className: Context.prefixClass('datetime-field-icon'),
                        name: 'angle-right',
                        width: 26,
                        height: 26,
                        onClick: t.handleClick.bind(t)
                    },
                    className: classnames(Context.prefixClass('datetime-field'), _defineProperty({}, t.props.className, !!t.props.className)) }),
                React.createElement(
                    'div',
                    { onClick: t.handleClick.bind(t) },
                    !t.state.confirmedValue[0] ? React.createElement(
                        'div',
                        { className: Context.prefixClass('omit datetime-field-placeholder') },
                        t.props.placeholder
                    ) : '',
                    React.createElement(
                        'div',
                        { className: Context.prefixClass('datetime-field-value FBH FBAC') },
                        React.createElement(
                            'span',
                            { className: classnames(Context.prefixClass('FB1 omit'), _defineProperty({}, Context.prefixClass('datetime-field-readonly'), !!t.props.readOnly)) },
                            t.props.formatter(t.state.confirmedValue)
                        )
                    )
                ),
                React.createElement(Slot, { ref: 'slot', title: t.props.label, confirmText: t.props.confirmText, cancelText: t.props.cancelText, data: t.state.data, value: t.state.value, onChange: t.handleChange.bind(t), onCancel: t.handleCancel.bind(t), onConfirm: t.handleConfirm.bind(t), columns: t.props.columns })
            );
        }
    }]);

    return DatetimeField;
}(React.Component);

DatetimeField.defaultProps = {
    formatter: function formatter(value) {
        var arr = value.map(function (v) {
            return v.text < 10 ? '0' + v.text : v.text;
        });
        if (arr.length < 4) {
            return arr.join('-');
        } else {
            return arr.slice(0, 3).join('-') + ' ' + arr.slice(3).join(':');
        }
    },
    onSelect: function onSelect() {},
    readOnly: false,
    placeholder: '',
    columns: ['年', '月', '日', '时', '分', '秒']
};

// http://facebook.github.io/react/docs/reusable-components.html
DatetimeField.propTypes = {
    className: React.PropTypes.string,
    label: React.PropTypes.string.isRequired,
    value: React.PropTypes.number,
    formatter: React.PropTypes.func,
    onSelect: React.PropTypes.func,
    readOnly: React.PropTypes.bool,
    placeholder: React.PropTypes.string,
    confirmText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    columns: React.PropTypes.array
};

DatetimeField.displayName = 'DatetimeField';

module.exports = DatetimeField;

// 是否是闰年的判断
function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}

function makeArray(start, end) {
    for (var arr = [], i = start; i <= end; i++) {
        arr.push(i);
    }
    return arr;
}

// 获取某个月份的日期选项
function getDates(year, month) {
    var dates = [];
    switch ('1 1010110101'.split('')[month]) {
        case '1':
            // 大月
            return makeArray(1, 31);
        case '0':
            // 小月
            return makeArray(1, 30);
        case ' ':
            // 闰年 2 月 和 平年 2 月
            return isLeapYear(year) ? makeArray(1, 29) : makeArray(1, 28);
    }
}

function parseValue(value) {
    var date = value ? new Date(parseInt(value)) : new Date();
    return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()];
}

function slice(array, props) {
    return array.slice(0, props.columns.length);
}
//# sourceMappingURL=data:application/json;base64,

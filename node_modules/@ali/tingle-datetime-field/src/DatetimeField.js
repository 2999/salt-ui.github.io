/**
 * DatetimeField Component for tingle
 * @author caoke.ck
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');

const Context = require('@ali/tingle-context');
const Slot = require('@ali/tingle-slot');
const Icon = require('@ali/tingle-icon');
const Field = require('@ali/tingle-field');

if (!React.addons || !React.addons.update) {
    console.warning('Please use react with addons!');
}

class DatetimeField extends React.Component {

    constructor(props) {
        super(props);
        let t = this;

        // 使用当前时间或传入时间作为默认值
        let currentValue = parseValue(props.value);

        // 形成候选项
        let options = [
            makeArray(currentValue[0] - 80, currentValue[0] + 20),
            makeArray(1, 12).map((v) => { return { text: `${v}`, value: v - 1 }}),
            getDates(currentValue[0], currentValue[1]),
            makeArray(0, 23),
            makeArray(0, 59),
            makeArray(0, 59)
        ];
        currentValue = slice(currentValue, props);
        options = slice(options, props);

        // 数据格式化
        let ret = Slot.formatDataValue(options, currentValue);
        t.state = {
            data: ret.data,
            value: currentValue,
            confirmedValue: props.value ? ret.value : []
        };
    }

    // 外部变更选中值
    componentWillReceiveProps(nextProps) {
        let t = this;
        let value = nextProps.value;
        if (value) {
            t.setValue(slice(parseValue(nextProps.value), nextProps), true);
        } else {
            t.setState({
                confirmedValue: []
            });
        }
    }

    handleClick() {
        let t = this;
        !t.props.readOnly && t.refs.slot.show();
    }

    handleChange(value, column, index) {
        let t = this;
        let dates;
        if (value.length > 2) {
            if (column === 1) {

                // 改变了月份，会导致月内天数的改变
                dates = getDates(value[0].value, value[1].value);

            } else if (column === 0 && value[1].value === 1) {

                // 改变了年份，会导致 2 月天数的改变
                dates = getDates(value[0].value, 1);
            }
        }
        if (dates) {

            // 同时变更日期和选中项
            let ret = Slot.formatColumnValue(dates, value[2]);
            value[2] = ret.columnValue;
            t.setState(React.addons.update(t.state, {
                data: {
                    [2]: {
                        $set: ret.columnData
                    }
                },
                value: {
                    $set: value
                }
            }));
        } else {

            // 仅改变了选中项
            t.setState({
                value: value
            });
        }
    }

    handleConfirm(value) {
        let t = this;
        let argv = value.map((v) => v.value);
        for (let i = 0; i < 6; i++) {
            argv[i] = argv[i] || (i === 2 ? 1 : 0);
        }
        let date = new (Function.prototype.bind.apply(Date, [null].concat(argv)));

        // 确认选中项目
        t.props.onSelect(date.getTime());
    }

    handleCancel() {
        let t = this;
        if (t.state.confirmedValue && t.state.confirmedValue.length) {
            t.setValue(t.state.confirmedValue);
        }
    }

    setValue(val, confirm) {
        let t = this;
        let { value } = Slot.formatDataValue(t.state.data, val);
        let changes;

        if (value.length > 2) {
            // 为确保有对应的日期，需要重新设置日期
            let dates = getDates(value[0].value, value[1].value);
            let ret = Slot.formatColumnValue(dates);
            changes = {
                data: {
                    [2]: {
                        $set: ret.columnData
                    }
                },
                value: {
                    $set: value
                }
            };
        } else {
            changes = {
                value: {
                    $set: value
                }
            };
        }
        if (confirm) {
            changes.confirmedValue = {
                $set: value
            };
        }
        t.setState(React.addons.update(t.state, changes));
    }

    render() {
        let t = this;
        let options = [];
        return (
            <Field {...t.props} icon={t.props.readOnly ? null : {
                    className: Context.prefixClass('datetime-field-icon'),
                    name: 'angle-right',
                    width: 26,
                    height: 26,
                    onClick: t.handleClick.bind(t)
                }}
                className={classnames(Context.prefixClass('datetime-field'), {
                    [t.props.className]: !!t.props.className
                })}>
                <div onClick={t.handleClick.bind(t)}>
                    {!t.state.confirmedValue[0] ? <div className={Context.prefixClass('omit datetime-field-placeholder')}>{t.props.placeholder}</div> : ''}
                    <div className={Context.prefixClass('datetime-field-value FBH FBAC')}>
                        <span className={classnames(Context.prefixClass('FB1 omit'), {
                            [Context.prefixClass('datetime-field-readonly')]: !!t.props.readOnly
                        })}>{t.props.formatter(t.state.confirmedValue)}</span>
                    </div>
                </div>
                <Slot ref="slot" title={t.props.label} confirmText={t.props.confirmText} cancelText={t.props.cancelText} data={t.state.data} value={t.state.value} onChange={t.handleChange.bind(t)} onCancel={t.handleCancel.bind(t)} onConfirm={t.handleConfirm.bind(t)} columns={t.props.columns}/>
            </Field>
        );
    }
}

DatetimeField.defaultProps = {
    formatter: (value) => {
        let arr = value.map((v) => v.text < 10 ? `0${v.text}` : v.text);
        if (arr.length < 4) {
            return arr.join('-');
        } else {
            return `${arr.slice(0, 3).join('-')} ${arr.slice(3).join(':')}`;
        }
    },
    onSelect: () => {},
    readOnly: false,
    placeholder: '',
    columns: [ '年', '月', '日', '时', '分', '秒' ]
}

// http://facebook.github.io/react/docs/reusable-components.html
DatetimeField.propTypes = {
    className: React.PropTypes.string,
    label: React.PropTypes.string.isRequired,
    value: React.PropTypes.number,
    formatter: React.PropTypes.func,
    onSelect: React.PropTypes.func,
    readOnly: React.PropTypes.bool,
    placeholder: React.PropTypes.string,
    confirmText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    columns: React.PropTypes.array
}

DatetimeField.displayName = 'DatetimeField';

module.exports = DatetimeField;

// 是否是闰年的判断
function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}

function makeArray(start, end) {
    for (var arr = [], i = start; i <= end; i++) {
        arr.push(i);
    }
    return arr;
}

// 获取某个月份的日期选项
function getDates(year, month) {
    let dates = [];
    switch ('1 1010110101'.split('')[month]) {
        case '1': // 大月
            return makeArray(1, 31);
        case '0': // 小月
            return makeArray(1, 30);
        case ' ': // 闰年 2 月 和 平年 2 月
            return isLeapYear(year) ? makeArray(1, 29) : makeArray(1, 28);
    }
}

function parseValue(value) {
    let date = value ? new Date(parseInt(value)) : new Date();
    return [
        date.getFullYear(),
        date.getMonth(),
        date.getDate(),
        date.getHours(),
        date.getMinutes(),
        date.getSeconds()
    ];
}

function slice(array, props) {
    return array.slice(0, props.columns.length);
}

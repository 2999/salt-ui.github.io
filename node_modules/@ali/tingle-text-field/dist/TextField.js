'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * TextField Component for tingle
 * @author
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
var React = require('react');
var classnames = require('classnames');
var Context = require('@ali/tingle-context');
var Field = require('@ali/tingle-field');

var prefixClass = Context.prefixClass;

var TextField = function (_React$Component) {
    _inherits(TextField, _React$Component);

    function TextField(props) {
        _classCallCheck(this, TextField);

        return _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));
    }

    _createClass(TextField, [{
        key: 'handleChange',
        value: function handleChange(e) {
            var value = this.props.filter(e.target.value);
            this.props.onChange(value, e);
        }
    }, {
        key: 'handleFocus',
        value: function handleFocus(e) {
            var t = this;
            t.props.onFocus(t.props.value);
        }
    }, {
        key: 'handleBlur',
        value: function handleBlur(e) {
            var t = this;
            t.props.onBlur(t.props.value, e);
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;

            return React.createElement(
                Field,
                _extends({}, t.props, { className: classnames(prefixClass('text-field'), t.props.className, {
                        readonly: t.props.readOnly
                    }) }),
                React.createElement(
                    'div',
                    { ref: 'placeholder', className: classnames(prefixClass('omit text-field-placeholder'), _defineProperty({}, prefixClass('DN'), t.props.value !== '')) },
                    t.props.placeholder
                ),
                React.createElement('input', { ref: 'input', className: prefixClass('text-field-input'),
                    type: t.props.type, value: t.props.value, readOnly: t.props.readOnly,
                    onChange: t.handleChange.bind(t),
                    onFocus: t.handleFocus.bind(t),
                    onBlur: t.handleBlur.bind(t) })
            );
        }
    }]);

    return TextField;
}(React.Component);

TextField.defaultProps = {
    className: '',
    filter: function filter(v) {
        return v;
    },
    label: '',
    onChange: Context.noop,
    onFocus: Context.noop,
    onBlur: Context.noop,
    placeholder: '',
    readOnly: false,
    type: 'text',
    value: ''
};

TextField.propTypes = {
    className: React.PropTypes.string,
    filter: React.PropTypes.func,
    label: React.PropTypes.string,
    onChange: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onBlur: React.PropTypes.func,
    placeholder: React.PropTypes.string,
    readOnly: React.PropTypes.bool,
    type: React.PropTypes.string,
    value: React.PropTypes.string
};

TextField.displayName = 'TextField';

module.exports = TextField;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRGaWVsZC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJjbGFzc25hbWVzIiwiQ29udGV4dCIsIkZpZWxkIiwicHJlZml4Q2xhc3MiLCJUZXh0RmllbGQiLCJwcm9wcyIsImUiLCJ2YWx1ZSIsImZpbHRlciIsInRhcmdldCIsIm9uQ2hhbmdlIiwidCIsIm9uRm9jdXMiLCJvbkJsdXIiLCJjbGFzc05hbWUiLCJyZWFkb25seSIsInJlYWRPbmx5IiwicGxhY2Vob2xkZXIiLCJ0eXBlIiwiaGFuZGxlQ2hhbmdlIiwiYmluZCIsImhhbmRsZUZvY3VzIiwiaGFuZGxlQmx1ciIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsInYiLCJsYWJlbCIsIm5vb3AiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwiYm9vbCIsImRpc3BsYXlOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7OztBQU9BLElBQU1BLFFBQVFDLFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTUMsYUFBYUQsUUFBUSxZQUFSLENBQW5CO0FBQ0EsSUFBTUUsVUFBVUYsUUFBUSxxQkFBUixDQUFoQjtBQUNBLElBQU1HLFFBQVFILFFBQVEsbUJBQVIsQ0FBZDs7QUFFQSxJQUFJSSxjQUFjRixRQUFRRSxXQUExQjs7SUFFTUMsUzs7O0FBRUYsdUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSxxSEFDVEEsS0FEUztBQUVsQjs7OztxQ0FFWUMsQyxFQUFHO0FBQ1osZ0JBQUlDLFFBQVEsS0FBS0YsS0FBTCxDQUFXRyxNQUFYLENBQWtCRixFQUFFRyxNQUFGLENBQVNGLEtBQTNCLENBQVo7QUFDQSxpQkFBS0YsS0FBTCxDQUFXSyxRQUFYLENBQW9CSCxLQUFwQixFQUEyQkQsQ0FBM0I7QUFDSDs7O29DQUVXQSxDLEVBQUc7QUFDWCxnQkFBSUssSUFBSSxJQUFSO0FBQ0FBLGNBQUVOLEtBQUYsQ0FBUU8sT0FBUixDQUFnQkQsRUFBRU4sS0FBRixDQUFRRSxLQUF4QjtBQUNIOzs7bUNBRVVELEMsRUFBRztBQUNWLGdCQUFJSyxJQUFJLElBQVI7QUFDQUEsY0FBRU4sS0FBRixDQUFRUSxNQUFSLENBQWVGLEVBQUVOLEtBQUYsQ0FBUUUsS0FBdkIsRUFBOEJELENBQTlCO0FBQ0g7OztpQ0FFUTtBQUNMLGdCQUFJSyxJQUFJLElBQVI7O0FBRUEsbUJBQ0k7QUFBQyxxQkFBRDtBQUFBLDZCQUFXQSxFQUFFTixLQUFiLElBQW9CLFdBQVdMLFdBQVdHLFlBQVksWUFBWixDQUFYLEVBQXNDUSxFQUFFTixLQUFGLENBQVFTLFNBQTlDLEVBQXlEO0FBQ3BGQyxrQ0FBVUosRUFBRU4sS0FBRixDQUFRVztBQURrRSxxQkFBekQsQ0FBL0I7QUFHSTtBQUFBO0FBQUEsc0JBQUssS0FBSSxhQUFULEVBQXVCLFdBQVdoQixXQUFXRyxZQUFZLDZCQUFaLENBQVgsc0JBQ2pDQSxZQUFZLElBQVosQ0FEaUMsRUFDYlEsRUFBRU4sS0FBRixDQUFRRSxLQUFSLEtBQWtCLEVBREwsRUFBbEM7QUFFQ0ksc0JBQUVOLEtBQUYsQ0FBUVk7QUFGVCxpQkFISjtBQU1JLCtDQUFPLEtBQUksT0FBWCxFQUFtQixXQUFXZCxZQUFZLGtCQUFaLENBQTlCO0FBQ08sMEJBQU1RLEVBQUVOLEtBQUYsQ0FBUWEsSUFEckIsRUFDMkIsT0FBT1AsRUFBRU4sS0FBRixDQUFRRSxLQUQxQyxFQUNpRCxVQUFVSSxFQUFFTixLQUFGLENBQVFXLFFBRG5FO0FBRU8sOEJBQVVMLEVBQUVRLFlBQUYsQ0FBZUMsSUFBZixDQUFvQlQsQ0FBcEIsQ0FGakI7QUFHTyw2QkFBU0EsRUFBRVUsV0FBRixDQUFjRCxJQUFkLENBQW1CVCxDQUFuQixDQUhoQjtBQUlPLDRCQUFRQSxFQUFFVyxVQUFGLENBQWFGLElBQWIsQ0FBa0JULENBQWxCLENBSmY7QUFOSixhQURKO0FBY0g7Ozs7RUF0Q21CYixNQUFNeUIsUzs7QUF5QzlCbkIsVUFBVW9CLFlBQVYsR0FBeUI7QUFDckJWLGVBQVcsRUFEVTtBQUVyQk4sWUFBUSxnQkFBQ2lCLENBQUQsRUFBTztBQUNYLGVBQU9BLENBQVA7QUFDSCxLQUpvQjtBQUtyQkMsV0FBTyxFQUxjO0FBTXJCaEIsY0FBVVQsUUFBUTBCLElBTkc7QUFPckJmLGFBQVNYLFFBQVEwQixJQVBJO0FBUXJCZCxZQUFRWixRQUFRMEIsSUFSSztBQVNyQlYsaUJBQWEsRUFUUTtBQVVyQkQsY0FBVSxLQVZXO0FBV3JCRSxVQUFNLE1BWGU7QUFZckJYLFdBQU87QUFaYyxDQUF6Qjs7QUFlQUgsVUFBVXdCLFNBQVYsR0FBc0I7QUFDbEJkLGVBQVdoQixNQUFNK0IsU0FBTixDQUFnQkMsTUFEVDtBQUVsQnRCLFlBQVFWLE1BQU0rQixTQUFOLENBQWdCRSxJQUZOO0FBR2xCTCxXQUFPNUIsTUFBTStCLFNBQU4sQ0FBZ0JDLE1BSEw7QUFJbEJwQixjQUFVWixNQUFNK0IsU0FBTixDQUFnQkUsSUFKUjtBQUtsQm5CLGFBQVNkLE1BQU0rQixTQUFOLENBQWdCRSxJQUxQO0FBTWxCbEIsWUFBUWYsTUFBTStCLFNBQU4sQ0FBZ0JFLElBTk47QUFPbEJkLGlCQUFhbkIsTUFBTStCLFNBQU4sQ0FBZ0JDLE1BUFg7QUFRbEJkLGNBQVVsQixNQUFNK0IsU0FBTixDQUFnQkcsSUFSUjtBQVNsQmQsVUFBTXBCLE1BQU0rQixTQUFOLENBQWdCQyxNQVRKO0FBVWxCdkIsV0FBT1QsTUFBTStCLFNBQU4sQ0FBZ0JDO0FBVkwsQ0FBdEI7O0FBYUExQixVQUFVNkIsV0FBVixHQUF3QixXQUF4Qjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQi9CLFNBQWpCIiwiZmlsZSI6IlRleHRGaWVsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGV4dEZpZWxkIENvbXBvbmVudCBmb3IgdGluZ2xlXG4gKiBAYXV0aG9yXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNiwgVGluZ2xlIFRlYW0uXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBjbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuY29uc3QgQ29udGV4dCA9IHJlcXVpcmUoJ0BhbGkvdGluZ2xlLWNvbnRleHQnKTtcbmNvbnN0IEZpZWxkID0gcmVxdWlyZSgnQGFsaS90aW5nbGUtZmllbGQnKTtcblxubGV0IHByZWZpeENsYXNzID0gQ29udGV4dC5wcmVmaXhDbGFzcztcblxuY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnByb3BzLmZpbHRlcihlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUsIGUpO1xuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzKGUpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICB0LnByb3BzLm9uRm9jdXModC5wcm9wcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlQmx1cihlKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgdC5wcm9wcy5vbkJsdXIodC5wcm9wcy52YWx1ZSwgZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdCA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxGaWVsZCB7Li4udC5wcm9wc30gY2xhc3NOYW1lPXtjbGFzc25hbWVzKHByZWZpeENsYXNzKCd0ZXh0LWZpZWxkJyksIHQucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgcmVhZG9ubHk6IHQucHJvcHMucmVhZE9ubHlcbiAgICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgICAgICA8ZGl2IHJlZj1cInBsYWNlaG9sZGVyXCIgY2xhc3NOYW1lPXtjbGFzc25hbWVzKHByZWZpeENsYXNzKCdvbWl0IHRleHQtZmllbGQtcGxhY2Vob2xkZXInKSwge1xuICAgICAgICAgICAgICAgIFtwcmVmaXhDbGFzcygnRE4nKV06IHQucHJvcHMudmFsdWUgIT09ICcnXG4gICAgICAgICAgICB9KX0+e3QucHJvcHMucGxhY2Vob2xkZXJ9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGlucHV0IHJlZj1cImlucHV0XCIgY2xhc3NOYW1lPXtwcmVmaXhDbGFzcygndGV4dC1maWVsZC1pbnB1dCcpfVxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXt0LnByb3BzLnR5cGV9IHZhbHVlPXt0LnByb3BzLnZhbHVlfSByZWFkT25seT17dC5wcm9wcy5yZWFkT25seX1cbiAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3QuaGFuZGxlQ2hhbmdlLmJpbmQodCl9XG4gICAgICAgICAgICAgICAgICAgICAgIG9uRm9jdXM9e3QuaGFuZGxlRm9jdXMuYmluZCh0KX1cbiAgICAgICAgICAgICAgICAgICAgICAgb25CbHVyPXt0LmhhbmRsZUJsdXIuYmluZCh0KX0vPlxuICAgICAgICAgICAgPC9GaWVsZD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblRleHRGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBmaWx0ZXI6ICh2KSA9PiB7XG4gICAgICAgIHJldHVybiB2O1xuICAgIH0sXG4gICAgbGFiZWw6ICcnLFxuICAgIG9uQ2hhbmdlOiBDb250ZXh0Lm5vb3AsXG4gICAgb25Gb2N1czogQ29udGV4dC5ub29wLFxuICAgIG9uQmx1cjogQ29udGV4dC5ub29wLFxuICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICByZWFkT25seTogZmFsc2UsXG4gICAgdHlwZTogJ3RleHQnLFxuICAgIHZhbHVlOiAnJ1xufTtcblxuVGV4dEZpZWxkLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25CbHVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICByZWFkT25seTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuVGV4dEZpZWxkLmRpc3BsYXlOYW1lID0gJ1RleHRGaWVsZCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dEZpZWxkO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

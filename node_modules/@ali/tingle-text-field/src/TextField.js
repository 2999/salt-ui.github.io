/**
 * TextField Component for tingle
 * @author
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
const React = require('react');
const classnames = require('classnames');
const Context = require('@ali/tingle-context');
const Field = require('@ali/tingle-field');

let prefixClass = Context.prefixClass;

class TextField extends React.Component {

    constructor(props) {
        super(props);
    }

    handleChange(e) {
        let value = this.props.filter(e.target.value);
        this.props.onChange(value, e);
    }

    handleFocus(e) {
        let t = this;
        t.props.onFocus(t.props.value);
    }

    handleBlur(e) {
        let t = this;
        t.props.onBlur(t.props.value, e);
    }

    render() {
        let t = this;

        return (
            <Field {...t.props} className={classnames(prefixClass('text-field'), t.props.className, {
                readonly: t.props.readOnly
            })}>
                <div ref="placeholder" className={classnames(prefixClass('omit text-field-placeholder'), {
                [prefixClass('DN')]: t.props.value !== ''
            })}>{t.props.placeholder}</div>
                <input ref="input" className={prefixClass('text-field-input')}
                       type={t.props.type} value={t.props.value} readOnly={t.props.readOnly}
                       onChange={t.handleChange.bind(t)}
                       onFocus={t.handleFocus.bind(t)}
                       onBlur={t.handleBlur.bind(t)}/>
            </Field>
        );
    }
}

TextField.defaultProps = {
    className: '',
    filter: (v) => {
        return v;
    },
    label: '',
    onChange: Context.noop,
    onFocus: Context.noop,
    onBlur: Context.noop,
    placeholder: '',
    readOnly: false,
    type: 'text',
    value: ''
};

TextField.propTypes = {
    className: React.PropTypes.string,
    filter: React.PropTypes.func,
    label: React.PropTypes.string,
    onChange: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onBlur: React.PropTypes.func,
    placeholder: React.PropTypes.string,
    readOnly: React.PropTypes.bool,
    type: React.PropTypes.string,
    value: React.PropTypes.string
};

TextField.displayName = 'TextField';

module.exports = TextField;

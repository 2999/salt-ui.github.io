/**
 * PhotoField Component for tingle
 * @author
 * alex.mm
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */

/* eslint-disable */
const React = require('react');
const classnames = require('classnames');

const Context = require('@ali/tingle-context');
const PhotoFieldItem = require('./PhotoFieldItem');
const Icon = require('@ali/tingle-icon');

const noop = () => {};

const autoFixUrl = (url) => {
    let _url = url;
    if(_url) {
        // auto fix cdn url
        if(_url.indexOf('//')  === 0) {
          _url = `${location.protocol}${_url}`;
        }
    }
    return _url;
};

const prefixClass = Context.prefixClass;

const Ali = window.Ali || {};

class PhotoField extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            width: `${100 / props.columns}%`,
        };
    }

    onPickHandler() {
        if (this.props.readOnly) {
            return;
        }
        const option = {
            multiple: !!this.props.multiple,
            max: this.props.max,
        };
        if (Ali.isDingDing) {
            if (!this.props.corpId) {
                Ali.alert({
                    message: this.props.locale === 'zh_CN' ? 'corpId 不能为空' : 'corpId is required',
                    okButton: this.props.locale === 'zh_CN' ? '确定' : 'OK',
                });
                return;
            }
            option.corpId = this.props.corpId;
            Ali.photo(option, (result) => {
                if (result && !result.errorCode) {
                    this.props.onChange({
                        value: result.photos,
                    });
                } else {
                    Ali.alert({
                        message: result.errorMessage,
                        okButton: this.props.locale === 'zh_CN' ? '确定' : 'OK',
                    });
                }
            });
        }
    }

    renderPhotoList() {
        const t = this;
        const photoItem = t.props.photoList.map((item, index) => {
            const props = {
                index,
                url: item.url,
                name: item.name,
                width: t.state.width,
                columns: t.props.columns,
                readOnly: t.props.readOnly,
                onDeleteImage: t.handleDeleteImage.bind(t),
                onPreviewImage: t.handlePreview.bind(t),
            };
            return (
                <PhotoFieldItem {...props} key={index}/>
            );
        });
        return (
            <div className={classnames(prefixClass('photo-list'), {  [prefixClass('hide')]: !photoItem.length })}>
                {photoItem}
            </div>
        );
    }

    handleDeleteImage(index) {
        this.props.onDelete(index);
    }

    // 点击预览
    handlePreview(index) {
        const t = this;
        const urls = t.props.photoList.map((item) => {
            const u = autoFixUrl(item.url);
            return {u};
        });

        Ali.imageViewer({
            images: urls,
            init: index,
        }, (result) => {
            console.log(result);
        });
    }

    render() {
        const t = this;
        const requiredTag = (
            <Icon name="field-required" className={prefixClass('field-layout-label-required')} width={6} height={6} fill="red" />
        );
        return (
            <div className={classnames(prefixClass('photo-field'), {
            [t.props.className]: !!t.props.className,
            [prefixClass('hide')]: t.props.hide,
            readOnly: t.props.readOnly,
          })}>
                {
                    t.props.label && t.props.layout === 'v' &&
                    <div className={prefixClass('field-layout-v-label')}>
                        {t.props.label}
                        {this.props.required && requiredTag}
                    </div>
                }
                <div onClick={t.onPickHandler.bind(t)} className={classnames(prefixClass('field-box FBH'), {
                    [prefixClass('TE')]: !!t.props.tappable
                })}>
                    {
                        t.props.label && t.props.layout === 'h' &&
                        <div className={prefixClass('field-layout-h-label')}>
                            {t.props.label}
                            {this.props.required && requiredTag}
                        </div>
                    }
                    <div className={prefixClass('FB1 PR FBH FBAC')}>
                        <div className={
                            classnames(prefixClass('omit select-field-placeholder'), {
                                [prefixClass('hide')]: this.props.photoList.length || t.props.readOnly,
                            })}>{this.props.placeholder}
                        </div>
                    </div>
                    {
                        !t.props.readOnly && Ali.isDingDing &&
                        <div className={prefixClass('icon FBH FBAC photo-icon')}>
                            <Icon className={prefixClass('icon-svg')} name="photo" fill={t.props.fill} width={26} height={26} />
                        </div>
                    }
                </div>
                {this.renderPhotoList()}
            </div>
        );
    }
}

PhotoField.defaultProps = {
    columns: 3,
    multiple: true, // 是否同时上传多张照片
    layout: 'h',
    label: '',
    max: 9, // 钉钉组件一次性最多选择上传3张照片
    maxUpload: 12,   // 总共上传图片总数
    readOnly: false,
    onChange: noop,
    photoList: [],
    fill: '#ccc',
    locale: 'zh_CN',
};

// http://facebook.github.io/react/docs/reusable-components.html
PhotoField.propTypes = {
    icon: React.PropTypes.object,
    columns: React.PropTypes.number,
    multiple: React.PropTypes.bool,
    corpId: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    locale: React.PropTypes.string,
    label: React.PropTypes.string,
    max: React.PropTypes.number,
    maxUpload: React.PropTypes.number,
    photoList: React.PropTypes.array,
    readOnly: React.PropTypes.bool,
    onChange: React.PropTypes.func,
    onDelete: React.PropTypes.func,
};

PhotoField.displayName = 'PhotoField';

module.exports = PhotoField;

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * PhotoField Component for tingle
 * @author
 * alex.mm
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */

/* eslint-disable */
var React = require('react');
var classnames = require('classnames');

var Context = require('@ali/tingle-context');
var PhotoFieldItem = require('./PhotoFieldItem');
var Icon = require('@ali/tingle-icon');

var noop = function noop() {};

var autoFixUrl = function autoFixUrl(url) {
    var _url = url;
    if (_url) {
        // auto fix cdn url
        if (_url.indexOf('//') === 0) {
            _url = '' + location.protocol + _url;
        }
    }
    return _url;
};

var prefixClass = Context.prefixClass;

var Ali = window.Ali || {};

var PhotoField = function (_React$Component) {
    _inherits(PhotoField, _React$Component);

    function PhotoField(props) {
        _classCallCheck(this, PhotoField);

        var _this = _possibleConstructorReturn(this, (PhotoField.__proto__ || Object.getPrototypeOf(PhotoField)).call(this, props));

        _this.state = {
            width: 100 / props.columns + '%'
        };
        return _this;
    }

    _createClass(PhotoField, [{
        key: 'onPickHandler',
        value: function onPickHandler() {
            var _this2 = this;

            if (this.props.readOnly) {
                return;
            }
            var option = {
                multiple: !!this.props.multiple,
                max: this.props.max
            };
            if (Ali.isDingDing) {
                if (!this.props.corpId) {
                    Ali.alert({
                        message: this.props.locale === 'zh_CN' ? 'corpId 不能为空' : 'corpId is required',
                        okButton: this.props.locale === 'zh_CN' ? '确定' : 'OK'
                    });
                    return;
                }
                option.corpId = this.props.corpId;
                Ali.photo(option, function (result) {
                    if (result && !result.errorCode) {
                        _this2.props.onChange({
                            value: result.photos
                        });
                    } else {
                        Ali.alert({
                            message: result.errorMessage,
                            okButton: _this2.props.locale === 'zh_CN' ? '确定' : 'OK'
                        });
                    }
                });
            }
        }
    }, {
        key: 'renderPhotoList',
        value: function renderPhotoList() {
            var t = this;
            var photoItem = t.props.photoList.map(function (item, index) {
                var props = {
                    index: index,
                    url: item.url,
                    name: item.name,
                    width: t.state.width,
                    columns: t.props.columns,
                    readOnly: t.props.readOnly,
                    onDeleteImage: t.handleDeleteImage.bind(t),
                    onPreviewImage: t.handlePreview.bind(t)
                };
                return React.createElement(PhotoFieldItem, _extends({}, props, { key: index }));
            });
            return React.createElement(
                'div',
                { className: classnames(prefixClass('photo-list'), _defineProperty({}, prefixClass('hide'), !photoItem.length)) },
                photoItem
            );
        }
    }, {
        key: 'handleDeleteImage',
        value: function handleDeleteImage(index) {
            this.props.onDelete(index);
        }

        // 点击预览

    }, {
        key: 'handlePreview',
        value: function handlePreview(index) {
            var t = this;
            var urls = t.props.photoList.map(function (item) {
                var u = autoFixUrl(item.url);
                return { u: u };
            });

            Ali.imageViewer({
                images: urls,
                init: index
            }, function (result) {
                console.log(result);
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _classnames2;

            var t = this;
            var requiredTag = React.createElement(Icon, { name: 'field-required', className: prefixClass('field-layout-label-required'), width: 6, height: 6, fill: 'red' });
            return React.createElement(
                'div',
                { className: classnames(prefixClass('photo-field'), (_classnames2 = {}, _defineProperty(_classnames2, t.props.className, !!t.props.className), _defineProperty(_classnames2, prefixClass('hide'), t.props.hide), _defineProperty(_classnames2, 'readOnly', t.props.readOnly), _classnames2)) },
                t.props.label && t.props.layout === 'v' && React.createElement(
                    'div',
                    { className: prefixClass('field-layout-v-label') },
                    t.props.label,
                    this.props.required && requiredTag
                ),
                React.createElement(
                    'div',
                    { onClick: t.onPickHandler.bind(t), className: classnames(prefixClass('field-box FBH'), _defineProperty({}, prefixClass('TE'), !!t.props.tappable)) },
                    t.props.label && t.props.layout === 'h' && React.createElement(
                        'div',
                        { className: prefixClass('field-layout-h-label') },
                        t.props.label,
                        this.props.required && requiredTag
                    ),
                    React.createElement(
                        'div',
                        { className: prefixClass('FB1 PR FBH FBAC') },
                        React.createElement(
                            'div',
                            { className: classnames(prefixClass('omit select-field-placeholder'), _defineProperty({}, prefixClass('hide'), this.props.photoList.length || t.props.readOnly)) },
                            this.props.placeholder
                        )
                    ),
                    !t.props.readOnly && Ali.isDingDing && React.createElement(
                        'div',
                        { className: prefixClass('icon FBH FBAC photo-icon') },
                        React.createElement(Icon, { className: prefixClass('icon-svg'), name: 'photo', fill: t.props.fill, width: 26, height: 26 })
                    )
                ),
                this.renderPhotoList()
            );
        }
    }]);

    return PhotoField;
}(React.Component);

PhotoField.defaultProps = {
    columns: 3,
    multiple: true, // 是否同时上传多张照片
    layout: 'h',
    label: '',
    max: 9, // 钉钉组件一次性最多选择上传3张照片
    maxUpload: 12, // 总共上传图片总数
    readOnly: false,
    onChange: noop,
    photoList: [],
    fill: '#ccc',
    locale: 'zh_CN'
};

// http://facebook.github.io/react/docs/reusable-components.html
PhotoField.propTypes = {
    icon: React.PropTypes.object,
    columns: React.PropTypes.number,
    multiple: React.PropTypes.bool,
    corpId: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    locale: React.PropTypes.string,
    label: React.PropTypes.string,
    max: React.PropTypes.number,
    maxUpload: React.PropTypes.number,
    photoList: React.PropTypes.array,
    readOnly: React.PropTypes.bool,
    onChange: React.PropTypes.func,
    onDelete: React.PropTypes.func
};

PhotoField.displayName = 'PhotoField';

module.exports = PhotoField;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBob3RvRmllbGQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiY2xhc3NuYW1lcyIsIkNvbnRleHQiLCJQaG90b0ZpZWxkSXRlbSIsIkljb24iLCJub29wIiwiYXV0b0ZpeFVybCIsInVybCIsIl91cmwiLCJpbmRleE9mIiwibG9jYXRpb24iLCJwcm90b2NvbCIsInByZWZpeENsYXNzIiwiQWxpIiwid2luZG93IiwiUGhvdG9GaWVsZCIsInByb3BzIiwic3RhdGUiLCJ3aWR0aCIsImNvbHVtbnMiLCJyZWFkT25seSIsIm9wdGlvbiIsIm11bHRpcGxlIiwibWF4IiwiaXNEaW5nRGluZyIsImNvcnBJZCIsImFsZXJ0IiwibWVzc2FnZSIsImxvY2FsZSIsIm9rQnV0dG9uIiwicGhvdG8iLCJyZXN1bHQiLCJlcnJvckNvZGUiLCJvbkNoYW5nZSIsInZhbHVlIiwicGhvdG9zIiwiZXJyb3JNZXNzYWdlIiwidCIsInBob3RvSXRlbSIsInBob3RvTGlzdCIsIm1hcCIsIml0ZW0iLCJpbmRleCIsIm5hbWUiLCJvbkRlbGV0ZUltYWdlIiwiaGFuZGxlRGVsZXRlSW1hZ2UiLCJiaW5kIiwib25QcmV2aWV3SW1hZ2UiLCJoYW5kbGVQcmV2aWV3IiwibGVuZ3RoIiwib25EZWxldGUiLCJ1cmxzIiwidSIsImltYWdlVmlld2VyIiwiaW1hZ2VzIiwiaW5pdCIsImNvbnNvbGUiLCJsb2ciLCJyZXF1aXJlZFRhZyIsImNsYXNzTmFtZSIsImhpZGUiLCJsYWJlbCIsImxheW91dCIsInJlcXVpcmVkIiwib25QaWNrSGFuZGxlciIsInRhcHBhYmxlIiwicGxhY2Vob2xkZXIiLCJmaWxsIiwicmVuZGVyUGhvdG9MaXN0IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwibWF4VXBsb2FkIiwicHJvcFR5cGVzIiwiaWNvbiIsIlByb3BUeXBlcyIsIm9iamVjdCIsIm51bWJlciIsImJvb2wiLCJzdHJpbmciLCJhcnJheSIsImZ1bmMiLCJkaXNwbGF5TmFtZSIsIm1vZHVs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MkUsU0FBTixDQUFnQkksTUFMVjtBQU1uQmxELFlBQVE3QixNQUFNMkUsU0FBTixDQUFnQkksTUFOTDtBQU9uQmpCLFdBQU85RCxNQUFNMkUsU0FBTixDQUFnQkksTUFQSjtBQVFuQnZELFNBQUt4QixNQUFNMkUsU0FBTixDQUFnQkUsTUFSRjtBQVNuQkwsZUFBV3hFLE1BQU0yRSxTQUFOLENBQWdCRSxNQVRSO0FBVW5CckMsZUFBV3hDLE1BQU0yRSxTQUFOLENBQWdCSyxLQVZSO0FBV25CM0QsY0FBVXJCLE1BQU0yRSxTQUFOLENBQWdCRyxJQVhQO0FBWW5CNUMsY0FBVWxDLE1BQU0yRSxTQUFOLENBQWdCTSxJQVpQO0FBYW5COUIsY0FBVW5ELE1BQU0yRSxTQUFOLENBQWdCTTtBQWJQLENBQXZCOztBQWdCQWpFLFdBQVdrRSxXQUFYLEdBQXlCLFlBQXpCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCcEUsVUFBakIiLCJmaWxlIjoiUGhvdG9GaWVsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGhvdG9GaWVsZCBDb21wb25lbnQgZm9yIHRpbmdsZVxuICogQGF1dGhvclxuICogYWxleC5tbVxuICogQ29weXJpZ2h0IDIwMTQtMjAxNiwgVGluZ2xlIFRlYW0uXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBjbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG5jb25zdCBDb250ZXh0ID0gcmVxdWlyZSgnQGFsaS90aW5nbGUtY29udGV4dCcpO1xuY29uc3QgUGhvdG9GaWVsZEl0ZW0gPSByZXF1aXJlKCcuL1Bob3RvRmllbGRJdGVtJyk7XG5jb25zdCBJY29uID0gcmVxdWlyZSgnQGFsaS90aW5nbGUtaWNvbicpO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbmNvbnN0IGF1dG9GaXhVcmwgPSAodXJsKSA9PiB7XG4gICAgbGV0IF91cmwgPSB1cmw7XG4gICAgaWYoX3VybCkge1xuICAgICAgICAvLyBhdXRvIGZpeCBjZG4gdXJsXG4gICAgICAgIGlmKF91cmwuaW5kZXhPZignLy8nKSAgPT09IDApIHtcbiAgICAgICAgICBfdXJsID0gYCR7bG9jYXRpb24ucHJvdG9jb2x9JHtfdXJsfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF91cmw7XG59O1xuXG5jb25zdCBwcmVmaXhDbGFzcyA9IENvbnRleHQucHJlZml4Q2xhc3M7XG5cbmNvbnN0IEFsaSA9IHdpbmRvdy5BbGkgfHwge307XG5cbmNsYXNzIFBob3RvRmllbGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgd2lkdGg6IGAkezEwMCAvIHByb3BzLmNvbHVtbnN9JWAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgb25QaWNrSGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb24gPSB7XG4gICAgICAgICAgICBtdWx0aXBsZTogISF0aGlzLnByb3BzLm11bHRpcGxlLFxuICAgICAgICAgICAgbWF4OiB0aGlzLnByb3BzLm1heCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKEFsaS5pc0RpbmdEaW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29ycElkKSB7XG4gICAgICAgICAgICAgICAgQWxpLmFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5wcm9wcy5sb2NhbGUgPT09ICd6aF9DTicgPyAnY29ycElkIOS4jeiDveS4uuepuicgOiAnY29ycElkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgb2tCdXR0b246IHRoaXMucHJvcHMubG9jYWxlID09PSAnemhfQ04nID8gJ+ehruWumicgOiAnT0snLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbi5jb3JwSWQgPSB0aGlzLnByb3BzLmNvcnBJZDtcbiAgICAgICAgICAgIEFsaS5waG90byhvcHRpb24sIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmICFyZXN1bHQuZXJyb3JDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5waG90b3MsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEFsaS5hbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQuZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2tCdXR0b246IHRoaXMucHJvcHMubG9jYWxlID09PSAnemhfQ04nID8gJ+ehruWumicgOiAnT0snLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclBob3RvTGlzdCgpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBob3RvSXRlbSA9IHQucHJvcHMucGhvdG9MaXN0Lm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHVybDogaXRlbS51cmwsXG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0LnN0YXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IHQucHJvcHMuY29sdW1ucyxcbiAgICAgICAgICAgICAgICByZWFkT25seTogdC5wcm9wcy5yZWFkT25seSxcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZUltYWdlOiB0LmhhbmRsZURlbGV0ZUltYWdlLmJpbmQodCksXG4gICAgICAgICAgICAgICAgb25QcmV2aWV3SW1hZ2U6IHQuaGFuZGxlUHJldmlldy5iaW5kKHQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFBob3RvRmllbGRJdGVtIHsuLi5wcm9wc30ga2V5PXtpbmRleH0vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhwcmVmaXhDbGFzcygncGhvdG8tbGlzdCcpLCB7ICBbcHJlZml4Q2xhc3MoJ2hpZGUnKV06ICFwaG90b0l0ZW0ubGVuZ3RoIH0pfT5cbiAgICAgICAgICAgICAgICB7cGhvdG9JdGVtfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaGFuZGxlRGVsZXRlSW1hZ2UoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkRlbGV0ZShpbmRleCk7XG4gICAgfVxuXG4gICAgLy8g54K55Ye76aKE6KeIXG4gICAgaGFuZGxlUHJldmlldyhpbmRleCkge1xuICAgICAgICBjb25zdCB0ID0gdGhpcztcbiAgICAgICAgY29uc3QgdXJscyA9IHQucHJvcHMucGhvdG9MaXN0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdSA9IGF1dG9GaXhVcmwoaXRlbS51cmwpO1xuICAgICAgICAgICAgcmV0dXJuIHt1fTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgQWxpLmltYWdlVmlld2VyKHtcbiAgICAgICAgICAgIGltYWdlczogdXJscyxcbiAgICAgICAgICAgIGluaXQ6IGluZGV4LFxuICAgICAgICB9LCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgICBjb25zdCByZXF1aXJlZFRhZyA9IChcbiAgICAgICAgICAgIDxJY29uIG5hbWU9XCJmaWVsZC1yZXF1aXJlZFwiIGNsYXNzTmFtZT17cHJlZml4Q2xhc3MoJ2ZpZWxkLWxheW91dC1sYWJlbC1yZXF1aXJlZCcpfSB3aWR0aD17Nn0gaGVpZ2h0PXs2fSBmaWxsPVwicmVkXCIgLz5cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKHByZWZpeENsYXNzKCdwaG90by1maWVsZCcpLCB7XG4gICAgICAgICAgICBbdC5wcm9wcy5jbGFzc05hbWVdOiAhIXQucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgW3ByZWZpeENsYXNzKCdoaWRlJyldOiB0LnByb3BzLmhpZGUsXG4gICAgICAgICAgICByZWFkT25seTogdC5wcm9wcy5yZWFkT25seSxcbiAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0LnByb3BzLmxhYmVsICYmIHQucHJvcHMubGF5b3V0ID09PSAndicgJiZcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ByZWZpeENsYXNzKCdmaWVsZC1sYXlvdXQtdi1sYWJlbCcpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0LnByb3BzLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMucmVxdWlyZWQgJiYgcmVxdWlyZWRUYWd9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e3Qub25QaWNrSGFuZGxlci5iaW5kKHQpfSBjbGFzc05hbWU9e2NsYXNzbmFtZXMocHJlZml4Q2xhc3MoJ2ZpZWxkLWJveCBGQkgnKSwge1xuICAgICAgICAgICAgICAgICAgICBbcHJlZml4Q2xhc3MoJ1RFJyldOiAhIXQucHJvcHMudGFwcGFibGVcbiAgICAgICAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucHJvcHMubGFiZWwgJiYgdC5wcm9wcy5sYXlvdXQgPT09ICdoJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3ByZWZpeENsYXNzKCdmaWVsZC1sYXlvdXQtaC1sYWJlbCcpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dC5wcm9wcy5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5yZXF1aXJlZCAmJiByZXF1aXJlZFRhZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtwcmVmaXhDbGFzcygnRkIxIFBSIEZCSCBGQkFDJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzbmFtZXMocHJlZml4Q2xhc3MoJ29taXQgc2VsZWN0LWZpZWxkLXBsYWNlaG9sZGVyJyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3ByZWZpeENsYXNzKCdoaWRlJyldOiB0aGlzLnByb3BzLnBob3RvTGlzdC5sZW5ndGggfHwgdC5wcm9wcy5yZWFkT25seSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX0+e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICF0LnByb3BzLnJlYWRPbmx5ICYmIEFsaS5pc0RpbmdEaW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cHJlZml4Q2xhc3MoJ2ljb24gRkJIIEZCQUMgcGhvdG8taWNvbicpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e3ByZWZpeENsYXNzKCdpY29uLXN2ZycpfSBuYW1lPVwicGhvdG9cIiBmaWxsPXt0LnByb3BzLmZpbGx9IHdpZHRoPXsyNn0gaGVpZ2h0PXsyNn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUGhvdG9MaXN0KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblBob3RvRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbHVtbnM6IDMsXG4gICAgbXVsdGlwbGU6IHRydWUsIC8vIOaYr+WQpuWQjOaXtuS4iuS8oOWkmuW8oOeFp+eJh1xuICAgIGxheW91dDogJ2gnLFxuICAgIGxhYmVsOiAnJyxcbiAgICBtYXg6IDksIC8vIOmSiemSiee7hOS7tuS4gOasoeaAp+acgOWkmumAieaLqeS4iuS8oDPlvKDnhafniYdcbiAgICBtYXhVcGxvYWQ6IDEyLCAgIC8vIOaAu+WFseS4iuS8oOWbvueJh+aAu+aVsFxuICAgIHJlYWRPbmx5OiBmYWxzZSxcbiAgICBvbkNoYW5nZTogbm9vcCxcbiAgICBwaG90b0xpc3Q6IFtdLFxuICAgIGZpbGw6ICcjY2NjJyxcbiAgICBsb2NhbGU6ICd6aF9DTicsXG59O1xuXG4vLyBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvcmV1c2FibGUtY29tcG9uZW50cy5odG1sXG5QaG90b0ZpZWxkLnByb3BUeXBlcyA9IHtcbiAgICBpY29uOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbXVsdGlwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGNvcnBJZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsb2NhbGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWF4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG1heFVwbG9hZDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBwaG90b0xpc3Q6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgICByZWFkT25seTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGVsZXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbn07XG5cblBob3RvRmllbGQuZGlzcGxheU5hbWUgPSAnUGhvdG9GaWVsZCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGhvdG9GaWVsZDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

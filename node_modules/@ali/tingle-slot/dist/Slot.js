'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Slot Component for tingle
 * @author caoke.ck
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */

var React = require('react');
var classnames = require('classnames');
var Context = require('@ali/tingle-context');
var Layer = require('@ali/tingle-layer');
var Scroller = require('@ali/tingle-scroller');

// 滑动效果的动画函数
var LINEAR_EASE = {
    style: 'linear',
    fn: function fn(k) {
        return k;
    }
};

var isArray = function isArray(arr) {
    return Object.prototype.toString.call(arr) === '[object Array]';
};
var equals = function equals(obj1, obj2) {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
};

var Slot = function (_React$Component) {
    _inherits(Slot, _React$Component);

    function Slot(props) {
        _classCallCheck(this, Slot);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Slot).call(this, props));

        var t = _this;

        // 初始状态
        t.state = {
            visible: false,
            title: props.title || '',
            data: props.data || [],
            selectedIndex: t.findSelectedIndex(props)
        };
        return _this;
    }

    _createClass(Slot, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var t = this;

            // 获取所有 scroller 的容器
            var slotBody = t.refs.root.querySelector('.' + Context.prefixClass('slot-body'));

            // 获取选项高度
            t.findItemHeight(slotBody);

            // tap 事件触发选中状态变更
            slotBody.addEventListener('iscroll:tap', function (e) {
                var className = e.target.className;
                var reg = new RegExp(Context.prefixClass('slot-item(\\d+)_(\\d+)'));
                var match = reg.exec(className);
                if (match && className.indexOf(Context.prefixClass('slot-item-active')) === -1) {
                    var column = parseInt(match[1]);
                    var index = parseInt(match[2]);
                    t.props.onChange(t.getData(column, index), column, index);
                }
            }, false);

            // 初始化滚动的标记
            t._willRefresh = true;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var t = this;

            // 获取选项高度
            t.findItemHeight();

            // 可见的时候滚动到选中的选项
            if (t.state.visible && t._willRefresh) {

                t._willRefresh = false;
                t.scrollAll(200);
            }
        }

        // 减少渲染次数

    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var t = this;

            var data = nextProps.data;
            var selectedIndex = t.findSelectedIndex(nextProps);

            // 数据变化需要重新初始化 scroller
            var state = {};
            var willRefresh = false;
            if (!equals(t.state.data, data)) {
                state.data = data;
                if (t.props.scrollMod == 'keep') {
                    // 替换列后仍保留指定值的位置
                    // 记录旧值在新数据中的索引
                    t._selectedIndex = t.findSelectedIndex({
                        data: data,
                        value: t.state.selectedIndex.map(function (n, i) {
                            return t.state.data[i][n];
                        })
                    });
                    // 标记变更的列
                    t._columnChanged = t.state.data.map(function (n, i) {
                        return !equals(data[i], n);
                    });
                }
                willRefresh = true;
            }
            if (!equals(t.state.selectedIndex, selectedIndex)) {
                state.selectedIndex = selectedIndex;
                willRefresh = true;
            }
            if (willRefresh) {
                t._willRefresh = true;
                t.setState(state);
            }
        }
    }, {
        key: 'findItemHeight',
        value: function findItemHeight(slotBody) {
            var t = this;
            if (!t._itemHeight) {
                slotBody = slotBody || t.refs.root.querySelector('.' + Context.prefixClass('slot-body'));
                var li = slotBody.querySelector('li');
                t._itemHeight = li ? parseFloat(getComputedStyle(li, null).height) : 0;
            }
        }
    }, {
        key: 'scrollAll',
        value: function scrollAll(time) {
            var t = this;
            if (t.props.scrollMod == 'keep' && t._selectedIndex) {
                t._selectedIndex.forEach(function (index, column) {
                    var scroller = t.refs['scroller' + column].scroller;
                    if (t._columnChanged[column]) {
                        scroller.scrollTo(0, -index * t._itemHeight, 0, LINEAR_EASE);
                    }
                });
                delete t._selectedIndex;
                setTimeout(function () {
                    t.state.selectedIndex.forEach(function (index, column) {
                        var scroller = t.refs['scroller' + column].scroller;
                        scroller.scrollTo(0, -index * t._itemHeight, time, LINEAR_EASE);
                    });
                }, 5);
            } else {
                t.state.selectedIndex.forEach(function (index, column) {
                    var scroller = t.refs['scroller' + column].scroller;
                    scroller.scrollTo(0, -index * t._itemHeight, time, LINEAR_EASE);
                });
            }
        }
    }, {
        key: 'findSelectedIndex',
        value: function findSelectedIndex(props) {
            var data = props.data || [];
            var value = props.value || [];
            var selectedIndex = [];

            // 遍历数据模型
            data.forEach(function (columnData, column) {

                selectedIndex[column] = 0;

                // 遍历每一列
                for (var i = 0; i < columnData.length; i++) {

                    // 定位选中值
                    if (value[column] && columnData[i].value === value[column].value) {
                        selectedIndex[column] = i;
                        break;
                    }
                }
            });

            return selectedIndex;
        }
    }, {
        key: 'handleScrollStart',
        value: function handleScrollStart() {
            var t = this;
            t.setState({
                scrolling: true
            });
        }
    }, {
        key: 'handleScrollEnd',
        value: function handleScrollEnd(column) {
            var t = this;
            t.setState({
                scrolling: false
            });
            var scroller = t.refs['scroller' + column].scroller;
            var height = t._itemHeight;
            var remainder = Math.abs(scroller.y % height);
            var index = scroller.y / height;

            // 没有滚动到选项，需要继续滚动一段距离
            if (remainder) {

                var func = void 0;
                if (scroller.distY > 0) {
                    // 向下滚动
                    if (remainder < height * 0.7) {
                        func = 'ceil';
                    } else {
                        func = 'floor';
                    }
                } else {
                    // 向上滚动
                    if (remainder > height * 0.3) {
                        func = 'floor';
                    } else {
                        func = 'ceil';
                    }
                }

                index = Math[func](scroller.y / height);
            }

            // 在 onChange 中设置状态
            index = Math.abs(index);
            t.props.onChange(t.getData(column, index), column, index);
        }
    }, {
        key: 'show',
        value: function show() {
            var _this2 = this;

            this.setState({
                visible: true
            }, function () {
                _this2.scrollAll(0);
            });
        }
    }, {
        key: 'hide',
        value: function hide() {
            this.setState({
                visible: false
            });
        }
    }, {
        key: 'handleCancel',
        value: function handleCancel() {
            var t = this;
            if (t.state.scrolling) {
                return false;
            }

            try {
                t.props.onCancel();
            } finally {
                t.hide();
            }
        }
    }, {
        key: 'handleConfirm',
        value: function handleConfirm() {
            var t = this;
            if (t.state.scrolling) {
                return false;
            }

            try {
                t.props.onConfirm(t.getData());
            } finally {
                t.hide();
            }
        }

        // 获取值的时候指定变更的列，为什么要这么做，是因为有变更后我不直接改 state！

    }, {
        key: 'getData',
        value: function getData(sColumn, sIndex) {
            var t = this;
            var ret = [];
            var _t$state = t.state;
            var data = _t$state.data;
            var selectedIndex = _t$state.selectedIndex;


            selectedIndex.forEach(function (index, column) {
                ret[column] = data[column][column === sColumn ? sIndex : index];
            });

            return ret;
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;
            var _t$props = t.props;
            var className = _t$props.className;
            var maskCloseable = _t$props.maskCloseable;
            var cancelText = _t$props.cancelText;
            var confirmText = _t$props.confirmText;

            return React.createElement(
                Layer,
                { visible: t.state.visible, bottom: 0, onMaskClick: maskCloseable ? t.handleCancel.bind(t) : function () {
                        return maskCloseable;
                    } },
                React.createElement(
                    'div',
                    { ref: 'root', className: classnames(Context.prefixClass('slot'), _defineProperty({}, className, !!className)) },
                    React.createElement(
                        'div',
                        { className: Context.prefixClass('slot-header FBH FBAC') },
                        React.createElement(
                            'div',
                            { className: Context.prefixClass('slot-cancel'), onClick: t.handleCancel.bind(t) },
                            cancelText
                        ),
                        React.createElement(
                            'div',
                            { className: Context.prefixClass('FB1 FAC slot-title') },
                            t.state.title
                        ),
                        React.createElement(
                            'div',
                            { className: classnames(Context.prefixClass('slot-confirm'), {
                                    enable: !t.state.scrolling
                                }), onClick: t.handleConfirm.bind(t) },
                            confirmText
                        )
                    ),
                    t.props.columns && t.props.columns.length ? React.createElement(
                        'ul',
                        { className: Context.prefixClass('slot-columns FBH') },
                        t.props.columns.map(function (c, i) {
                            return React.createElement(
                                'li',
                                { key: 'column' + i, className: Context.prefixClass('FB1 FAC') },
                                c
                            );
                        })
                    ) : '',
                    React.createElement(
                        'div',
                        { className: Context.prefixClass('slot-body FBH FC9 PR') },
                        t.state.data.map(function (m, i) {
                            return React.createElement(
                                Scroller,
                                { ref: 'scroller' + i, key: 'scroller' + i, className: Context.prefixClass('FB1'), autoRefresh: t.state.visible, tap: 'iscroll:tap', onScrollStart: t.handleScrollStart.bind(t, i), onScrollEnd: t.handleScrollEnd.bind(t, i) },
                                React.createElement(
                                    'ul',
                                    null,
                                    React.createElement('li', null),
                                    React.createElement('li', null),
                                    m.map(function (n, j) {
                                        return React.createElement(
                                            'li',
                                            { key: 'item' + i + '_' + j, className: classnames(Context.prefixClass('slot-item' + i + '_' + j), _defineProperty({}, Context.prefixClass('slot-item-active'), j === t.state.selectedIndex[i])) },
                                            n.text
                                        );
                                    }),
                                    React.createElement('li', null),
                                    React.createElement('li', null)
                                )
                            );
                        })
                    )
                )
            );
        }
    }]);

    return Slot;
}(React.Component);

Slot.defaultProps = {
    title: '',
    value: [],
    maskCloseable: true,
    data: [],
    className: '',
    confirmText: '完成',
    cancelText: '取消',
    onConfirm: function onConfirm() {},
    onCancel: function onCancel() {},
    onChange: function onChange() {},

    scrollMod: 'reset',
    columns: []
};

// http://facebook.github.io/react/docs/reusable-components.html
Slot.propTypes = {
    className: React.PropTypes.string,
    title: React.PropTypes.string,
    data: React.PropTypes.array.isRequired,
    value: React.PropTypes.array,
    maskCloseable: React.PropTypes.bool,
    confirmText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    onConfirm: React.PropTypes.func,
    onCancel: React.PropTypes.func,
    onChange: React.PropTypes.func,
    scrollMod: React.PropTypes.string,
    columns: React.PropTypes.array
};

// 格式化单列数据
Slot.formatColumnValue = function (columnData, value) {

    // 兼容简单选中值
    var columnValue = void 0;
    if (typeof value !== 'undefined') {
        if (value.hasOwnProperty('value')) {
            columnValue = value.value;
        } else {
            columnValue = value;
        }
    }
    value = undefined;

    // 遍历每一项
    for (var i = 0; i < columnData.length; i++) {
        var cell = columnData[i];

        // 兼容非对象的数据
        if ((typeof cell === 'undefined' ? 'undefined' : _typeof(cell)) !== 'object') {
            cell = columnData[i] = {
                text: cell,
                value: cell
            };
        }

        // 补全缺失数据
        if (!cell.hasOwnProperty('text')) {
            cell.text = cell.value;
        }
        if (!cell.hasOwnProperty('value')) {
            cell.value = cell.text;
        }

        // 定位选中值
        if (cell.value === columnValue) {
            value = cell;
        }
    }

    // 默认选中第一项
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
        value = columnData[0];
    }

    return {
        columnData: columnData,
        columnValue: value
    };
};

// 格式化多列数据
Slot.formatDataValue = function () {
    var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    var value = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];


    // 兼容单列数据的缩略写法
    if (!isArray(data[0])) {
        data = [data];
    }
    if (!isArray(value)) {
        value = [value];
    }

    // 遍历数据模型
    data.forEach(function (columnData, column) {

        // 格式化列数据
        var ret = Slot.formatColumnValue(columnData, value[column]);
        value[column] = ret.columnValue;
    });

    return {
        data: data,
        value: value
    };
};

Slot.displayName = 'Slot';

module.exports = Slot;
//# sourceMappingURL=data:application/json;base64,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RCxZQUFJLENBQUMsS0FBSyxjQUFMLENBQW9CLE9BQXBCLENBQUwsRUFBbUM7QUFDL0IsaUJBQUssS0FBTCxHQUFhLEtBQUssSUFBbEI7QUFDSDs7O0FBR0QsWUFBSSxLQUFLLEtBQUwsS0FBZSxXQUFuQixFQUFnQztBQUM1QixvQkFBUSxJQUFSO0FBQ0g7QUFDSjs7O0FBR0QsUUFBSSxRQUFPLEtBQVAseUNBQU8sS0FBUCxPQUFpQixRQUFyQixFQUErQjtBQUMzQixnQkFBUSxXQUFXLENBQVgsQ0FBUjtBQUNIOztBQUVELFdBQU87QUFDSCxvQkFBWSxVQURUO0FBRUgscUJBQWE7QUFGVixLQUFQO0FBSUgsQ0FoREQ7OztBQW1EQSxLQUFLLGVBQUwsR0FBdUIsWUFBZ0M7QUFBQSxRQUF2QixJQUF1Qix5REFBaEIsRUFBZ0I7QUFBQSxRQUFaLEtBQVkseURBQUosRUFBSTs7OztBQUduRCxRQUFJLENBQUMsUUFBUSxLQUFLLENBQUwsQ0FBUixDQUFMLEVBQXVCO0FBQ25CLGVBQU8sQ0FBRSxJQUFGLENBQVA7QUFDSDtBQUNELFFBQUksQ0FBQyxRQUFRLEtBQVIsQ0FBTCxFQUFxQjtBQUNqQixnQkFBUSxDQUFFLEtBQUYsQ0FBUjtBQUNIOzs7QUFHRCxTQUFLLE9BQUwsQ0FBYSxVQUFTLFVBQVQsRUFBcUIsTUFBckIsRUFBNkI7OztBQUd0QyxZQUFJLE1BQU0sS0FBSyxpQkFBTCxDQUF1QixVQUF2QixFQUFtQyxNQUFNLE1BQU4sQ0FBbkMsQ0FBVjtBQUNBLGNBQU0sTUFBTixJQUFnQixJQUFJLFdBQXBCO0FBQ0gsS0FMRDs7QUFPQSxXQUFPO0FBQ0gsY0FBTSxJQURIO0FBRUgsZUFBTztBQUZKLEtBQVA7QUFJSCxDQXRCRDs7QUF3QkEsS0FBSyxXQUFMLEdBQW1CLE1BQW5COztBQUVBLE9BQU8sT0FBUCxHQUFpQixJQUFqQiIsImZpbGUiOiJTbG90LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTbG90IENvbXBvbmVudCBmb3IgdGluZ2xlXG4gKiBAYXV0aG9yIGNhb2tlLmNrXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNiwgVGluZ2xlIFRlYW0uXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGNsYXNzbmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5jb25zdCBDb250ZXh0ID0gcmVxdWlyZSgnQGFsaS90aW5nbGUtY29udGV4dCcpO1xuY29uc3QgTGF5ZXIgPSByZXF1aXJlKCdAYWxpL3RpbmdsZS1sYXllcicpO1xuY29uc3QgU2Nyb2xsZXIgPSByZXF1aXJlKCdAYWxpL3RpbmdsZS1zY3JvbGxlcicpO1xuXG4vLyDmu5HliqjmlYjmnpznmoTliqjnlLvlh73mlbBcbmNvbnN0IExJTkVBUl9FQVNFID0ge1xuICAgIHN0eWxlOiAnbGluZWFyJyxcbiAgICBmbjogKGspID0+IGtcbn07XG5cbmxldCBpc0FycmF5ID0gKGFycikgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5sZXQgZXF1YWxzID0gKG9iajEsIG9iajIpID0+IEpTT04uc3RyaW5naWZ5KG9iajEpID09PSBKU09OLnN0cmluZ2lmeShvYmoyKTtcblxuY2xhc3MgU2xvdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuXG4gICAgICAgIC8vIOWIneWni+eKtuaAgVxuICAgICAgICB0LnN0YXRlID0ge1xuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0aXRsZTogcHJvcHMudGl0bGUgfHwgJycsXG4gICAgICAgICAgICBkYXRhOiBwcm9wcy5kYXRhIHx8IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogdC5maW5kU2VsZWN0ZWRJbmRleChwcm9wcylcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuXG4gICAgICAgIC8vIOiOt+WPluaJgOaciSBzY3JvbGxlciDnmoTlrrnlmahcbiAgICAgICAgbGV0IHNsb3RCb2R5ID0gdC5yZWZzLnJvb3QucXVlcnlTZWxlY3RvcihgLiR7Q29udGV4dC5wcmVmaXhDbGFzcygnc2xvdC1ib2R5Jyl9YCk7XG5cbiAgICAgICAgLy8g6I635Y+W6YCJ6aG56auY5bqmXG4gICAgICAgIHQuZmluZEl0ZW1IZWlnaHQoc2xvdEJvZHkpO1xuXG4gICAgICAgIC8vIHRhcCDkuovku7bop6blj5HpgInkuK3nirbmgIHlj5jmm7RcbiAgICAgICAgc2xvdEJvZHkuYWRkRXZlbnRMaXN0ZW5lcignaXNjcm9sbDp0YXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBsZXQgY2xhc3NOYW1lID0gZS50YXJnZXQuY2xhc3NOYW1lO1xuICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoQ29udGV4dC5wcmVmaXhDbGFzcygnc2xvdC1pdGVtKFxcXFxkKylfKFxcXFxkKyknKSk7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSByZWcuZXhlYyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoICYmIGNsYXNzTmFtZS5pbmRleE9mKENvbnRleHQucHJlZml4Q2xhc3MoJ3Nsb3QtaXRlbS1hY3RpdmUnKSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbiA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBwYXJzZUludChtYXRjaFsyXSk7XG4gICAgICAgICAgICAgICAgdC5wcm9wcy5vbkNoYW5nZSh0LmdldERhdGEoY29sdW1uLCBpbmRleCksIGNvbHVtbiwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgLy8g5Yid5aeL5YyW5rua5Yqo55qE5qCH6K6wXG4gICAgICAgIHQuX3dpbGxSZWZyZXNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcblxuICAgICAgICAvLyDojrflj5bpgInpobnpq5jluqZcbiAgICAgICAgdC5maW5kSXRlbUhlaWdodCgpO1xuXG4gICAgICAgIC8vIOWPr+ingeeahOaXtuWAmea7muWKqOWIsOmAieS4reeahOmAiemhuVxuICAgICAgICBpZiAodC5zdGF0ZS52aXNpYmxlICYmIHQuX3dpbGxSZWZyZXNoKSB7XG5cbiAgICAgICAgICAgIHQuX3dpbGxSZWZyZXNoID0gZmFsc2U7XG4gICAgICAgICAgICB0LnNjcm9sbEFsbCgyMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g5YeP5bCR5riy5p+T5qyh5pWwXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuXG4gICAgICAgIGxldCBkYXRhID0gbmV4dFByb3BzLmRhdGE7XG4gICAgICAgIGxldCBzZWxlY3RlZEluZGV4ID0gdC5maW5kU2VsZWN0ZWRJbmRleChuZXh0UHJvcHMpO1xuXG4gICAgICAgIC8vIOaVsOaNruWPmOWMlumcgOimgemHjeaWsOWIneWni+WMliBzY3JvbGxlclxuICAgICAgICBsZXQgc3RhdGUgPSB7fTtcbiAgICAgICAgbGV0IHdpbGxSZWZyZXNoID0gZmFsc2U7XG4gICAgICAgIGlmICghZXF1YWxzKHQuc3RhdGUuZGF0YSwgZGF0YSkpIHtcbiAgICAgICAgICAgIHN0YXRlLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgaWYgKHQucHJvcHMuc2Nyb2xsTW9kID09ICdrZWVwJykgeyAvLyDmm7/mjaLliJflkI7ku43kv53nlZnmjIflrprlgLznmoTkvY3nva5cbiAgICAgICAgICAgICAgICAvLyDorrDlvZXml6flgLzlnKjmlrDmlbDmja7kuK3nmoTntKLlvJVcbiAgICAgICAgICAgICAgICB0Ll9zZWxlY3RlZEluZGV4ID0gdC5maW5kU2VsZWN0ZWRJbmRleCh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LnN0YXRlLnNlbGVjdGVkSW5kZXgubWFwKGZ1bmN0aW9uKG4sIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnN0YXRlLmRhdGFbaV1bbl07XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8g5qCH6K6w5Y+Y5pu055qE5YiXXG4gICAgICAgICAgICAgICAgdC5fY29sdW1uQ2hhbmdlZCA9IHQuc3RhdGUuZGF0YS5tYXAoZnVuY3Rpb24obiwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWVxdWFscyhkYXRhW2ldLCBuKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbGxSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVxdWFscyh0LnN0YXRlLnNlbGVjdGVkSW5kZXgsIHNlbGVjdGVkSW5kZXgpKSB7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgICAgIHdpbGxSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lsbFJlZnJlc2gpIHtcbiAgICAgICAgICAgIHQuX3dpbGxSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHQuc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZEl0ZW1IZWlnaHQoc2xvdEJvZHkpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBpZiAoIXQuX2l0ZW1IZWlnaHQpIHtcbiAgICAgICAgICAgIHNsb3RCb2R5ID0gc2xvdEJvZHkgfHwgdC5yZWZzLnJvb3QucXVlcnlTZWxlY3RvcihgLiR7Q29udGV4dC5wcmVmaXhDbGFzcygnc2xvdC1ib2R5Jyl9YCk7XG4gICAgICAgICAgICBsZXQgbGkgPSBzbG90Qm9keS5xdWVyeVNlbGVjdG9yKCdsaScpO1xuICAgICAgICAgICAgdC5faXRlbUhlaWdodCA9IGxpID8gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKGxpLCBudWxsKS5oZWlnaHQpIDogMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbEFsbCh0aW1lKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgaWYgKHQucHJvcHMuc2Nyb2xsTW9kID09ICdrZWVwJyAmJiB0Ll9zZWxlY3RlZEluZGV4KSB7XG4gICAgICAgICAgICB0Ll9zZWxlY3RlZEluZGV4LmZvckVhY2goZnVuY3Rpb24oaW5kZXgsIGNvbHVtbikge1xuICAgICAgICAgICAgICAgIGxldCBzY3JvbGxlciA9IHQucmVmc1tgc2Nyb2xsZXIke2NvbHVtbn1gXS5zY3JvbGxlcjtcbiAgICAgICAgICAgICAgICBpZiAodC5fY29sdW1uQ2hhbmdlZFtjb2x1bW5dKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGVyLnNjcm9sbFRvKDAsIC1pbmRleCAqIHQuX2l0ZW1IZWlnaHQsIDAsIExJTkVBUl9FQVNFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSB0Ll9zZWxlY3RlZEluZGV4O1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0LnN0YXRlLnNlbGVjdGVkSW5kZXguZm9yRWFjaChmdW5jdGlvbihpbmRleCwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY3JvbGxlciA9IHQucmVmc1tgc2Nyb2xsZXIke2NvbHVtbn1gXS5zY3JvbGxlcjtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXIuc2Nyb2xsVG8oMCwgLWluZGV4ICogdC5faXRlbUhlaWdodCwgdGltZSwgTElORUFSX0VBU0UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LnN0YXRlLnNlbGVjdGVkSW5kZXguZm9yRWFjaChmdW5jdGlvbihpbmRleCwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNjcm9sbGVyID0gdC5yZWZzW2BzY3JvbGxlciR7Y29sdW1ufWBdLnNjcm9sbGVyO1xuICAgICAgICAgICAgICAgIHNjcm9sbGVyLnNjcm9sbFRvKDAsIC1pbmRleCAqIHQuX2l0ZW1IZWlnaHQsIHRpbWUsIExJTkVBUl9FQVNFKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZFNlbGVjdGVkSW5kZXgocHJvcHMpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBwcm9wcy5kYXRhIHx8IFtdO1xuICAgICAgICBsZXQgdmFsdWUgPSBwcm9wcy52YWx1ZSB8fCBbXTtcbiAgICAgICAgbGV0IHNlbGVjdGVkSW5kZXggPSBbXTtcblxuICAgICAgICAvLyDpgY3ljobmlbDmja7mqKHlnotcbiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbkRhdGEsIGNvbHVtbikge1xuXG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4W2NvbHVtbl0gPSAwO1xuXG4gICAgICAgICAgICAvLyDpgY3ljobmr4/kuIDliJdcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uRGF0YS5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgLy8g5a6a5L2N6YCJ5Lit5YC8XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlW2NvbHVtbl0gJiYgY29sdW1uRGF0YVtpXS52YWx1ZSA9PT0gdmFsdWVbY29sdW1uXS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4W2NvbHVtbl0gPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxlY3RlZEluZGV4O1xuICAgIH1cblxuICAgIGhhbmRsZVNjcm9sbFN0YXJ0KCkge1xuICAgICAgICBsZXQgdCA9IHRoaXM7XG4gICAgICAgIHQuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2Nyb2xsaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhbmRsZVNjcm9sbEVuZChjb2x1bW4pIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICB0LnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNjcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBzY3JvbGxlciA9IHQucmVmc1tgc2Nyb2xsZXIke2NvbHVtbn1gXS5zY3JvbGxlcjtcbiAgICAgICAgbGV0IGhlaWdodCA9IHQuX2l0ZW1IZWlnaHQ7XG4gICAgICAgIGxldCByZW1haW5kZXIgPSBNYXRoLmFicyhzY3JvbGxlci55ICUgaGVpZ2h0KTtcbiAgICAgICAgbGV0IGluZGV4ID0gc2Nyb2xsZXIueSAvIGhlaWdodDtcblxuICAgICAgICAvLyDmsqHmnInmu5rliqjliLDpgInpobnvvIzpnIDopoHnu6fnu63mu5rliqjkuIDmrrXot53nprtcbiAgICAgICAgaWYgKHJlbWFpbmRlcikge1xuXG4gICAgICAgICAgICBsZXQgZnVuYztcbiAgICAgICAgICAgIGlmIChzY3JvbGxlci5kaXN0WSA+IDApIHsgLy8g5ZCR5LiL5rua5YqoXG4gICAgICAgICAgICAgICAgaWYgKHJlbWFpbmRlciA8IGhlaWdodCAqIDAuNykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jID0gJ2NlaWwnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMgPSAnZmxvb3InO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIOWQkeS4iua7muWKqFxuICAgICAgICAgICAgICAgIGlmIChyZW1haW5kZXIgPiBoZWlnaHQgKiAwLjMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyA9ICdmbG9vcic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyA9ICdjZWlsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4ID0gTWF0aFtmdW5jXShzY3JvbGxlci55IC8gaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWcqCBvbkNoYW5nZSDkuK3orr7nva7nirbmgIFcbiAgICAgICAgaW5kZXggPSBNYXRoLmFicyhpbmRleCk7XG4gICAgICAgIHQucHJvcHMub25DaGFuZ2UodC5nZXREYXRhKGNvbHVtbiwgaW5kZXgpLCBjb2x1bW4sIGluZGV4KTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBbGwoMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2FuY2VsKCkge1xuICAgICAgICBsZXQgdCA9IHRoaXM7XG4gICAgICAgIGlmICh0LnN0YXRlLnNjcm9sbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHQucHJvcHMub25DYW5jZWwoKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHQuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ29uZmlybSgpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzO1xuICAgICAgICBpZiAodC5zdGF0ZS5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0LnByb3BzLm9uQ29uZmlybSh0LmdldERhdGEoKSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiOt+WPluWAvOeahOaXtuWAmeaMh+WumuWPmOabtOeahOWIl++8jOS4uuS7gOS5iOimgei/meS5iOWBmu+8jOaYr+WboOS4uuacieWPmOabtOWQjuaIkeS4jeebtOaOpeaUuSBzdGF0Ze+8gVxuICAgIGdldERhdGEoc0NvbHVtbiwgc0luZGV4KSB7XG4gICAgICAgIGxldCB0ID0gdGhpcztcbiAgICAgICAgbGV0IHJldCA9IFtdO1xuICAgICAgICBsZXQgeyBkYXRhLCBzZWxlY3RlZEluZGV4IH0gPSB0LnN0YXRlO1xuXG4gICAgICAgIHNlbGVjdGVkSW5kZXguZm9yRWFjaChmdW5jdGlvbihpbmRleCwgY29sdW1uKSB7XG4gICAgICAgICAgICByZXRbY29sdW1uXSA9IGRhdGFbY29sdW1uXVtjb2x1bW4gPT09IHNDb2x1bW4gPyBzSW5kZXggOiBpbmRleF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdCA9IHRoaXM7XG4gICAgICAgIGxldCB7IGNsYXNzTmFtZSwgbWFza0Nsb3NlYWJsZSwgY2FuY2VsVGV4dCwgY29uZmlybVRleHQgfSA9IHQucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TGF5ZXIgdmlzaWJsZT17dC5zdGF0ZS52aXNpYmxlfSBib3R0b209ezB9IG9uTWFza0NsaWNrPXttYXNrQ2xvc2VhYmxlID8gdC5oYW5kbGVDYW5jZWwuYmluZCh0KSA6ICgoKSA9PiBtYXNrQ2xvc2VhYmxlKX0+XG4gICAgICAgICAgICAgICAgPGRpdiByZWY9XCJyb290XCIgY2xhc3NOYW1lPXtjbGFzc25hbWVzKENvbnRleHQucHJlZml4Q2xhc3MoJ3Nsb3QnKSwge1xuICAgICAgICAgICAgICAgICAgICBbY2xhc3NOYW1lXTogISFjbGFzc05hbWVcbiAgICAgICAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtDb250ZXh0LnByZWZpeENsYXNzKCdzbG90LWhlYWRlciBGQkggRkJBQycpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtDb250ZXh0LnByZWZpeENsYXNzKCdzbG90LWNhbmNlbCcpfSBvbkNsaWNrPXt0LmhhbmRsZUNhbmNlbC5iaW5kKHQpfT57Y2FuY2VsVGV4dH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtDb250ZXh0LnByZWZpeENsYXNzKCdGQjEgRkFDIHNsb3QtdGl0bGUnKX0+e3Quc3RhdGUudGl0bGV9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhDb250ZXh0LnByZWZpeENsYXNzKCdzbG90LWNvbmZpcm0nKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZTogIXQuc3RhdGUuc2Nyb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX0gIG9uQ2xpY2s9e3QuaGFuZGxlQ29uZmlybS5iaW5kKHQpfT57Y29uZmlybVRleHR9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7dC5wcm9wcy5jb2x1bW5zICYmIHQucHJvcHMuY29sdW1ucy5sZW5ndGggPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtDb250ZXh0LnByZWZpeENsYXNzKCdzbG90LWNvbHVtbnMgRkJIJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3QucHJvcHMuY29sdW1ucy5tYXAoKGMsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtgY29sdW1uJHtpfWB9IGNsYXNzTmFtZT17Q29udGV4dC5wcmVmaXhDbGFzcygnRkIxIEZBQycpfT57Y308L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICkgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e0NvbnRleHQucHJlZml4Q2xhc3MoJ3Nsb3QtYm9keSBGQkggRkM5IFBSJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Quc3RhdGUuZGF0YS5tYXAoZnVuY3Rpb24obSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTY3JvbGxlciByZWY9e2BzY3JvbGxlciR7aX1gfSBrZXk9e2BzY3JvbGxlciR7aX1gfSBjbGFzc05hbWU9e0NvbnRleHQucHJlZml4Q2xhc3MoJ0ZCMScpfSBhdXRvUmVmcmVzaD17dC5zdGF0ZS52aXNpYmxlfSB0YXA9XCJpc2Nyb2xsOnRhcFwiIG9uU2Nyb2xsU3RhcnQ9e3QuaGFuZGxlU2Nyb2xsU3RhcnQuYmluZCh0LCBpKX0gb25TY3JvbGxFbmQ9e3QuaGFuZGxlU2Nyb2xsRW5kLmJpbmQodCwgaSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttLm1hcChmdW5jdGlvbihuLCBqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtgaXRlbSR7aX1fJHtqfWB9IGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhDb250ZXh0LnByZWZpeENsYXNzKGBzbG90LWl0ZW0ke2l9XyR7an1gKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgQ29udGV4dC5wcmVmaXhDbGFzcygnc2xvdC1pdGVtLWFjdGl2ZScpIF06IGogPT09IHQuc3RhdGUuc2VsZWN0ZWRJbmRleFtpXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9PntuLnRleHR9PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2Nyb2xsZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvTGF5ZXI+XG4gICAgICAgIClcbiAgICB9XG59XG5cblNsb3QuZGVmYXVsdFByb3BzID0ge1xuICAgIHRpdGxlOiAnJyxcbiAgICB2YWx1ZTogW10sXG4gICAgbWFza0Nsb3NlYWJsZTogdHJ1ZSxcbiAgICBkYXRhOltdLFxuICAgIGNsYXNzTmFtZTonJyxcbiAgICBjb25maXJtVGV4dDogJ+WujOaIkCcsXG4gICAgY2FuY2VsVGV4dDogJ+WPlua2iCcsXG4gICAgb25Db25maXJtKCkge30sXG4gICAgb25DYW5jZWwoKSB7fSxcbiAgICBvbkNoYW5nZSgpIHt9LFxuICAgIHNjcm9sbE1vZDogJ3Jlc2V0JyxcbiAgICBjb2x1bW5zOiBbXVxufTtcblxuLy8gaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JldXNhYmxlLWNvbXBvbmVudHMuaHRtbFxuU2xvdC5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRhdGE6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXG4gICAgbWFza0Nsb3NlYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY29uZmlybVRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2FuY2VsVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNvbmZpcm06IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Nyb2xsTW9kOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheVxufTtcblxuLy8g5qC85byP5YyW5Y2V5YiX5pWw5o2uXG5TbG90LmZvcm1hdENvbHVtblZhbHVlID0gZnVuY3Rpb24oY29sdW1uRGF0YSwgdmFsdWUpIHtcblxuICAgIC8vIOWFvOWuueeugOWNlemAieS4reWAvFxuICAgIGxldCBjb2x1bW5WYWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGNvbHVtblZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2x1bW5WYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgLy8g6YGN5Y6G5q+P5LiA6aG5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5EYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjZWxsID0gY29sdW1uRGF0YVtpXTtcblxuICAgICAgICAvLyDlhbzlrrnpnZ7lr7nosaHnmoTmlbDmja5cbiAgICAgICAgaWYgKHR5cGVvZiBjZWxsICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2VsbCA9IGNvbHVtbkRhdGFbaV0gPSB7XG4gICAgICAgICAgICAgICAgdGV4dDogY2VsbCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogY2VsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOihpeWFqOe8uuWkseaVsOaNrlxuICAgICAgICBpZiAoIWNlbGwuaGFzT3duUHJvcGVydHkoJ3RleHQnKSkge1xuICAgICAgICAgICAgY2VsbC50ZXh0ID0gY2VsbC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNlbGwuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGNlbGwudmFsdWUgPSBjZWxsLnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlrprkvY3pgInkuK3lgLxcbiAgICAgICAgaWYgKGNlbGwudmFsdWUgPT09IGNvbHVtblZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNlbGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDpu5jorqTpgInkuK3nrKzkuIDpoblcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB2YWx1ZSA9IGNvbHVtbkRhdGFbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29sdW1uRGF0YTogY29sdW1uRGF0YSxcbiAgICAgICAgY29sdW1uVmFsdWU6IHZhbHVlXG4gICAgfVxufTtcblxuLy8g5qC85byP5YyW5aSa5YiX5pWw5o2uXG5TbG90LmZvcm1hdERhdGFWYWx1ZSA9IGZ1bmN0aW9uKGRhdGEgPSBbXSwgdmFsdWUgPSBbXSkge1xuXG4gICAgLy8g5YW85a655Y2V5YiX5pWw5o2u55qE57yp55Wl5YaZ5rOVXG4gICAgaWYgKCFpc0FycmF5KGRhdGFbMF0pKSB7XG4gICAgICAgIGRhdGEgPSBbIGRhdGEgXTtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IFsgdmFsdWUgXTtcbiAgICB9XG5cbiAgICAvLyDpgY3ljobmlbDmja7mqKHlnotcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oY29sdW1uRGF0YSwgY29sdW1uKSB7XG5cbiAgICAgICAgLy8g5qC85byP5YyW5YiX5pWw5o2uXG4gICAgICAgIGxldCByZXQgPSBTbG90LmZvcm1hdENvbHVtblZhbHVlKGNvbHVtbkRhdGEsIHZhbHVlW2NvbHVtbl0pO1xuICAgICAgICB2YWx1ZVtjb2x1bW5dID0gcmV0LmNvbHVtblZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbn07XG5cblNsb3QuZGlzcGxheU5hbWUgPSAnU2xvdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gU2xvdDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

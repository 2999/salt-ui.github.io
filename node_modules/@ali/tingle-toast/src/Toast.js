/**
 * Toast Component for tingle
 * @author minjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
/* eslint-disable */
const React = require('react');
const ReactDOM = require('react-dom');
const classnames = require('classnames');
const {VBox} = require('@ali/tingle-box');
const Layer = require('@ali/tingle-layer');
const Icon = require('@ali/tingle-icon');
const {prefixClass, noop} = require('@ali/tingle-context');

const iconNames = {
    success: 'check-round',
    error: 'cross-round',
    fail: 'toast-fail',
    loading: 'toast-loading'
};

class Toast extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            visible: props.visible,
            icon: this.getIconName(props)
        }
    }

    getIconName(props) {
        return props.icon || iconNames[props.type]
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            visible: nextProps.visible,
            icon: this.getIconName(nextProps)
        });
    }

    startCountdown() {
        let t = this;
        t.timer = setTimeout(() => {
            t.setState({
                visible: false
            });
            clearTimeout(t.timer);
        }, t.props.duration);
    }

    handleDidHide() {
        this.props.onDidHide();
    }

    renderIcon(icon) {
        if (!icon) {
            return null;
        }
        // svg loader 无法解析 loading 的 svg
        // 使用 dangerouslySetInnerHTML={{__html: toastLoading}} 在 uc 内核也有问题
        // 临时方案使用 background
        if(icon === 'toast-loading') {
            return (
                <div className={prefixClass('toast-icon toast-icon-loading')} />
            );
        }
        return (
            <Icon className={classnames(prefixClass('toast-icon'), {
                [icon]: !!icon
            })} name={icon} fill="#fff"/>
        );
    }

    render() {
        let t = this;
        let {visible, icon} = t.state;

        let {className, content, autoHide, ...other} = t.props;

        // 如果可见 且 可自动关闭 则开始倒计时
        visible && autoHide && t.startCountdown();

        return <Layer ref='root' {...other} className={classnames(prefixClass('toast'), {
            [className]: !!className
        })} visible={visible} onDidHide={t.handleDidHide.bind(t)}>
            <VBox hAlign='center'>
                {this.renderIcon(icon)}
                {content && <div className={prefixClass('toast-content')}>{content}</div>}
            </VBox>
        </Layer>;
    }
}

Toast.defaultProps = {
    width: 'auto',
    height: 'auto',
    hasMask: false,
    onDidHide: noop,
    visible: false,
    autoHide: true,
    content: '',
    icon: '',
    duration: 1500
}

// http://facebook.github.io/react/docs/reusable-components.html
Toast.propTypes = {
    visible: React.PropTypes.bool,
    hasMask: React.PropTypes.bool,
    autoHide: React.PropTypes.bool,
    onDidHide: React.PropTypes.func,
    width: React.PropTypes.oneOfType([
        React.PropTypes.string,
        React.PropTypes.number
    ]),
    content: React.PropTypes.string,
    icon: React.PropTypes.string,
    duration: React.PropTypes.number
}

let WRAPPER_ID = '__TingleGlobalToast__';
let doc = document;
let wrapper = doc.getElementById(WRAPPER_ID);
if (!wrapper) {
    wrapper = doc.createElement('div');
    wrapper.id = WRAPPER_ID;
    doc.body.appendChild(wrapper);
}
ReactDOM.render(<Toast visible={false}/>, wrapper);

Toast.show = (props) => {
    props.visible = true;
    ReactDOM.render(<Toast {...props}/>, wrapper);
};

Toast.hide = (fn) => {
    ReactDOM.render(<Toast visible={false} onDidHide={fn}/>, wrapper);
};

Toast.displayName = 'Toast';

module.exports = Toast;

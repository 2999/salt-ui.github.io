'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Toast Component for tingle
 * @author minjie
 *
 * Copyright 2014-2016, Tingle Team.
 * All rights reserved.
 */
/* eslint-disable */
var React = require('react');
var ReactDOM = require('react-dom');
var classnames = require('classnames');

var _require = require('@ali/tingle-box');

var VBox = _require.VBox;

var Layer = require('@ali/tingle-layer');
var Icon = require('@ali/tingle-icon');

var _require2 = require('@ali/tingle-context');

var prefixClass = _require2.prefixClass;
var noop = _require2.noop;


var iconNames = {
    success: 'check-round',
    error: 'cross-round',
    fail: 'toast-fail',
    loading: 'toast-loading'
};

var Toast = function (_React$Component) {
    _inherits(Toast, _React$Component);

    function Toast(props) {
        _classCallCheck(this, Toast);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Toast).call(this, props));

        _this.state = {
            visible: props.visible,
            icon: _this.getIconName(props)
        };
        return _this;
    }

    _createClass(Toast, [{
        key: 'getIconName',
        value: function getIconName(props) {
            return props.icon || iconNames[props.type];
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                visible: nextProps.visible,
                icon: this.getIconName(nextProps)
            });
        }
    }, {
        key: 'startCountdown',
        value: function startCountdown() {
            var t = this;
            t.timer = setTimeout(function () {
                t.setState({
                    visible: false
                });
                clearTimeout(t.timer);
            }, t.props.duration);
        }
    }, {
        key: 'handleDidHide',
        value: function handleDidHide() {
            this.props.onDidHide();
        }
    }, {
        key: 'renderIcon',
        value: function renderIcon(icon) {
            if (!icon) {
                return null;
            }
            // svg loader 无法解析 loading 的 svg
            // 使用 dangerouslySetInnerHTML={{__html: toastLoading}} 在 uc 内核也有问题
            // 临时方案使用 background
            if (icon === 'toast-loading') {
                return React.createElement('div', { className: prefixClass('toast-icon toast-icon-loading') });
            }
            return React.createElement(Icon, { className: classnames(prefixClass('toast-icon'), _defineProperty({}, icon, !!icon)), name: icon, fill: '#fff' });
        }
    }, {
        key: 'render',
        value: function render() {
            var t = this;
            var _t$state = t.state;
            var visible = _t$state.visible;
            var icon = _t$state.icon;
            var _t$props = t.props;
            var className = _t$props.className;
            var content = _t$props.content;
            var autoHide = _t$props.autoHide;

            var other = _objectWithoutProperties(_t$props, ['className', 'content', 'autoHide']);

            // 如果可见 且 可自动关闭 则开始倒计时


            visible && autoHide && t.startCountdown();

            return React.createElement(
                Layer,
                _extends({ ref: 'root' }, other, { className: classnames(prefixClass('toast'), _defineProperty({}, className, !!className)), visible: visible, onDidHide: t.handleDidHide.bind(t) }),
                React.createElement(
                    VBox,
                    { hAlign: 'center' },
                    this.renderIcon(icon),
                    content && React.createElement(
                        'div',
                        { className: prefixClass('toast-content') },
                        content
                    )
                )
            );
        }
    }]);

    return Toast;
}(React.Component);

Toast.defaultProps = {
    width: 'auto',
    height: 'auto',
    hasMask: false,
    onDidHide: noop,
    visible: false,
    autoHide: true,
    content: '',
    icon: '',
    duration: 1500
};

// http://facebook.github.io/react/docs/reusable-components.html
Toast.propTypes = {
    visible: React.PropTypes.bool,
    hasMask: React.PropTypes.bool,
    autoHide: React.PropTypes.bool,
    onDidHide: React.PropTypes.func,
    width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    content: React.PropTypes.string,
    icon: React.PropTypes.string,
    duration: React.PropTypes.number
};

var WRAPPER_ID = '__TingleGlobalToast__';
var doc = document;
var wrapper = doc.getElementById(WRAPPER_ID);
if (!wrapper) {
    wrapper = doc.createElement('div');
    wrapper.id = WRAPPER_ID;
    doc.body.appendChild(wrapper);
}
ReactDOM.render(React.createElement(Toast, { visible: false }), wrapper);

Toast.show = function (props) {
    props.visible = true;
    ReactDOM.render(React.createElement(Toast, props), wrapper);
};

Toast.hide = function (fn) {
    ReactDOM.render(React.createElement(Toast, { visible: false, onDidHide: fn }), wrapper);
};

Toast.displayName = 'Toast';

module.exports = Toast;
//# sourceMappingURL=data:application/json;base64,
